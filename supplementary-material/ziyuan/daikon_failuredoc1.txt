
Executing target program: java -cp daikon.jar:bin/:. -ea -Xmx1000m -javaagent:daikon.jar=--daikon --dtrace-file=ApacheMathTest4b.dtrace.gz org.apache.commons.math.issues.ApacheMathTest4b
entered daikon.chicory.Runtime.setDtrace(./ApacheMathTest4b.dtrace.gz, false)...

Executing daikon: java -Xmx1000m -cp daikon.jar:bin/:. -ea daikon.Daikon  ./ApacheMathTest4b.dtrace.gz
Daikon version 5.2.22, released February 1, 2016; http://plse.cs.washington.edu/daikon.
Reading declaration files [8:36:05 PM]:                                                                                                                                                                                                                                Processing trace data; reading 1 dtrace file:
[8:36:06 PM]: Checking size of ./ApacheMathTest4b.dtrace.gz                    [8:36:07 PM]: Checking size of ./ApacheMathTest4b.dtrace.gz                    [8:36:08 PM]: Checking size of ./ApacheMathTest4b.dtrace.gz                    [8:36:09 PM]: Checking size of ./ApacheMathTest4b.dtrace.gz                    [8:36:10 PM]: Checking size of ./ApacheMathTest4b.dtrace.gz                    [8:36:11 PM]: Checking size of ./ApacheMathTest4b.dtrace.gz                    [8:36:12 PM]: Checking size of ./ApacheMathTest4b.dtrace.gz                    [8:36:13 PM]: Checking size of ./ApacheMathTest4b.dtrace.gz                    [8:36:14 PM]: Checking size of ./ApacheMathTest4b.dtrace.gz                    [8:36:15 PM]: Checking size of ./ApacheMathTest4b.dtrace.gz                    [8:36:16 PM]: Reading ./ApacheMathTest4b.dtrace.gz (line 74172, 0.07%) ...     [8:36:17 PM]: Reading ./ApacheMathTest4b.dtrace.gz (line 143780, 0.13%) ...    [8:36:18 PM]: Reading ./ApacheMathTest4b.dtrace.gz (line 230622, 0.21%) ...    [8:36:19 PM]: Reading ./ApacheMathTest4b.dtrace.gz (line 805123, 0.74%) ...    [8:36:20 PM]: Reading ./ApacheMathTest4b.dtrace.gz (line 3795621, 3.50%) ...   [8:36:21 PM]: Reading ./ApacheMathTest4b.dtrace.gz (line 7023814, 6.47%) ...   [8:36:22 PM]: Reading ./ApacheMathTest4b.dtrace.gz (line 10266468, 9.46%) ...  [8:36:23 PM]: Reading ./ApacheMathTest4b.dtrace.gz (line 13269811, 12.23%) ... [8:36:24 PM]: Reading ./ApacheMathTest4b.dtrace.gz (line 16203715, 14.94%) ... [8:36:25 PM]: Reading ./ApacheMathTest4b.dtrace.gz (line 19318075, 17.81%) ... [8:36:26 PM]: Reading ./ApacheMathTest4b.dtrace.gz (line 22368553, 20.62%) ... [8:36:27 PM]: Reading ./ApacheMathTest4b.dtrace.gz (line 25200047, 23.23%) ... [8:36:28 PM]: Reading ./ApacheMathTest4b.dtrace.gz (line 27915397, 25.73%) ... [8:36:29 PM]: Reading ./ApacheMathTest4b.dtrace.gz (line 30715915, 28.31%) ... [8:36:30 PM]: Reading ./ApacheMathTest4b.dtrace.gz (line 33770381, 31.13%) ... [8:36:31 PM]: Reading ./ApacheMathTest4b.dtrace.gz (line 36675540, 33.81%) ... [8:36:32 PM]: Reading ./ApacheMathTest4b.dtrace.gz (line 39939116, 36.81%) ... [8:36:33 PM]: Reading ./ApacheMathTest4b.dtrace.gz (line 43138241, 39.76%) ... [8:36:34 PM]: Reading ./ApacheMathTest4b.dtrace.gz (line 46214037, 42.60%) ... [8:36:35 PM]: Reading ./ApacheMathTest4b.dtrace.gz (line 48188330, 44.42%) ... [8:36:36 PM]: Reading ./ApacheMathTest4b.dtrace.gz (line 50380687, 46.44%) ... [8:36:37 PM]: Reading ./ApacheMathTest4b.dtrace.gz (line 52685212, 48.56%) ... [8:36:38 PM]: Reading ./ApacheMathTest4b.dtrace.gz (line 54913912, 50.62%) ... [8:36:39 PM]: Reading ./ApacheMathTest4b.dtrace.gz (line 56976585, 52.52%) ... [8:36:40 PM]: Reading ./ApacheMathTest4b.dtrace.gz (line 59176868, 54.55%) ... [8:36:41 PM]: Reading ./ApacheMathTest4b.dtrace.gz (line 61446651, 56.64%) ... [8:36:42 PM]: Reading ./ApacheMathTest4b.dtrace.gz (line 63669849, 58.69%) ... [8:36:43 PM]: Reading ./ApacheMathTest4b.dtrace.gz (line 65903051, 60.75%) ... [8:36:44 PM]: Reading ./ApacheMathTest4b.dtrace.gz (line 68273162, 62.93%) ... [8:36:45 PM]: Reading ./ApacheMathTest4b.dtrace.gz (line 70426699, 64.92%) ... [8:36:46 PM]: Reading ./ApacheMathTest4b.dtrace.gz (line 72789930, 67.10%) ... [8:36:47 PM]: Reading ./ApacheMathTest4b.dtrace.gz (line 75193239, 69.31%) ... [8:36:48 PM]: Reading ./ApacheMathTest4b.dtrace.gz (line 77551276, 71.48%) ... [8:36:49 PM]: Reading ./ApacheMathTest4b.dtrace.gz (line 79916454, 73.67%) ... [8:36:50 PM]: Reading ./ApacheMathTest4b.dtrace.gz (line 82099396, 75.68%) ... [8:36:51 PM]: Reading ./ApacheMathTest4b.dtrace.gz (line 84145611, 77.56%) ... [8:36:52 PM]: Reading ./ApacheMathTest4b.dtrace.gz (line 86258084, 79.51%) ... [8:36:53 PM]: Reading ./ApacheMathTest4b.dtrace.gz (line 88234619, 81.33%) ... [8:36:54 PM]: Reading ./ApacheMathTest4b.dtrace.gz (line 91030870, 83.91%) ... [8:36:55 PM]: Reading ./ApacheMathTest4b.dtrace.gz (line 94003984, 86.65%) ... [8:36:56 PM]: Reading ./ApacheMathTest4b.dtrace.gz (line 97105294, 89.51%) ... [8:36:57 PM]: Reading ./ApacheMathTest4b.dtrace.gz (line 100699751, 92.82%) ...[8:36:58 PM]: Reading ./ApacheMathTest4b.dtrace.gz (line 104072257, 95.93%) ...[8:36:59 PM]: Reading ./ApacheMathTest4b.dtrace.gz (line 107819622, 99.39%) ...[8:37:00 PM]: Reading ./ApacheMathTest4b.dtrace.gz (line 108449854, 99.97%) ...[8:37:00 PM]: Finished reading ./ApacheMathTest4b.dtrace.gz                    
                                                                                                                                                              ===========================================================================
junit.framework.Assert:::OBJECT
this has only one value
===========================================================================
junit.framework.Assert.Assert():::EXIT
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::ENTER
message != null
condition == true
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::EXIT
message.toString == orig(message.toString)
===========================================================================
junit.framework.TestCase:::OBJECT
this has only one value
this.getClass().getName() == org.apache.commons.math.issues.ApacheMathTest4b.class
this.fName == null
===========================================================================
junit.framework.TestCase.TestCase():::EXIT
===========================================================================
junit.framework.TestCase.assertTrue(java.lang.String, boolean):::ENTER
message != null
condition == true
===========================================================================
junit.framework.TestCase.assertTrue(java.lang.String, boolean):::EXIT
message.toString == orig(message.toString)
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$1:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$10:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$10.ComposableFunction$10():::EXIT
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$11:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$11.ComposableFunction$11():::EXIT
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$12:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$12.ComposableFunction$12():::EXIT
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$13:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$13.ComposableFunction$13():::EXIT
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$14:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$14.ComposableFunction$14():::EXIT
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$15:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$15.ComposableFunction$15():::EXIT
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$16:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$16.ComposableFunction$16():::EXIT
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$17:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$17.ComposableFunction$17():::EXIT
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$18:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$18.ComposableFunction$18():::EXIT
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$19:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$19.ComposableFunction$19():::EXIT
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$1.ComposableFunction$1():::EXIT
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$2:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$20:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$20.ComposableFunction$20():::EXIT
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$21:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$21.ComposableFunction$21():::EXIT
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$22:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$22.ComposableFunction$22():::EXIT
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$23:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$23.ComposableFunction$23():::EXIT
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$24:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$24.ComposableFunction$24():::EXIT
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$25:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$25.ComposableFunction$25():::EXIT
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$26:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$26.ComposableFunction$26():::EXIT
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$27:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$27.ComposableFunction$27():::EXIT
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$2.ComposableFunction$2():::EXIT
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$3:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$3.ComposableFunction$3():::EXIT
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$4:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$4.ComposableFunction$4():::EXIT
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$5:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$5.ComposableFunction$5():::EXIT
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$6:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$6.ComposableFunction$6():::EXIT
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$6.value(double):::ENTER
d one of { -1.0, 0.0, Infinity }
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$6.value(double):::EXIT
return one of { -1.0, 0.0, Infinity }
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$7:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$7.ComposableFunction$7():::EXIT
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$8:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$8.ComposableFunction$8():::EXIT
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$9:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math.analysis.ComposableFunction$9.ComposableFunction$9():::EXIT
===========================================================================
org.apache.commons.math.analysis.ComposableFunction:::OBJECT
===========================================================================
org.apache.commons.math.analysis.ComposableFunction.ComposableFunction():::EXIT
===========================================================================
org.apache.commons.math.issues.ApacheMathTest4b:::OBJECT
this has only one value
===========================================================================
org.apache.commons.math.issues.ApacheMathTest4b.ApacheMathTest4b():::EXIT
===========================================================================
org.apache.commons.math.issues.ApacheMathTest4b.main(java.lang.String[]):::ENTER
args has only one value
args.getClass().getName() == java.lang.String[].class
args[] == []
args[].toString == []
===========================================================================
org.apache.commons.math.issues.ApacheMathTest4b.main(java.lang.String[]):::EXIT
args[] == orig(args[])
args[] == []
args[].toString == []
===========================================================================
org.apache.commons.math.issues.ApacheMathTest4b.test4b():::ENTER
===========================================================================
org.apache.commons.math.issues.ApacheMathTest4b.test4b():::EXIT
===========================================================================
org.apache.commons.math.issues.ApacheMathTest4b.test4c():::ENTER
===========================================================================
org.apache.commons.math.issues.ApacheMathTest4b.test4c():::EXIT
===========================================================================
org.apache.commons.math.issues.ApacheMathTest4b.test4d():::ENTER
===========================================================================
org.apache.commons.math.issues.ApacheMathTest4b.test4d():::EXIT
===========================================================================
org.apache.commons.math.linear.AbstractRealVector$1:::OBJECT
this.i >= 0
this.e != null
org.apache.commons.math.linear.AbstractRealVector.this != null
this.val$dim == 3
this.i <= this.val$dim
===========================================================================
org.apache.commons.math.linear.AbstractRealVector$1.AbstractRealVector$1(org.apache.commons.math.linear.AbstractRealVector, int):::ENTER
$hidden$2 == 3
===========================================================================
org.apache.commons.math.linear.AbstractRealVector$1.AbstractRealVector$1(org.apache.commons.math.linear.AbstractRealVector, int):::EXIT
org.apache.commons.math.linear.AbstractRealVector.this == orig(org.apache.commons.math.linear.AbstractRealVector.this)
this.val$dim == orig($hidden$2)
this.i == 0
org.apache.commons.math.linear.AbstractRealVector.this.getClass().getName() == orig(org.apache.commons.math.linear.AbstractRealVector.this.getClass().getName())
===========================================================================
org.apache.commons.math.linear.AbstractRealVector$1.hasNext():::ENTER
this has only one value
this.e has only one value
org.apache.commons.math.linear.AbstractRealVector.this has only one value
org.apache.commons.math.linear.AbstractRealVector.this.getClass().getName() == org.apache.commons.math.linear.OpenMapRealVector.class
===========================================================================
org.apache.commons.math.linear.AbstractRealVector$1.hasNext():::EXIT809
this.i one of { 0, 1, 2 }
return == true
===========================================================================
org.apache.commons.math.linear.AbstractRealVector$1.hasNext():::EXIT809;condition="return == true"
===========================================================================
org.apache.commons.math.linear.AbstractRealVector$1.hasNext():::EXIT810
this.i == this.val$dim
this.i == orig(this.val$dim)
this.i == 3
return == false
===========================================================================
org.apache.commons.math.linear.AbstractRealVector$1.hasNext():::EXIT810;condition="not(return == true)"
===========================================================================
org.apache.commons.math.linear.AbstractRealVector$1.hasNext():::EXIT
this.i == orig(this.i)
this.e == orig(this.e)
org.apache.commons.math.linear.AbstractRealVector.this == orig(org.apache.commons.math.linear.AbstractRealVector.this)
this.val$dim == orig(this.val$dim)
(this.i == 3)  <==>  (return == false)
(this.i == 3)  <==>  (this.i == this.val$dim)
(this.i one of { 0, 1, 2 })  <==>  (return == true)
this.e has only one value
org.apache.commons.math.linear.AbstractRealVector.this has only one value
org.apache.commons.math.linear.AbstractRealVector.this.getClass().getName() == org.apache.commons.math.linear.OpenMapRealVector.class
org.apache.commons.math.linear.AbstractRealVector.this.getClass().getName() == orig(org.apache.commons.math.linear.AbstractRealVector.this.getClass().getName())
===========================================================================
org.apache.commons.math.linear.AbstractRealVector$1.hasNext():::EXIT;condition="return == true"
this.i one of { 0, 1, 2 }
return == true
===========================================================================
org.apache.commons.math.linear.AbstractRealVector$1.hasNext():::EXIT;condition="not(return == true)"
this.i == this.val$dim
this.i == orig(this.val$dim)
this.i == 3
return == false
===========================================================================
org.apache.commons.math.linear.AbstractRealVector$1.next():::ENTER
this has only one value
this.i one of { 0, 1, 2 }
this.e has only one value
org.apache.commons.math.linear.AbstractRealVector.this has only one value
org.apache.commons.math.linear.AbstractRealVector.this.getClass().getName() == org.apache.commons.math.linear.OpenMapRealVector.class
===========================================================================
org.apache.commons.math.linear.AbstractRealVector$1.next():::EXIT
this.e == orig(this.e)
org.apache.commons.math.linear.AbstractRealVector.this == orig(org.apache.commons.math.linear.AbstractRealVector.this)
this.val$dim == orig(this.val$dim)
return.index == orig(this.i)
this.i one of { 1, 2, 3 }
this.e has only one value
org.apache.commons.math.linear.AbstractRealVector.this has only one value
org.apache.commons.math.linear.AbstractRealVector.this.getClass().getName() == org.apache.commons.math.linear.OpenMapRealVector.class
return has only one value
return.getClass().getName() == org.apache.commons.math.linear.AbstractRealVector$EntryImpl.class
return.index one of { 0, 1, 2 }
org.apache.commons.math.linear.AbstractRealVector.this.getClass().getName() == orig(org.apache.commons.math.linear.AbstractRealVector.this.getClass().getName())
===========================================================================
org.apache.commons.math.linear.AbstractRealVector$EntryImpl:::OBJECT
org.apache.commons.math.linear.AbstractRealVector.this != null
===========================================================================
org.apache.commons.math.linear.AbstractRealVector$EntryImpl.AbstractRealVector$EntryImpl(org.apache.commons.math.linear.AbstractRealVector):::ENTER
===========================================================================
org.apache.commons.math.linear.AbstractRealVector$EntryImpl.AbstractRealVector$EntryImpl(org.apache.commons.math.linear.AbstractRealVector):::EXIT
org.apache.commons.math.linear.AbstractRealVector.this == orig(org.apache.commons.math.linear.AbstractRealVector.this)
org.apache.commons.math.linear.AbstractRealVector.this.getClass().getName() == orig(org.apache.commons.math.linear.AbstractRealVector.this.getClass().getName())
===========================================================================
org.apache.commons.math.linear.AbstractRealVector$EntryImpl.getValue():::ENTER
this has only one value
org.apache.commons.math.linear.AbstractRealVector.this has only one value
org.apache.commons.math.linear.AbstractRealVector.this.getClass().getName() == org.apache.commons.math.linear.OpenMapRealVector.class
===========================================================================
org.apache.commons.math.linear.AbstractRealVector$EntryImpl.getValue():::EXIT
org.apache.commons.math.linear.AbstractRealVector.this == orig(org.apache.commons.math.linear.AbstractRealVector.this)
org.apache.commons.math.linear.AbstractRealVector.this has only one value
org.apache.commons.math.linear.AbstractRealVector.this.getClass().getName() == org.apache.commons.math.linear.OpenMapRealVector.class
return one of { -1.0, Infinity }
org.apache.commons.math.linear.AbstractRealVector.this.getClass().getName() == orig(org.apache.commons.math.linear.AbstractRealVector.this.getClass().getName())
===========================================================================
org.apache.commons.math.linear.AbstractRealVector$EntryImpl.setValue(double):::ENTER
this has only one value
org.apache.commons.math.linear.AbstractRealVector.this has only one value
org.apache.commons.math.linear.AbstractRealVector.this.getClass().getName() == org.apache.commons.math.linear.OpenMapRealVector.class
newValue one of { -1.0, 0.0 }
===========================================================================
org.apache.commons.math.linear.AbstractRealVector$EntryImpl.setValue(double):::EXIT
org.apache.commons.math.linear.AbstractRealVector.this == orig(org.apache.commons.math.linear.AbstractRealVector.this)
org.apache.commons.math.linear.AbstractRealVector.this has only one value
org.apache.commons.math.linear.AbstractRealVector.this.getClass().getName() == org.apache.commons.math.linear.OpenMapRealVector.class
org.apache.commons.math.linear.AbstractRealVector.this.getClass().getName() == orig(org.apache.commons.math.linear.AbstractRealVector.this.getClass().getName())
===========================================================================
org.apache.commons.math.linear.AbstractRealVector:::OBJECT
===========================================================================
org.apache.commons.math.linear.AbstractRealVector.AbstractRealVector():::EXIT
===========================================================================
org.apache.commons.math.linear.AbstractRealVector.checkIndex(int):::ENTER
this has only one value
this.getClass().getName() == org.apache.commons.math.linear.OpenMapRealVector.class
index one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.linear.AbstractRealVector.checkIndex(int):::EXIT
===========================================================================
org.apache.commons.math.linear.AbstractRealVector.iterator():::ENTER
===========================================================================
org.apache.commons.math.linear.AbstractRealVector.iterator():::EXIT
return.getClass().getName() == org.apache.commons.math.linear.AbstractRealVector$1.class
===========================================================================
org.apache.commons.math.linear.AbstractRealVector.mapInvToSelf():::ENTER
this has only one value
this.getClass().getName() == org.apache.commons.math.linear.OpenMapRealVector.class
===========================================================================
org.apache.commons.math.linear.AbstractRealVector.mapInvToSelf():::EXIT
return has only one value
return.getClass().getName() == org.apache.commons.math.linear.OpenMapRealVector.class
return.getClass().getName() == orig(this.getClass().getName())
===========================================================================
org.apache.commons.math.linear.AbstractRealVector.mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction):::ENTER
this has only one value
this.getClass().getName() == org.apache.commons.math.linear.OpenMapRealVector.class
function has only one value
function.getClass().getName() == org.apache.commons.math.analysis.ComposableFunction$6.class
===========================================================================
org.apache.commons.math.linear.AbstractRealVector.mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction):::EXIT
return has only one value
return.getClass().getName() == org.apache.commons.math.linear.OpenMapRealVector.class
return.getClass().getName() == orig(this.getClass().getName())
===========================================================================
org.apache.commons.math.linear.ArrayRealVector:::CLASS
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT != null
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX != null
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == "{"
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX != null
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == "}"
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR != null
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == "; "
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator != null
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == ";"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format != null
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == java.text.DecimalFormat.class
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString < org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString > org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString > org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString > org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString > org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString > org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString
===========================================================================
org.apache.commons.math.linear.ArrayRealVector:::OBJECT
this.data != null
size(this.data[]) one of { 0, 3, 5 }
size(this.data[])-1 != 0
org.apache.commons.math.linear.ArrayRealVector.serialVersionUID < size(this.data[])-1
org.apache.commons.math.linear.RealVectorFormat.serialVersionUID < size(this.data[])-1
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ArrayRealVector():::EXIT
this.data has only one value
this.data[] == []
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ArrayRealVector(double[]):::ENTER
d[] == [-1.0, 0.0, -1.0]
d[] elements one of { -1.0, 0.0 }
size(d[]) == 3
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ArrayRealVector(double[]):::EXIT
this.data[] == d[]
d[] == orig(d[])
d[] == [-1.0, 0.0, -1.0]
d[] elements one of { -1.0, 0.0 }
size(this.data[]) == 3
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ArrayRealVector(double[], boolean):::ENTER
d[] == [1.0, NaN, 1.0]
d[] elements one of { 1.0, Double.NaN }
copyArray == false
size(d[]) == 3
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ArrayRealVector(double[], boolean):::EXIT
this.data == orig(d)
this.data[] == d[]
d[] == orig(d[])
d[] == [1.0, NaN, 1.0]
d[] elements one of { 1.0, Double.NaN }
size(this.data[]) == 3
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ArrayRealVector(double[], org.apache.commons.math.linear.ArrayRealVector):::ENTER
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator
size(v1[]) == size(v2.data[])-1
v1[] == [100.0, 0.0]
v1[] elements one of { 0.0, 100.0 }
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == "{"
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == "}"
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == "; "
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == ";"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == java.text.DecimalFormat.class
v2.data[] one of { [-1.0, Infinity, -1.0], [NaN, -0.0, NaN] }
size(v2.data[]) == 3
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ArrayRealVector(double[], org.apache.commons.math.linear.ArrayRealVector):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
v1[] == orig(v1[])
v2.data == orig(v2.data)
v2.data[] == orig(v2.data[])
size(v2.data[])-1 == orig(size(v1[]))
this.data[] one of { [100.0, 0.0, -1.0, Infinity, -1.0], [100.0, 0.0, NaN, -0.0, NaN] }
v1[] == [100.0, 0.0]
v1[] elements one of { 0.0, 100.0 }
v2.data[] one of { [-1.0, Infinity, -1.0], [NaN, -0.0, NaN] }
size(this.data[]) == 5
size(v2.data[]) == 3
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ArrayRealVector(java.lang.Double[]):::ENTER
d.getClass().getName() == java.lang.Double[].class
size(d[]) == 3
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ArrayRealVector(java.lang.Double[]):::EXIT
d[] == orig(d[])
size(this.data[]) == orig(size(d[]))
this.data[] == [NaN, Infinity, NaN]
this.data[] elements one of { Infinity, Double.NaN }
size(this.data[]) == 3
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector, double[]):::ENTER
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == "{"
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == "}"
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == "; "
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == ";"
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format has only one value
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == java.text.DecimalFormat.class
v1.data[] one of { [-1.0, Infinity, -1.0], [NaN, -0.0, NaN] }
v2[] == []
size(v1.data[]) == 3
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector, double[]):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
this.data[] == v1.data[]
this.data[] == orig(v1.data[])
v1.data == orig(v1.data)
v2[] == orig(v2[])
this.data[] one of { [-1.0, Infinity, -1.0], [NaN, -0.0, NaN] }
v2[] == []
size(this.data[]) == 3
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.checkVectorDimensions(int):::ENTER
n == size(this.data[])
this.data[] == [-1.0, 0.0, -1.0]
this.data[] elements one of { -1.0, 0.0 }
size(this.data[]) == 3
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.checkVectorDimensions(int):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
this.data == orig(this.data)
this.data[] == orig(this.data[])
orig(n) == size(this.data[])
this.data[] == [-1.0, 0.0, -1.0]
this.data[] elements one of { -1.0, 0.0 }
orig(n) == 3
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ebeDivide(double[]):::ENTER
this.data[] == v[]
this.data[] == [-1.0, 0.0, -1.0]
this.data[] elements one of { -1.0, 0.0 }
size(this.data[]) == 3
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ebeDivide(double[]):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
this.data == orig(this.data)
this.data[] == v[]
v[] == orig(this.data[])
v[] == orig(v[])
v[] == [-1.0, 0.0, -1.0]
v[] elements one of { -1.0, 0.0 }
return.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
size(this.data[]) == 3
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ebeDivide(org.apache.commons.math.linear.ArrayRealVector):::ENTER
this.data[] == v.data[]
this.data[] == [-1.0, 0.0, -1.0]
this.data[] elements one of { -1.0, 0.0 }
size(this.data[]) == 3
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ebeDivide(org.apache.commons.math.linear.ArrayRealVector):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
this.data == orig(this.data)
this.data[] == v.data[]
this.data[] == orig(this.data[])
this.data[] == orig(v.data[])
v.data == orig(v.data)
size(this.data[]) == size(return.data[])
this.data[] == [-1.0, 0.0, -1.0]
this.data[] elements one of { -1.0, 0.0 }
return.data[] == [1.0, NaN, 1.0]
return.data[] elements one of { 1.0, Double.NaN }
size(this.data[]) == 3
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ebeDivide(org.apache.commons.math.linear.RealVector):::ENTER
this.data[] == [-1.0, 0.0, -1.0]
this.data[] elements one of { -1.0, 0.0 }
v.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
size(this.data[]) == 3
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ebeDivide(org.apache.commons.math.linear.RealVector):::EXIT633
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.ebeDivide(org.apache.commons.math.linear.RealVector):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.data[] == [-1.0, 0.0, -1.0]
this.data[] elements one of { -1.0, 0.0 }
return.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
size(this.data[]) == 3
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
return.getClass().getName() == orig(v.getClass().getName())
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.equals(java.lang.Object):::ENTER
this.data[] elements >= -1.0
other != null
size(this.data[]) one of { 0, 3 }
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() != other.getClass().getName()
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.equals(java.lang.Object):::EXIT1200
this.data has only one value
this.data[] == []
return == false
orig(this) has only one value
orig(other) has only one value
orig(other.getClass().getName()) == org.apache.commons.math.linear.OpenMapRealVector.class
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.equals(java.lang.Object):::EXIT1200;condition="not(return == true)"
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.equals(java.lang.Object):::EXIT1204
this.data[] one of { [1.0, NaN, 1.0], [NaN, -0.0, NaN], [NaN, Infinity, NaN] }
this.data[] elements >= -0.0
return == true
orig(other.getClass().getName()) == org.apache.commons.math.linear.ArrayRealVector.class
size(this.data[]) == 3
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.equals(java.lang.Object):::EXIT1204;condition="return == true"
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.equals(java.lang.Object):::EXIT1209
this.data[] one of { [-1.0, Infinity, -1.0], [1.0, NaN, 1.0] }
return == false
orig(other) has only one value
orig(other.getClass().getName()) == org.apache.commons.math.linear.OpenMapRealVector.class
size(this.data[]) == 3
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.equals(java.lang.Object):::EXIT1209;condition="not(return == true)"
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.equals(java.lang.Object):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
this.data == orig(this.data)
this.data[] == orig(this.data[])
(return == false)  <==>  (orig(other.getClass().getName()) == org.apache.commons.math.linear.OpenMapRealVector.class)
(return == false)  ==>  (orig(other) has only one value)
(return == false)  ==>  (size(this.data[]) one of { 0, 3 })
(return == false)  ==>  (this.data[] elements >= -1.0)
(return == false)  ==>  (this.data[] one of { [], [-1.0, Infinity, -1.0], [1.0, NaN, 1.0] })
(return == true)  <==>  (orig(other.getClass().getName()) == org.apache.commons.math.linear.ArrayRealVector.class)
(return == true)  ==>  (size(this.data[]) == 3)
(return == true)  ==>  (this.data[] elements >= -0.0)
(return == true)  ==>  (this.data[] one of { [1.0, NaN, 1.0], [NaN, -0.0, NaN], [NaN, Infinity, NaN] })
this.data[] elements >= -1.0
size(this.data[]) one of { 0, 3 }
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() != orig(other.getClass().getName())
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.equals(java.lang.Object):::EXIT;condition="return == true"
this.data[] one of { [1.0, NaN, 1.0], [NaN, -0.0, NaN], [NaN, Infinity, NaN] }
this.data[] elements >= -0.0
return == true
orig(other.getClass().getName()) == org.apache.commons.math.linear.ArrayRealVector.class
size(this.data[]) == 3
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.equals(java.lang.Object):::EXIT;condition="not(return == true)"
this.data[] one of { [], [-1.0, Infinity, -1.0], [1.0, NaN, 1.0] }
return == false
orig(other) has only one value
orig(other.getClass().getName()) == org.apache.commons.math.linear.OpenMapRealVector.class
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.getDimension():::ENTER
this.data[] elements >= -1.0
size(this.data[]) == 3
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.getDimension():::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
this.data == orig(this.data)
this.data[] == orig(this.data[])
return == size(this.data[])
return == orig(size(this.data[]))
this.data[] elements >= -1.0
return == 3
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.getEntry(int):::ENTER
this.data[] one of { [-1.0, Infinity, -1.0], [NaN, -0.0, NaN] }
this.data[] elements >= -1.0
index one of { 0, 1, 2 }
size(this.data[]) == 3
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.getEntry(int):::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.data[] one of { [-1.0, Infinity, -1.0], [NaN, -0.0, NaN] }
this.data[] elements >= -1.0
size(this.data[]) == 3
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.hashCode():::ENTER
this.data[] one of { [1.0, NaN, 1.0], [NaN, -0.0, NaN], [NaN, Infinity, NaN] }
this.data[] elements >= -0.0
size(this.data[]) == 3
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.hashCode():::EXIT1223
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.hashCode():::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.data[] one of { [1.0, NaN, 1.0], [NaN, -0.0, NaN], [NaN, Infinity, NaN] }
this.data[] elements >= -0.0
return == 9
size(this.data[]) == 3
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.isNaN():::ENTER
this.data[] one of { [1.0, NaN, 1.0], [NaN, -0.0, NaN], [NaN, Infinity, NaN] }
this.data[] elements >= -0.0
size(this.data[]) == 3
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.isNaN():::EXIT1139
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.isNaN():::EXIT1139;condition="return == true"
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.isNaN():::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.data[] one of { [1.0, NaN, 1.0], [NaN, -0.0, NaN], [NaN, Infinity, NaN] }
this.data[] elements >= -0.0
return == true
size(this.data[]) == 3
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.isNaN():::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.mapInvToSelf():::ENTER
this.data[] one of { [-1.0, 0.0, -1.0], [NaN, -Infinity, NaN], [NaN, Infinity, NaN] }
size(this.data[]) == 3
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.mapInvToSelf():::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
this.data == orig(this.data)
size(this.data[]) == orig(size(this.data[]))
this.data[] one of { [-1.0, Infinity, -1.0], [NaN, -0.0, NaN] }
return.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
size(this.data[]) == 3
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.mapLog10ToSelf():::ENTER
this.data[] == [-1.0, 0.0, -1.0]
this.data[] elements one of { -1.0, 0.0 }
size(this.data[]) == 3
===========================================================================
org.apache.commons.math.linear.ArrayRealVector.mapLog10ToSelf():::EXIT
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format)
this.data == orig(this.data)
size(this.data[]) == orig(size(this.data[]))
this.data[] == [NaN, -Infinity, NaN]
this.data[] elements one of { -Infinity, Double.NaN }
return.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
size(this.data[]) == 3
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.prefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedPrefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.suffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSuffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.separator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.trimmedSeparator.toString)
org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName() == orig(org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format.getClass().getName())
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector:::CLASS
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector:::OBJECT
org.apache.commons.math.linear.OpenMapRealVector.DEFAULT_ZERO_TOLERANCE == this.entries.missingEntries
org.apache.commons.math.linear.OpenMapRealVector.DEFAULT_ZERO_TOLERANCE == this.epsilon
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[this.entries.mask]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[this.entries.mask-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[this.virtualSize]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.states[this.entries.mask]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.states[this.entries.mask-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.states[this.virtualSize]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER
this.entries.keys[] <= this.entries.states[] (lexically)
this.entries.mask == size(this.entries.keys[])-1
this.entries.mask == size(this.entries.values[])-1
this.entries.mask == size(this.entries.states[])-1
size(this.entries.keys[]) == size(this.entries.values[])
size(this.entries.keys[]) == size(this.entries.states[])
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE] == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL-1]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED-1]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER-1]
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED-1]
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER-1]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] == this.entries.keys[this.virtualSize-1]
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] == this.entries.states[this.virtualSize-1]
this.entries != null
this.entries.keys != null
this.entries.keys[] elements one of { 0, 1, 2 }
this.entries.values != null
this.entries.values[] elements >= -1.0
this.entries.states != null
this.entries.states[] elements one of { 0, 1, 2 }
this.entries.missingEntries == 0.0
this.entries.size >= 0
this.entries.count >= 0
this.virtualSize == 3
size(this.entries.keys[]) == 32
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE] one of { 0, 1 }
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] one of { 0, 1 }
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] one of { 0, 2 }
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] one of { 0, 1 }
this.entries.keys[this.entries.size] one of { 0, 2 }
this.entries.keys[this.entries.count] one of { 0, 2 }
this.entries.states[this.entries.size] one of { 0, 1 }
this.entries.states[this.entries.count] one of { 0, 1 }
org.apache.commons.math.linear.OpenMapRealVector.DEFAULT_ZERO_TOLERANCE in this.entries.values[]
this.entries.keys[] elements < org.apache.commons.math.linear.OpenMapRealVector.serialVersionUID
this.entries.states[] elements < org.apache.commons.math.linear.OpenMapRealVector.serialVersionUID
org.apache.commons.math.linear.OpenMapRealVector.serialVersionUID > this.entries.size
org.apache.commons.math.linear.OpenMapRealVector.serialVersionUID > this.entries.count
org.apache.commons.math.linear.OpenMapRealVector.serialVersionUID > this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.linear.OpenMapRealVector.serialVersionUID > this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.linear.OpenMapRealVector.serialVersionUID > this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.linear.OpenMapRealVector.serialVersionUID > this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.linear.OpenMapRealVector.serialVersionUID > this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.linear.OpenMapRealVector.serialVersionUID > this.entries.keys[this.entries.size]
org.apache.commons.math.linear.OpenMapRealVector.serialVersionUID > this.entries.keys[this.entries.count]
org.apache.commons.math.linear.OpenMapRealVector.serialVersionUID > this.entries.states[this.entries.size]
org.apache.commons.math.linear.OpenMapRealVector.serialVersionUID > this.entries.states[this.entries.count]
this.entries.keys[] elements >= org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE
this.entries.states[] elements >= org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= this.entries.size
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= this.entries.count
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= this.entries.keys[this.entries.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= this.entries.keys[this.entries.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= this.entries.states[this.entries.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= this.entries.states[this.entries.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL >= this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL >= this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL != this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL >= this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL != this.entries.keys[this.entries.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL != this.entries.keys[this.entries.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL >= this.entries.states[this.entries.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL >= this.entries.states[this.entries.count]
this.entries.keys[] elements <= org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED
this.entries.states[] elements <= org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED > this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED > this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED > this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= this.entries.keys[this.entries.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= this.entries.keys[this.entries.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED > this.entries.states[this.entries.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED > this.entries.states[this.entries.count]
this.entries.keys[] elements > org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID
this.entries.states[] elements > org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.entries.size
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.entries.count
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.entries.keys[this.entries.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.entries.keys[this.entries.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.entries.states[this.entries.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.entries.states[this.entries.count]
this.entries.keys[] elements < org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE
this.entries.states[] elements < org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.entries.size
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.entries.count
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.entries.keys[this.entries.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.entries.keys[this.entries.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.entries.states[this.entries.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.entries.states[this.entries.count]
this.entries.keys[] elements < org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT
this.entries.states[] elements < org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.entries.size
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.entries.count
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.entries.keys[this.entries.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.entries.keys[this.entries.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.entries.states[this.entries.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.entries.states[this.entries.count]
this.entries.keys[] elements <= this.entries.size
this.entries.keys[] elements < this.entries.mask
this.entries.keys[] elements <= this.entries.count
this.entries.keys[] elements < this.virtualSize
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] in this.entries.keys[]
this.entries.missingEntries in this.entries.values[]
this.entries.states[] elements <= this.entries.size
this.entries.states[] elements < this.entries.mask
this.entries.states[] elements <= this.entries.count
this.entries.states[] elements < this.virtualSize
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] in this.entries.states[]
this.entries.size < this.entries.mask
this.entries.size <= this.entries.count
this.entries.size <= this.virtualSize
this.entries.size >= this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
this.entries.size >= this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.entries.size >= this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.entries.size >= this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
this.entries.size >= this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
this.entries.size >= this.entries.keys[this.entries.size]
this.entries.size >= this.entries.keys[this.entries.count]
this.entries.size >= this.entries.states[this.entries.size]
this.entries.size >= this.entries.states[this.entries.count]
this.entries.mask > this.entries.count
this.entries.mask > this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
this.entries.mask > this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.entries.mask > this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.entries.mask > this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
this.entries.mask > this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
this.entries.mask > this.entries.keys[this.entries.size]
this.entries.mask > this.entries.keys[this.entries.count]
this.entries.mask > this.entries.states[this.entries.size]
this.entries.mask > this.entries.states[this.entries.count]
this.entries.count >= this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
this.entries.count >= this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.entries.count >= this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.entries.count >= this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
this.entries.count >= this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
this.entries.count >= this.entries.keys[this.entries.size]
this.entries.count >= this.entries.keys[this.entries.count]
this.entries.count >= this.entries.states[this.entries.size]
this.entries.count >= this.entries.states[this.entries.count]
this.virtualSize > this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
this.virtualSize > this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.virtualSize > this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.virtualSize > this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
this.virtualSize > this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
this.virtualSize > this.entries.keys[this.entries.size]
this.virtualSize > this.entries.keys[this.entries.count]
this.virtualSize > this.entries.states[this.entries.size]
this.virtualSize > this.entries.states[this.entries.count]
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE] >= this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE] >= this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE] >= this.entries.states[this.entries.size]
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE] >= this.entries.states[this.entries.count]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] <= this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] >= this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] >= this.entries.keys[this.entries.size]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] >= this.entries.keys[this.entries.count]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] >= this.entries.states[this.entries.size]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] >= this.entries.states[this.entries.count]
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] >= this.entries.states[this.entries.size]
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] >= this.entries.states[this.entries.count]
this.entries.keys[this.entries.size] >= this.entries.keys[this.entries.count]
this.entries.keys[this.entries.size] >= this.entries.states[this.entries.size]
this.entries.keys[this.entries.size] >= this.entries.states[this.entries.count]
this.entries.keys[this.entries.count] >= this.entries.states[this.entries.count]
this.entries.states[this.entries.size] >= this.entries.states[this.entries.count]
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.OpenMapRealVector(org.apache.commons.math.linear.RealVector):::ENTER
v.getClass().getName() == org.apache.commons.math.linear.ArrayRealVector.class
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.OpenMapRealVector(org.apache.commons.math.linear.RealVector):::EXIT
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[this.virtualSize-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.entries.keys[this.virtualSize-1]
this.entries.size == this.entries.count
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED-1]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER-1]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.entries.states[this.entries.size-1]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.entries.states[this.entries.count-1]
this.entries.keys[] one of { [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.entries.values[] one of { [-1.0, Infinity, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [NaN, 0.0, NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.entries.states[] elements one of { 0, 1 }
this.entries.states[] one of { [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.entries.size one of { 2, 3 }
this.entries.keys[this.entries.size-1] one of { 0, 2 }
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.getDimension():::ENTER
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[this.entries.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.states[this.entries.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[this.virtualSize-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.entries.keys[this.virtualSize-1]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.entries.states[this.entries.count-1]
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.entries.states[this.entries.size-1]
this.entries.keys[this.entries.size-1] == this.entries.keys[this.entries.count-1]
this has only one value
this.entries has only one value
this.entries.keys has only one value
this.entries.keys[] one of { [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.entries.values has only one value
this.entries.values[] elements one of { -1.0, 0.0, Infinity }
this.entries.values[] one of { [-1.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [-1.0, Infinity, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.entries.states has only one value
this.entries.states[] one of { [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.entries.size one of { 2, 3 }
this.entries.count one of { 3, 4 }
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] one of { 1, 2 }
this.entries.keys[this.entries.size-1] one of { 0, 2 }
org.apache.commons.math.linear.OpenMapRealVector.serialVersionUID > this.entries.keys[this.entries.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE < this.entries.size
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE < this.entries.count
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE < this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= this.entries.keys[this.entries.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL < this.entries.size
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL < this.entries.count
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL <= this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL != this.entries.keys[this.entries.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED <= this.entries.size
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED < this.entries.count
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= this.entries.keys[this.entries.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.entries.keys[this.entries.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.entries.keys[this.entries.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.entries.keys[this.entries.size-1]
this.entries.keys[] elements < this.entries.count
this.entries.states[] elements < this.entries.count
this.entries.states[] elements <= this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.entries.keys[this.entries.size] in this.entries.states[]
this.entries.size > this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.entries.size > this.entries.keys[this.entries.size-1]
this.entries.size > this.entries.states[this.entries.size]
this.entries.mask > this.entries.keys[this.entries.size-1]
this.entries.count >= this.virtualSize
this.entries.count > this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.entries.count > this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.entries.count > this.entries.keys[this.entries.size]
this.entries.count > this.entries.keys[this.entries.size-1]
this.entries.count > this.entries.states[this.entries.size]
this.virtualSize > this.entries.keys[this.entries.size-1]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] != this.entries.keys[this.entries.size]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] <= this.entries.keys[this.entries.size-1]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] != this.entries.states[this.entries.size]
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] >= this.entries.keys[this.entries.size]
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] != this.entries.keys[this.entries.size-1]
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] > this.entries.states[this.entries.size]
this.entries.keys[this.entries.size] != this.entries.keys[this.entries.size-1]
this.entries.keys[this.entries.size-1] != this.entries.states[this.entries.size]
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.getDimension():::EXIT
this.entries == orig(this.entries)
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[this.entries.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[return]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[orig(this.entries.mask)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[orig(this.entries.mask)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[orig(this.entries.count)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[orig(this.virtualSize)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.states[this.entries.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.states[return]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.states[orig(this.entries.mask)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.states[orig(this.entries.mask)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.states[orig(this.entries.count)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.states[orig(this.virtualSize)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.keys[post(this.entries.mask)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.keys[post(this.entries.mask)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.states[post(this.entries.mask)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.states[post(this.entries.mask)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.keys[post(this.entries.count)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.states[post(this.entries.count)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.keys[post(this.virtualSize)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.states[post(this.virtualSize)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.keys[post(return)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.states[post(return)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[this.virtualSize-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[return-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[orig(this.virtualSize)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.entries.states[post(this.virtualSize)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.entries.states[post(return)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.entries.keys[this.virtualSize-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.entries.keys[return-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.entries.keys[orig(this.virtualSize)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(this.entries.keys[post(this.virtualSize)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(this.entries.keys[post(return)-1])
this.entries.keys == orig(this.entries.keys)
this.entries.keys[] == orig(this.entries.keys[])
this.entries.values == orig(this.entries.values)
this.entries.values[] == orig(this.entries.values[])
this.entries.states == orig(this.entries.states)
this.entries.states[] == orig(this.entries.states[])
this.entries.missingEntries == orig(this.entries.missingEntries)
this.entries.size == orig(this.entries.size)
this.entries.mask == orig(this.entries.mask)
this.entries.mask == orig(size(this.entries.keys[]))-1
this.entries.mask == orig(size(this.entries.values[]))-1
this.entries.mask == orig(size(this.entries.states[]))-1
this.entries.count == orig(this.entries.count)
this.virtualSize == return
return == orig(this.virtualSize)
size(this.entries.keys[]) == orig(size(this.entries.values[]))
size(this.entries.keys[]) == orig(size(this.entries.states[]))
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.entries.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED)-1])
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.entries.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER)-1])
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.entries.states[this.entries.count-1]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.entries.states[orig(this.entries.count)-1]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.entries.states[post(this.entries.count)-1])
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.entries.states[this.entries.count-1])
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.entries.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED)-1])
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.entries.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER)-1])
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.entries.states[this.entries.size-1]
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.entries.states[orig(this.entries.size)-1]
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.entries.states[post(this.entries.size)-1])
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.entries.states[this.entries.size-1])
this.entries.keys[this.entries.size-1] == this.entries.keys[this.entries.count-1]
this.entries.keys[this.entries.size-1] == this.entries.keys[orig(this.entries.count)-1]
this.entries.keys[this.entries.size-1] == orig(this.entries.keys[post(this.entries.count)-1])
this.entries.keys[this.entries.size-1] == orig(this.entries.keys[this.entries.count-1])
this.entries has only one value
this.entries.keys has only one value
this.entries.keys[] one of { [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.entries.values has only one value
this.entries.values[] elements one of { -1.0, 0.0, Infinity }
this.entries.values[] one of { [-1.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [-1.0, Infinity, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.entries.states has only one value
this.entries.states[] one of { [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.entries.size one of { 2, 3 }
this.entries.count one of { 3, 4 }
return == 3
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] one of { 1, 2 }
this.entries.keys[this.entries.size-1] one of { 0, 2 }
org.apache.commons.math.linear.OpenMapRealVector.serialVersionUID > this.entries.keys[this.entries.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE < this.entries.size
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE < this.entries.count
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE < this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= this.entries.keys[this.entries.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL < this.entries.size
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL < this.entries.count
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL <= this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL != this.entries.keys[this.entries.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED <= this.entries.size
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED < this.entries.count
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= this.entries.keys[this.entries.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.entries.keys[this.entries.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.entries.keys[this.entries.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.entries.keys[this.entries.size-1]
this.entries.keys[] elements < this.entries.count
this.entries.keys[] elements < return
this.entries.states[] elements < this.entries.count
this.entries.states[] elements < return
this.entries.states[] elements <= this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.entries.keys[this.entries.size] in this.entries.states[]
this.entries.size <= return
this.entries.size > this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.entries.size > this.entries.keys[this.entries.size-1]
this.entries.size > this.entries.states[this.entries.size]
this.entries.mask > this.entries.keys[this.entries.size-1]
this.entries.count >= return
this.entries.count > this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.entries.count > this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.entries.count > this.entries.keys[this.entries.size]
this.entries.count > this.entries.keys[this.entries.size-1]
this.entries.count > this.entries.states[this.entries.size]
return > this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
return > this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
return > this.entries.keys[this.entries.size]
return > this.entries.keys[this.entries.size-1]
return > this.entries.states[this.entries.size]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] != this.entries.keys[this.entries.size]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] <= this.entries.keys[this.entries.size-1]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] != this.entries.states[this.entries.size]
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] >= this.entries.keys[this.entries.size]
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] != this.entries.keys[this.entries.size-1]
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] > this.entries.states[this.entries.size]
this.entries.keys[this.entries.size] != this.entries.keys[this.entries.size-1]
this.entries.keys[this.entries.size-1] != this.entries.states[this.entries.size]
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.getEntry(int):::ENTER
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[this.entries.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.states[this.entries.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[this.virtualSize-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.entries.keys[this.virtualSize-1]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.entries.states[this.entries.count-1]
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.entries.states[this.entries.size-1]
this.entries.keys[this.entries.size-1] == this.entries.keys[this.entries.count-1]
this has only one value
this.entries has only one value
this.entries.keys has only one value
this.entries.keys[] one of { [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.entries.values has only one value
this.entries.values[] elements one of { -1.0, 0.0, Infinity }
this.entries.values[] one of { [-1.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [-1.0, Infinity, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.entries.states has only one value
this.entries.states[] one of { [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.entries.size one of { 2, 3 }
this.entries.count one of { 3, 4 }
index one of { 0, 1, 2 }
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] one of { 1, 2 }
this.entries.keys[this.entries.size-1] one of { 0, 2 }
this.entries.states[index] one of { 1, 2 }
org.apache.commons.math.linear.OpenMapRealVector.serialVersionUID > index
org.apache.commons.math.linear.OpenMapRealVector.serialVersionUID > this.entries.keys[this.entries.size-1]
org.apache.commons.math.linear.OpenMapRealVector.serialVersionUID > this.entries.keys[index]
org.apache.commons.math.linear.OpenMapRealVector.serialVersionUID > this.entries.states[index]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE < this.entries.size
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE < this.entries.count
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= index
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE < this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= this.entries.keys[this.entries.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= this.entries.keys[index]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE < this.entries.states[index]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL < this.entries.size
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL < this.entries.count
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL <= this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL != this.entries.keys[this.entries.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL <= this.entries.states[index]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED <= this.entries.size
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED < this.entries.count
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= index
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= this.entries.keys[this.entries.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= this.entries.keys[index]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= this.entries.states[index]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < index
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.entries.keys[this.entries.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.entries.keys[index]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.entries.states[index]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > index
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.entries.keys[this.entries.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.entries.keys[index]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.entries.states[index]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > index
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.entries.keys[this.entries.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.entries.keys[index]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.entries.states[index]
this.entries.keys[] elements < this.entries.count
this.entries.states[] elements < this.entries.count
index in this.entries.states[]
this.entries.states[] elements <= this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.entries.keys[this.entries.size] in this.entries.states[]
this.entries.keys[index] in this.entries.states[]
this.entries.size >= index
this.entries.size > this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.entries.size > this.entries.keys[this.entries.size-1]
this.entries.size >= this.entries.keys[index]
this.entries.size > this.entries.states[this.entries.size]
this.entries.size >= this.entries.states[index]
this.entries.mask > index
this.entries.mask > this.entries.keys[this.entries.size-1]
this.entries.mask > this.entries.keys[index]
this.entries.mask > this.entries.states[index]
this.entries.count >= this.virtualSize
this.entries.count > index
this.entries.count > this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.entries.count > this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.entries.count > this.entries.keys[this.entries.size]
this.entries.count > this.entries.keys[this.entries.size-1]
this.entries.count > this.entries.keys[index]
this.entries.count > this.entries.states[this.entries.size]
this.entries.count > this.entries.states[index]
this.virtualSize > index
this.virtualSize > this.entries.keys[this.entries.size-1]
this.virtualSize > this.entries.keys[index]
this.virtualSize > this.entries.states[index]
index <= this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
index >= this.entries.keys[index]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] != this.entries.keys[this.entries.size]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] <= this.entries.keys[this.entries.size-1]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] != this.entries.states[this.entries.size]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] <= this.entries.states[index]
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] >= this.entries.keys[this.entries.size]
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] != this.entries.keys[this.entries.size-1]
this.entries.keys[index] % this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == 0
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] >= this.entries.keys[index]
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] > this.entries.states[this.entries.size]
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] >= this.entries.states[index]
this.entries.keys[this.entries.size] != this.entries.keys[this.entries.size-1]
this.entries.keys[this.entries.size-1] != this.entries.states[this.entries.size]
this.entries.keys[this.entries.size-1] != this.entries.states[index]
this.entries.keys[index] % this.entries.states[index] == 0
this.entries.states[this.entries.size] <= this.entries.states[index]
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.getEntry(int):::EXIT
this.entries == orig(this.entries)
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[this.entries.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[orig(this.entries.mask)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[orig(this.entries.mask)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[orig(this.entries.count)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[orig(this.virtualSize)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.states[this.entries.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.states[orig(this.entries.mask)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.states[orig(this.entries.mask)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.states[orig(this.entries.count)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.states[orig(this.virtualSize)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.keys[post(this.entries.mask)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.keys[post(this.entries.mask)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.states[post(this.entries.mask)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.states[post(this.entries.mask)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.keys[post(this.entries.count)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.states[post(this.entries.count)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.keys[post(this.virtualSize)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.states[post(this.virtualSize)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[this.virtualSize-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[orig(this.virtualSize)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.entries.states[post(this.virtualSize)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.entries.keys[this.virtualSize-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.entries.keys[orig(this.virtualSize)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(this.entries.keys[post(this.virtualSize)-1])
this.entries.keys == orig(this.entries.keys)
this.entries.keys[] == orig(this.entries.keys[])
this.entries.values == orig(this.entries.values)
this.entries.values[] == orig(this.entries.values[])
this.entries.states == orig(this.entries.states)
this.entries.states[] == orig(this.entries.states[])
this.entries.missingEntries == orig(this.entries.missingEntries)
this.entries.size == orig(this.entries.size)
this.entries.mask == orig(this.entries.mask)
this.entries.mask == orig(size(this.entries.keys[]))-1
this.entries.mask == orig(size(this.entries.values[]))-1
this.entries.mask == orig(size(this.entries.states[]))-1
this.entries.count == orig(this.entries.count)
this.virtualSize == orig(this.virtualSize)
size(this.entries.keys[]) == orig(size(this.entries.values[]))
size(this.entries.keys[]) == orig(size(this.entries.states[]))
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.entries.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED)-1])
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.entries.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER)-1])
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.entries.states[this.entries.count-1]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.entries.states[orig(this.entries.count)-1]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.entries.states[post(this.entries.count)-1])
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.entries.states[this.entries.count-1])
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.entries.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED)-1])
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.entries.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER)-1])
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.entries.states[this.entries.size-1]
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.entries.states[orig(this.entries.size)-1]
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.entries.states[post(this.entries.size)-1])
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.entries.states[this.entries.size-1])
this.entries.keys[this.entries.size-1] == this.entries.keys[this.entries.count-1]
this.entries.keys[this.entries.size-1] == this.entries.keys[orig(this.entries.count)-1]
this.entries.keys[this.entries.size-1] == orig(this.entries.keys[post(this.entries.count)-1])
this.entries.keys[this.entries.size-1] == orig(this.entries.keys[this.entries.count-1])
this.entries has only one value
this.entries.keys has only one value
this.entries.keys[] one of { [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.entries.values has only one value
this.entries.values[] elements one of { -1.0, 0.0, Infinity }
this.entries.values[] one of { [-1.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [-1.0, Infinity, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.entries.states has only one value
this.entries.states[] one of { [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.entries.size one of { 2, 3 }
this.entries.count one of { 3, 4 }
return one of { -1.0, 0.0, Infinity }
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] one of { 1, 2 }
this.entries.keys[this.entries.size-1] one of { 0, 2 }
this.entries.states[orig(index)] one of { 1, 2 }
org.apache.commons.math.linear.OpenMapRealVector.serialVersionUID > this.entries.keys[this.entries.size-1]
org.apache.commons.math.linear.OpenMapRealVector.serialVersionUID > this.entries.keys[orig(index)]
org.apache.commons.math.linear.OpenMapRealVector.serialVersionUID > this.entries.states[orig(index)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE < this.entries.size
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE < this.entries.count
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE < this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= this.entries.keys[this.entries.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= this.entries.keys[orig(index)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE < this.entries.states[orig(index)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL < this.entries.size
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL < this.entries.count
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL <= this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL != this.entries.keys[this.entries.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL <= this.entries.states[orig(index)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED <= this.entries.size
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED < this.entries.count
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= this.entries.keys[this.entries.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= this.entries.keys[orig(index)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= this.entries.states[orig(index)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.entries.keys[this.entries.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.entries.keys[orig(index)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.entries.states[orig(index)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.entries.keys[this.entries.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.entries.keys[orig(index)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.entries.states[orig(index)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.entries.keys[this.entries.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.entries.keys[orig(index)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.entries.states[orig(index)]
this.entries.keys[] elements < this.entries.count
return in this.entries.values[]
this.entries.states[] elements < this.entries.count
orig(index) in this.entries.states[]
this.entries.states[] elements <= this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.entries.keys[this.entries.size] in this.entries.states[]
this.entries.keys[orig(index)] in this.entries.states[]
this.entries.size >= orig(index)
this.entries.size > this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.entries.size > this.entries.keys[this.entries.size-1]
this.entries.size >= this.entries.keys[orig(index)]
this.entries.size > this.entries.states[this.entries.size]
this.entries.size >= this.entries.states[orig(index)]
this.entries.mask > orig(index)
this.entries.mask > this.entries.keys[this.entries.size-1]
this.entries.mask > this.entries.keys[orig(index)]
this.entries.mask > this.entries.states[orig(index)]
this.entries.count >= this.virtualSize
this.entries.count > orig(index)
this.entries.count > this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.entries.count > this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.entries.count > this.entries.keys[this.entries.size]
this.entries.count > this.entries.keys[this.entries.size-1]
this.entries.count > this.entries.keys[orig(index)]
this.entries.count > this.entries.states[this.entries.size]
this.entries.count > this.entries.states[orig(index)]
this.virtualSize > orig(index)
this.virtualSize > this.entries.keys[this.entries.size-1]
this.virtualSize > this.entries.keys[orig(index)]
this.virtualSize > this.entries.states[orig(index)]
orig(index) <= this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
orig(index) >= this.entries.keys[orig(index)]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] != this.entries.keys[this.entries.size]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] <= this.entries.keys[this.entries.size-1]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] != this.entries.states[this.entries.size]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] <= this.entries.states[orig(index)]
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] >= this.entries.keys[this.entries.size]
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] != this.entries.keys[this.entries.size-1]
this.entries.keys[orig(index)] % this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == 0
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] >= this.entries.keys[orig(index)]
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] > this.entries.states[this.entries.size]
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] >= this.entries.states[orig(index)]
this.entries.keys[this.entries.size] != this.entries.keys[this.entries.size-1]
this.entries.keys[this.entries.size-1] != this.entries.states[this.entries.size]
this.entries.keys[this.entries.size-1] != this.entries.states[orig(index)]
this.entries.keys[orig(index)] % this.entries.states[orig(index)] == 0
this.entries.states[this.entries.size] <= this.entries.states[orig(index)]
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.isDefaultValue(double):::ENTER
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[this.entries.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.states[this.entries.count]
value >= -1.0
this.entries.keys[this.entries.size] in this.entries.states[]
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] >= this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] >= this.entries.keys[this.entries.size]
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] >= this.entries.states[this.entries.size]
this.entries.size - this.entries.count + this.entries.keys[this.entries.size] == 0
this.entries.size - this.entries.count + 2 * this.entries.states[this.entries.size] == 0
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.isDefaultValue(double):::EXIT208
org.apache.commons.math.linear.OpenMapRealVector.DEFAULT_ZERO_TOLERANCE == orig(value)
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[this.entries.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[orig(this.entries.size)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.states[this.entries.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.states[orig(this.entries.size)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.keys[post(this.entries.size)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.states[post(this.entries.size)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.keys[this.entries.size])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.states[this.entries.size])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.entries.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.entries.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[this.entries.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[this.entries.count-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[orig(this.entries.size)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[orig(this.entries.count)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.entries.states[post(this.entries.size)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.entries.states[post(this.entries.count)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.entries.states[this.entries.size-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.entries.states[this.entries.count-1])
this.entries.missingEntries == orig(value)
this.entries.size == this.entries.count
this.entries.size == orig(this.entries.count)
orig(this.entries.missingEntries) == orig(value)
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.entries.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL)])
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED-1]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.entries.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED)])
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.entries.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED)-1])
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER-1]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.entries.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER)])
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.entries.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER)-1])
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.entries.states[this.virtualSize-1]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.entries.states[orig(this.virtualSize)-1]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.entries.states[post(this.virtualSize)-1])
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.entries.states[this.virtualSize-1])
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] == this.entries.keys[this.entries.size-1]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] == this.entries.keys[this.entries.count-1]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] == this.entries.keys[orig(this.entries.size)-1]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] == this.entries.keys[orig(this.entries.count)-1]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] == orig(this.entries.keys[post(this.entries.size)-1])
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] == orig(this.entries.keys[post(this.entries.count)-1])
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] == orig(this.entries.keys[this.entries.size-1])
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] == orig(this.entries.keys[this.entries.count-1])
this.entries.keys[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.entries.values[] one of { [-1.0, Infinity, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.entries.states[] elements one of { 0, 1 }
this.entries.states[] one of { [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.entries.size one of { 1, 3 }
return == true
orig(value) == 0.0
orig(value) in this.entries.values[]
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.isDefaultValue(double):::EXIT208;condition="return == true"
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.isDefaultValue(double):::EXIT209
return == false
orig(value) one of { -1.0, Infinity, Double.NaN }
org.apache.commons.math.linear.OpenMapRealVector.DEFAULT_ZERO_TOLERANCE != orig(value)
this.entries.missingEntries != orig(value)
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.isDefaultValue(double):::EXIT209;condition="not(return == true)"
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.isDefaultValue(double):::EXIT
this.entries == orig(this.entries)
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[this.entries.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[orig(this.entries.mask)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[orig(this.entries.mask)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[orig(this.entries.count)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[orig(this.virtualSize)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.states[this.entries.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.states[orig(this.entries.mask)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.states[orig(this.entries.mask)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.states[orig(this.entries.count)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.states[orig(this.virtualSize)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.keys[post(this.entries.mask)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.keys[post(this.entries.mask)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.states[post(this.entries.mask)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.states[post(this.entries.mask)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.keys[post(this.entries.count)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.states[post(this.entries.count)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.keys[post(this.virtualSize)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.states[post(this.virtualSize)])
this.entries.keys == orig(this.entries.keys)
this.entries.keys[] == orig(this.entries.keys[])
this.entries.values == orig(this.entries.values)
this.entries.values[] == orig(this.entries.values[])
this.entries.states == orig(this.entries.states)
this.entries.states[] == orig(this.entries.states[])
this.entries.missingEntries == orig(this.entries.missingEntries)
this.entries.size == orig(this.entries.size)
this.entries.mask == orig(this.entries.mask)
this.entries.mask == orig(size(this.entries.keys[]))-1
this.entries.mask == orig(size(this.entries.values[]))-1
this.entries.mask == orig(size(this.entries.states[]))-1
this.entries.count == orig(this.entries.count)
this.virtualSize == orig(this.virtualSize)
size(this.entries.keys[]) == orig(size(this.entries.values[]))
size(this.entries.keys[]) == orig(size(this.entries.states[]))
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE] == orig(this.entries.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL)-1])
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.entries.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED)-1])
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.entries.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER)-1])
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.entries.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED)-1])
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.entries.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER)-1])
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] == this.entries.keys[orig(this.virtualSize)-1]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] == orig(this.entries.keys[post(this.virtualSize)-1])
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] == orig(this.entries.keys[this.virtualSize-1])
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] == this.entries.states[orig(this.virtualSize)-1]
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] == orig(this.entries.states[post(this.virtualSize)-1])
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] == orig(this.entries.states[this.virtualSize-1])
(value == 0.0)  <==>  (org.apache.commons.math.linear.OpenMapRealVector.DEFAULT_ZERO_TOLERANCE == orig(value))
(value == 0.0)  <==>  (org.apache.commons.math.linear.OpenMapRealVector.DEFAULT_ZERO_TOLERANCE == value)
(value == 0.0)  <==>  (orig(value) == 0.0)
(value == 0.0)  <==>  (return == true)
(value == 0.0)  <==>  (this.entries.missingEntries == orig(value))
(value == 0.0)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[this.entries.size])
(value == 0.0)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.states[this.entries.size])
(value == 0.0)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.entries.states[post(this.entries.count)-1]))
(value == 0.0)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.entries.states[post(this.entries.size)-1]))
(value == 0.0)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.entries.states[this.entries.count-1]))
(value == 0.0)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.entries.states[this.entries.size-1]))
(value == 0.0)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE])
(value == 0.0)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[orig(this.entries.count)-1])
(value == 0.0)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[orig(this.entries.size)-1])
(value == 0.0)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[this.entries.count-1])
(value == 0.0)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[this.entries.size-1])
(value == 0.0)  ==>  (orig(this.entries.keys[post(this.entries.count)-1]) one of { 0, 2 })
(value == 0.0)  ==>  (orig(this.entries.keys[post(this.entries.size)-1]) one of { 0, 2 })
(value == 0.0)  ==>  (orig(this.entries.keys[this.entries.count-1]) one of { 0, 2 })
(value == 0.0)  ==>  (orig(this.entries.keys[this.entries.size-1]) one of { 0, 2 })
(value == 0.0)  ==>  (orig(value) in this.entries.values[])
(value == 0.0)  ==>  (this.entries.count one of { 1, 3 })
(value == 0.0)  ==>  (this.entries.keys[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(value == 0.0)  ==>  (this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL])
(value == 0.0)  ==>  (this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED])
(value == 0.0)  ==>  (this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] == orig(this.entries.keys[post(this.entries.count)-1]))
(value == 0.0)  ==>  (this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] == orig(this.entries.keys[post(this.entries.size)-1]))
(value == 0.0)  ==>  (this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] == orig(this.entries.keys[this.entries.count-1]))
(value == 0.0)  ==>  (this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] == orig(this.entries.keys[this.entries.size-1]))
(value == 0.0)  ==>  (this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] == this.entries.keys[orig(this.entries.count)-1])
(value == 0.0)  ==>  (this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] == this.entries.keys[orig(this.entries.size)-1])
(value == 0.0)  ==>  (this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] == this.entries.keys[this.entries.count-1])
(value == 0.0)  ==>  (this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] == this.entries.keys[this.entries.size-1])
(value == 0.0)  ==>  (this.entries.keys[orig(this.entries.count)-1] one of { 0, 2 })
(value == 0.0)  ==>  (this.entries.keys[orig(this.entries.size)-1] one of { 0, 2 })
(value == 0.0)  ==>  (this.entries.keys[this.entries.count-1] one of { 0, 2 })
(value == 0.0)  ==>  (this.entries.keys[this.entries.size-1] one of { 0, 2 })
(value == 0.0)  ==>  (this.entries.size == this.entries.count)
(value == 0.0)  ==>  (this.entries.size one of { 1, 3 })
(value == 0.0)  ==>  (this.entries.states[] elements one of { 0, 1 })
(value == 0.0)  ==>  (this.entries.states[] one of { [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(value == 0.0)  ==>  (this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] one of { 0, 1 })
(value == 0.0)  ==>  (this.entries.values[] one of { [-1.0, Infinity, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] })
(value == 0.0)  ==>  (value == orig(value))
(value == 0.0)  ==>  (value in this.entries.values[])
(value one of { -1.0, Infinity, Double.NaN })  <==>  (org.apache.commons.math.linear.OpenMapRealVector.DEFAULT_ZERO_TOLERANCE != orig(value))
(value one of { -1.0, Infinity, Double.NaN })  <==>  (org.apache.commons.math.linear.OpenMapRealVector.DEFAULT_ZERO_TOLERANCE != value)
(value one of { -1.0, Infinity, Double.NaN })  <==>  (orig(value) one of { -1.0, Infinity, Double.NaN })
(value one of { -1.0, Infinity, Double.NaN })  <==>  (return == false)
(value one of { -1.0, Infinity, Double.NaN })  <==>  (this.entries.missingEntries != orig(value))
(value one of { -1.0, Infinity, Double.NaN })  <==>  (this.entries.missingEntries != value)
(value one of { -1.0, Infinity, Double.NaN })  ==>  (this.entries.keys[this.entries.size] one of { 0, 2 })
(value one of { -1.0, Infinity, Double.NaN })  ==>  (this.entries.size - this.entries.count + 2 * this.entries.states[this.entries.size] == 0)
(value one of { -1.0, Infinity, Double.NaN })  ==>  (this.entries.size - this.entries.count + this.entries.keys[this.entries.size] == 0)
(value one of { -1.0, Infinity, Double.NaN })  ==>  (this.entries.states[] elements one of { 0, 1, 2 })
(value one of { -1.0, Infinity, Double.NaN })  ==>  (this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE] one of { 0, 1 })
(value one of { -1.0, Infinity, Double.NaN })  ==>  (this.entries.states[this.entries.size] one of { 0, 1 })
this.entries.keys[this.entries.size] in this.entries.states[]
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] >= this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] >= this.entries.keys[this.entries.size]
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] >= this.entries.states[this.entries.size]
this.entries.size - this.entries.count + this.entries.keys[this.entries.size] == 0
this.entries.size - this.entries.count + 2 * this.entries.states[this.entries.size] == 0
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.isDefaultValue(double):::EXIT;condition="return == true"
org.apache.commons.math.linear.OpenMapRealVector.DEFAULT_ZERO_TOLERANCE == orig(value)
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[this.entries.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[orig(this.entries.size)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.states[this.entries.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.states[orig(this.entries.size)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.keys[post(this.entries.size)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.states[post(this.entries.size)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.keys[this.entries.size])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.states[this.entries.size])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.entries.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.entries.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[this.entries.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[this.entries.count-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[orig(this.entries.size)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[orig(this.entries.count)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.entries.states[post(this.entries.size)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.entries.states[post(this.entries.count)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.entries.states[this.entries.size-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.entries.states[this.entries.count-1])
this.entries.missingEntries == orig(value)
this.entries.size == this.entries.count
this.entries.size == orig(this.entries.count)
orig(this.entries.missingEntries) == orig(value)
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.entries.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL)])
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED-1]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.entries.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED)])
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.entries.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED)-1])
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER-1]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.entries.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER)])
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.entries.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER)-1])
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.entries.states[this.virtualSize-1]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.entries.states[orig(this.virtualSize)-1]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.entries.states[post(this.virtualSize)-1])
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.entries.states[this.virtualSize-1])
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] == this.entries.keys[this.entries.size-1]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] == this.entries.keys[this.entries.count-1]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] == this.entries.keys[orig(this.entries.size)-1]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] == this.entries.keys[orig(this.entries.count)-1]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] == orig(this.entries.keys[post(this.entries.size)-1])
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] == orig(this.entries.keys[post(this.entries.count)-1])
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] == orig(this.entries.keys[this.entries.size-1])
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] == orig(this.entries.keys[this.entries.count-1])
this.entries.keys[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.entries.values[] one of { [-1.0, Infinity, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.entries.states[] elements one of { 0, 1 }
this.entries.states[] one of { [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.entries.size one of { 1, 3 }
return == true
orig(value) == 0.0
orig(value) in this.entries.values[]
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.isDefaultValue(double):::EXIT;condition="not(return == true)"
return == false
orig(value) one of { -1.0, Infinity, Double.NaN }
org.apache.commons.math.linear.OpenMapRealVector.DEFAULT_ZERO_TOLERANCE != orig(value)
this.entries.missingEntries != orig(value)
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.isNaN():::ENTER
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[this.entries.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[this.entries.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[this.entries.count-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.states[this.entries.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.states[this.entries.count-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[this.entries.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[this.virtualSize-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.entries.size
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.entries.keys[this.entries.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.entries.keys[this.virtualSize-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.entries.states[this.entries.size-1]
this has only one value
this.entries has only one value
this.entries.keys has only one value
this.entries.keys[] == [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements one of { 0, 2 }
this.entries.values has only one value
this.entries.values[] == [-1.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.entries.values[] elements one of { -1.0, 0.0 }
this.entries.states has only one value
this.entries.states[] == [1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.count == 4
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.isNaN():::EXIT592
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.isNaN():::EXIT592;condition="not(return == true)"
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.isNaN():::EXIT
this.entries == orig(this.entries)
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[this.entries.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[this.entries.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[this.entries.count-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[orig(this.entries.size)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[orig(this.entries.mask)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[orig(this.entries.mask)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[orig(this.entries.count)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[orig(this.entries.count)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[orig(this.virtualSize)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.states[this.entries.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.states[this.entries.count-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.states[orig(this.entries.mask)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.states[orig(this.entries.mask)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.states[orig(this.entries.count)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.states[orig(this.entries.count)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.states[orig(this.virtualSize)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.keys[post(this.entries.size)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.keys[post(this.entries.mask)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.keys[post(this.entries.mask)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.states[post(this.entries.mask)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.states[post(this.entries.mask)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.keys[post(this.entries.count)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.keys[post(this.entries.count)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.states[post(this.entries.count)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.states[post(this.entries.count)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.keys[post(this.virtualSize)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.states[post(this.virtualSize)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[this.entries.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[this.virtualSize-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[orig(this.entries.size)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[orig(this.virtualSize)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.entries.states[post(this.entries.size)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.entries.states[post(this.virtualSize)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.entries.size
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.entries.keys[this.entries.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.entries.keys[this.virtualSize-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.entries.keys[orig(this.entries.size)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.entries.keys[orig(this.virtualSize)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.entries.states[this.entries.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.entries.states[orig(this.entries.size)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(this.entries.keys[post(this.entries.size)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(this.entries.states[post(this.entries.size)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(this.entries.keys[post(this.virtualSize)-1])
this.entries.keys == orig(this.entries.keys)
this.entries.keys[] == orig(this.entries.keys[])
this.entries.values == orig(this.entries.values)
this.entries.values[] == orig(this.entries.values[])
this.entries.states == orig(this.entries.states)
this.entries.states[] == orig(this.entries.states[])
this.entries.missingEntries == orig(this.entries.missingEntries)
this.entries.mask == orig(this.entries.mask)
this.entries.mask == orig(size(this.entries.keys[]))-1
this.entries.mask == orig(size(this.entries.values[]))-1
this.entries.mask == orig(size(this.entries.states[]))-1
this.entries.count == orig(this.entries.count)
this.virtualSize == orig(this.virtualSize)
size(this.entries.keys[]) == orig(size(this.entries.values[]))
size(this.entries.keys[]) == orig(size(this.entries.states[]))
this.entries has only one value
this.entries.keys has only one value
this.entries.keys[] == [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.keys[] elements one of { 0, 2 }
this.entries.values has only one value
this.entries.values[] == [-1.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.entries.values[] elements one of { -1.0, 0.0 }
this.entries.states has only one value
this.entries.states[] == [1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.entries.count == 4
return == false
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.isNaN():::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.setEntry(int, double):::ENTER
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[this.entries.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.states[this.entries.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[this.virtualSize-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[index]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.entries.keys[this.virtualSize-1]
index == this.entries.keys[index]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.entries.states[this.entries.count-1]
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.entries.states[this.entries.size-1]
this.entries.keys[this.entries.size-1] == this.entries.keys[this.entries.count-1]
this has only one value
this.entries has only one value
this.entries.keys has only one value
this.entries.keys[] one of { [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.entries.values has only one value
this.entries.values[] elements one of { -1.0, 0.0, Infinity }
this.entries.values[] one of { [-1.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [-1.0, Infinity, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.entries.states has only one value
this.entries.states[] one of { [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.entries.size one of { 2, 3 }
this.entries.count one of { 3, 4 }
index one of { 0, 1, 2 }
value one of { -1.0, 0.0 }
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] one of { 1, 2 }
this.entries.keys[this.entries.size-1] one of { 0, 2 }
value in this.entries.values[]
index in this.entries.states[]
this.entries.keys[this.entries.size] in this.entries.states[]
===========================================================================
org.apache.commons.math.linear.OpenMapRealVector.setEntry(int, double):::EXIT
this.entries == orig(this.entries)
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[this.entries.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[orig(this.entries.mask)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[orig(this.entries.mask)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[orig(this.entries.count)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.keys[orig(this.virtualSize)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.states[this.entries.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.states[orig(this.entries.mask)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.states[orig(this.entries.mask)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.states[orig(this.entries.count)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.entries.states[orig(this.virtualSize)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.keys[post(this.entries.mask)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.keys[post(this.entries.mask)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.states[post(this.entries.mask)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.states[post(this.entries.mask)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.keys[post(this.entries.count)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.states[post(this.entries.count)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.keys[post(this.virtualSize)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.entries.states[post(this.virtualSize)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[this.virtualSize-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.entries.states[orig(this.virtualSize)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.entries.states[post(this.virtualSize)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.entries.states[post(index)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.entries.keys[this.virtualSize-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.entries.keys[orig(this.virtualSize)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(this.entries.keys[post(this.virtualSize)-1])
this.entries.keys == orig(this.entries.keys)
this.entries.values == orig(this.entries.values)
this.entries.states == orig(this.entries.states)
this.entries.missingEntries == orig(this.entries.missingEntries)
this.entries.mask == orig(this.entries.mask)
this.entries.mask == orig(size(this.entries.keys[]))-1
this.entries.mask == orig(size(this.entries.values[]))-1
this.entries.mask == orig(size(this.entries.states[]))-1
this.virtualSize == orig(this.virtualSize)
orig(index) == orig(this.entries.keys[post(index)])
size(this.entries.keys[]) == orig(size(this.entries.keys[]))
size(this.entries.keys[]) == orig(size(this.entries.values[]))
size(this.entries.keys[]) == orig(size(this.entries.states[]))
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.entries.states[this.entries.count-1]
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.entries.states[post(this.entries.count)-1])
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.entries.states[this.entries.size-1]
orig(this.entries.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL)]) == this.entries.states[orig(this.entries.count)-1]
orig(this.entries.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL)]) == this.entries.states[orig(this.entries.size)-1]
orig(this.entries.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL)]) == orig(this.entries.states[post(this.entries.size)-1])
this.entries.keys[this.entries.size] == orig(this.entries.keys[post(this.entries.size)])
this.entries.keys[this.entries.size-1] == this.entries.keys[this.entries.count-1]
this.entries.keys[this.entries.size-1] == orig(this.entries.keys[post(this.entries.count)-1])
this.entries.keys[orig(this.entries.size)] == this.entries.keys[orig(index)]
this.entries.keys[orig(this.entries.size)-1] == this.entries.keys[orig(this.entries.count)-1]
this.entries.keys[orig(this.entries.size)-1] == orig(this.entries.keys[this.entries.size-1])
this.entries.keys[orig(this.entries.size)-1] == orig(this.entries.keys[this.entries.count-1])
this.entries.keys[orig(index)] == orig(this.entries.keys[this.entries.size])
this.entries.states[this.entries.size] == orig(this.entries.states[post(this.entries.size)])
this.entries.states[orig(this.entries.size)] == orig(this.entries.states[this.entries.size])
this.entries has only one value
this.entries.keys has only one value
this.entries.keys[] one of { [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.entries.values has only one value
this.entries.values[] elements one of { -1.0, 0.0, Infinity }
this.entries.values[] one of { [-1.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [-1.0, Infinity, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.entries.states has only one value
this.entries.states[] one of { [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.entries.size one of { 2, 3 }
this.entries.count one of { 3, 4 }
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] one of { 1, 2 }
this.entries.keys[this.entries.size-1] one of { 0, 2 }
this.entries.keys[orig(this.entries.size)-1] one of { 0, 2 }
this.entries.keys[orig(index)] one of { 0, 2 }
this.entries.states[orig(this.entries.size)] one of { 0, 1 }
this.entries.states[orig(index)] one of { 1, 2 }
orig(value) in this.entries.values[]
orig(index) in this.entries.states[]
this.entries.keys[this.entries.size] in this.entries.states[]
this.entries.keys[orig(index)] in this.entries.states[]
this.entries.missingEntries in orig(this.entries.values[])
this.entries.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] in orig(this.entries.keys[])
this.entries.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] in orig(this.entries.keys[])
this.entries.keys[orig(index)] in orig(this.entries.states[])
===========================================================================
org.apache.commons.math.linear.RealVector$Entry:::OBJECT
this.getClass().getName() == org.apache.commons.math.linear.AbstractRealVector$EntryImpl.class
this.index one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.linear.RealVector$Entry.RealVector$Entry():::EXIT
this.index == 0
===========================================================================
org.apache.commons.math.linear.RealVector$Entry.getIndex():::ENTER
this has only one value
===========================================================================
org.apache.commons.math.linear.RealVector$Entry.getIndex():::EXIT
this.index == return
return == orig(this.index)
return one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.linear.RealVector$Entry.setIndex(int):::ENTER
this.index one of { 0, 1 }
index one of { 0, 1, 2 }
this.index <= index
===========================================================================
org.apache.commons.math.linear.RealVector$Entry.setIndex(int):::EXIT
this.index == orig(index)
this.index >= orig(this.index)
===========================================================================
org.apache.commons.math.linear.RealVectorFormat:::CLASS
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == "{"
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == "}"
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR has only one value
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == "; "
===========================================================================
org.apache.commons.math.linear.RealVectorFormat:::OBJECT
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == this.prefix
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == this.trimmedPrefix
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == this.suffix
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == this.trimmedSuffix
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == this.separator
this has only one value
this.trimmedSeparator has only one value
this.trimmedSeparator.toString == ";"
this.format has only one value
this.format.getClass().getName() == java.text.DecimalFormat.class
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == this.prefix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == this.trimmedPrefix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == this.suffix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == this.trimmedSuffix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == this.separator.toString
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.RealVectorFormat(java.lang.String, java.lang.String, java.lang.String, java.text.NumberFormat):::ENTER
prefix has only one value
prefix.toString == "{"
suffix has only one value
suffix.toString == "}"
separator has only one value
separator.toString == "; "
format has only one value
format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.RealVectorFormat(java.lang.String, java.lang.String, java.lang.String, java.text.NumberFormat):::EXIT
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(prefix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(suffix)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(separator)
this.format == orig(format)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == prefix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(prefix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == suffix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(suffix.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == separator.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(separator.toString)
this.format.getClass().getName() == orig(format.getClass().getName())
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.RealVectorFormat(java.text.NumberFormat):::ENTER
format has only one value
format.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.RealVectorFormat(java.text.NumberFormat):::EXIT
this.format == orig(format)
this.format.getClass().getName() == orig(format.getClass().getName())
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.getInstance():::ENTER
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.getInstance():::EXIT
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == return.prefix
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == return.trimmedPrefix
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == return.suffix
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == return.trimmedSuffix
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == return.separator
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
return has only one value
return.trimmedSeparator has only one value
return.trimmedSeparator.toString == ";"
return.format has only one value
return.format.getClass().getName() == java.text.DecimalFormat.class
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == return.prefix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == return.trimmedPrefix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == return.suffix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == return.trimmedSuffix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == return.separator.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.getInstance(java.util.Locale):::ENTER
locale has only one value
===========================================================================
org.apache.commons.math.linear.RealVectorFormat.getInstance(java.util.Locale):::EXIT
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == return.prefix
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == return.trimmedPrefix
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == return.suffix
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == return.trimmedSuffix
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == return.separator
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR)
return has only one value
return.trimmedSeparator has only one value
return.trimmedSeparator.toString == ";"
return.format has only one value
return.format.getClass().getName() == java.text.DecimalFormat.class
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == return.prefix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == return.trimmedPrefix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_PREFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == return.suffix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == return.trimmedSuffix.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SUFFIX.toString)
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == return.separator.toString
org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString == orig(org.apache.commons.math.linear.RealVectorFormat.DEFAULT_SEPARATOR.toString)
===========================================================================
org.apache.commons.math.util.CompositeFormat:::CLASS
===========================================================================
org.apache.commons.math.util.CompositeFormat:::OBJECT
this has only one value
this.getClass().getName() == org.apache.commons.math.linear.RealVectorFormat.class
===========================================================================
org.apache.commons.math.util.CompositeFormat.CompositeFormat():::EXIT
===========================================================================
org.apache.commons.math.util.CompositeFormat.getDefaultNumberFormat(java.util.Locale):::ENTER
locale has only one value
===========================================================================
org.apache.commons.math.util.CompositeFormat.getDefaultNumberFormat(java.util.Locale):::EXIT
return has only one value
return.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.math.util.FastMath:::CLASS
size(org.apache.commons.math.util.FastMath.EXP_INT_TABLE_A[]) == size(org.apache.commons.math.util.FastMath.EXP_INT_TABLE_B[])
size(org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A[]) == size(org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B[])
size(org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A[])-1 == size(org.apache.commons.math.util.FastMath.LN_MANT[])
size(org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B[])-1 == size(org.apache.commons.math.util.FastMath.LN_MANT[])
size(org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[])-1 == size(org.apache.commons.math.util.FastMath.CBRTTWO[])
size(org.apache.commons.math.util.FastMath.SINE_TABLE_A[]) == size(org.apache.commons.math.util.FastMath.SINE_TABLE_B[])
size(org.apache.commons.math.util.FastMath.SINE_TABLE_A[]) == size(org.apache.commons.math.util.FastMath.COSINE_TABLE_A[])
size(org.apache.commons.math.util.FastMath.SINE_TABLE_A[]) == size(org.apache.commons.math.util.FastMath.COSINE_TABLE_B[])
size(org.apache.commons.math.util.FastMath.SINE_TABLE_A[]) == size(org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[])
size(org.apache.commons.math.util.FastMath.SINE_TABLE_A[]) == size(org.apache.commons.math.util.FastMath.TANGENT_TABLE_B[])
size(org.apache.commons.math.util.FastMath.SINE_TABLE_A[]) == size(org.apache.commons.math.util.FastMath.EIGHTHS[])
org.apache.commons.math.util.FastMath.EXP_INT_TABLE_A has only one value
org.apache.commons.math.util.FastMath.EXP_INT_TABLE_A != null
org.apache.commons.math.util.FastMath.EXP_INT_TABLE_A[] == [0.0, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, 1.2167805029837174E-308, 3.3075521868828313E-308, 8.990857970395621E-308, 2.4439687587233822E-307, 6.643395882648707E-307, 1.8058622161045723E-306, 4.9088424014213747E-306, 1.3343617454502158E-305, 3.627171339297796E-305, 9.85967383699639E-305, 2.6801370985204392E-304, 7.28536898679489E-304, 1.9803682319077584E-303, 5.38319906347152E-303, 1.4633053600671807E-302, 3.977676646435913E-302, 1.0812446030444847E-301, 2.939127650618008E-301, 7.98937689724226E-301, 2.1717379480892404E-300, 5.903395787742608E-300, 1.604709311092153E-299, 4.362052165594205E-299, 1.185728743723136E-298, 3.2231448429288104E-298, 8.761416875971053E-298, 2.381599802731576E-297, 6.473858694159917E-297, 1.759777336228351E-296, 4.783570417096031E-296, 1.3003094334993007E-295, 3.534607164701588E-295, 9.608059077597622E-295, 2.6117412228248372E-294, 7.099448337588206E-294, 1.9298302842662427E-293, 5.245821939555241E-293, 1.4259623018916075E-292, 3.876167717314469E-292, 1.0536516985754265E-291, 2.8641222905888498E-291, 7.785490405631261E-291, 2.1163159773720786E-290, 5.75274240174951E-290, 1.5637577451850772E-289, 4.250733445817507E-289, 1.1554692127586184E-288, 3.140891161257984E-288, 8.5378261069256E-288, 2.3208222636207967E-287, 6.308648512533194E-287, 1.7148684108889926E-286, 4.66149619062905E-286, 1.267125825607545E-285, 3.444405430213309E-285, 9.362865310780478E-285, 2.545090514372956E-284, 6.918273738653438E-284, 1.880581526522529E-283, 5.111951235406449E-283, 1.3895722584371194E-282, 3.777249245836446E-282, 1.0267626869996089E-281, 2.7910305166341746E-281, 7.586807435195049E-281, 2.0623081633377528E-280, 5.605935120827543E-280, 1.5238509895759234E-279, 4.1422570347941866E-279, 1.1259821528956178E-278, 3.0607365484896234E-278, 8.319945744708957E-278, 2.261595265545863E-277, 6.14765410391874E-277, 1.6711055710481364E-276, 4.542535785228377E-276, 1.2347893057111349E-275, 3.3565050589164644E-275, 9.123927693524748E-275, 2.4801408412869443E-274, 6.741721181275849E-274, 1.8325896108266845E-273, 4.981495581178641E-273, 1.3541108538848092E-272, 3.680854796253164E-272, 1.000560009601417E-271, 2.7198045682453823E-271, 7.393195003037623E-271, 2.009678671388106E-270, 5.462872902061832E-270, 1.4849630026749137E-269, 4.0365474867398226E-269, 1.0972473982620675E-268, 2.9826276418095124E-268, 8.107621843190186E-268, 2.2038801898244713E-267, 5.9907683123564475E-267, 1.6284595037367037E-266, 4.426611576827894E-266, 1.2032779421045284E-265, 3.270848263913335E-265, 8.891089104978428E-265, 2.416848319923489E-264, 6.569674292366891E-264, 1.7858227643808902E-263, 4.8543693883922315E-263, 1.3195545267171852E-262, 3.586920341436167E-262, 9.750262886361828E-262, 2.6503959694415867E-261, 7.204522234629373E-261, 1.9583924584188327E-260, 5.323462638074879E-260, 1.4470670407975192E-259, 3.9335361253367884E-259, 1.069245980801078E-258, 2.906512363599856E-258, 7.900718878136838E-258, 2.1476380684104416E-257, 5.83788534603778E-257, 1.5869019308078216E-256, 4.313646314646532E-256, 1.1725707800102494E-255, 3.1873775733239677E-255, 8.66419031068439E-255, 2.355171282369874E-254, 6.402019487796617E-254, 1.7402490102108595E-253, 4.7304874137514055E-253, 1.2858797245496167E-252, 3.495383752330267E-252, 9.50143765929554E-252, 2.5827585295053106E-251, 7.020666913162525E-251, 1.9084146365185208E-250, 5.1876094170808204E-250, 1.4101384307766564E-249, 3.8331534455690015E-249, 1.0419592227867778E-248, 2.832338692657382E-248, 7.699095362427942E-248, 2.092831368651299E-247, 5.6889043253466734E-247, 1.5464047110032809E-246, 4.2035635675057845E-246, 1.1426471694990267E-245, 3.1060367307778176E-245, 8.443083250962491E-245, 2.29506828149239E-244, 6.238640993684865E-244, 1.6958386444625573E-243, 4.609766923196901E-243, 1.253064715819996E-242, 3.406182648529049E-242, 9.258966193498102E-242, 2.5168476965873452E-241, 6.841501428886862E-241, 1.8597126658063852E-240, 5.055223814854344E-240, 1.3741521262694901E-239, 3.735332950916109E-239, 1.015368702664668E-238, 2.760058712136955E-238, 7.502617023002387E-238, 2.0394227588304364E-237, 5.54372534689234E-237, 1.5069410524896284E-236, 4.096289686374191E-236, 1.1134870169729551E-235, 3.026771717901537E-235, 8.227618664032444E-235, 2.23649845844128E-234, 6.079433751689124E-234, 1.652561270063248E-233, 4.492128009246574E-233, 1.22108683506305E-232, 3.319258562318531E-232, 9.022679738564393E-232, 2.4526187392994012E-231, 6.666908645667144E-231, 1.8122534633418563E-230, 4.926215857666225E-230, 1.3390843218051693E-229, 3.6400085945820765E-229, 9.894568480852115E-229, 2.6896230693031475E-228, 7.311152972655001E-228, 1.9873774537162546E-227, 5.402251858830831E-227, 1.4684842958071072E-226, 3.991753803536123E-226, 1.0850712518934751E-225, 2.9495295563441654E-225, 8.01765213669988E-225, 2.1794240059294766E-224, 5.92428831948099E-224, 1.6103886018455119E-223, 4.377490448390633E-223, 1.1899252505729762E-222, 3.2345517394636206E-222, 8.792423902623377E-222, 2.3900283818923104E-221, 6.496771801385463E-221, 1.7660053446314018E-220, 4.80050059154895E-220, 1.304911452824217E-219, 3.54711667730913E-219, 9.64206435908545E-219, 2.6209844871763636E-218, 7.124574366530717E-218, 1.9366601417010147E-217, 5.264388476949737E-217, 1.431009021985696E-216, 3.889885799962507E-216, 1.057380684430436E-215, 2.8742587656021775E-215, 7.813044552050569E-215, 2.1238058974550874E-214, 5.773102661099307E-214, 1.5692921723471877E-213, 4.2657777816050375E-213, 1.1595585743839232E-212, 3.1520070828798975E-212, 8.568043768122183E-212, 2.329035966595791E-211, 6.33097561889469E-211, 1.720937714565362E-210, 4.677993239821998E-210, 1.2716105485691878E-209, 3.456595573934475E-209, 9.396000024637834E-209, 2.55409795397022E-208, 6.942757623821567E-208, 1.887237361505784E-207, 5.13004286606108E-207, 1.3944901709366118E-206, 3.7906173667738715E-206, 1.0303966192973381E-205, 2.8009086220877197E-205, 7.613657850210907E-205, 2.0696069842597556E-204, 5.6257755605305175E-204, 1.5292444435954893E-203, 4.156916476922876E-203, 1.12996721591364E-202, 3.071569248856111E-202, 8.349390727162016E-202, 2.2695999828608633E-201, 6.1694117899971836E-201, 1.677020107827128E-200, 4.558612479525779E-200, 1.2391595516612638E-199, 3.3683846288580648E-199, 9.156218120779494E-199, 2.4889182184335247E-198, 6.765580431441772E-198, 1.839075686473352E-197, 4.999126524757713E-197, 1.3589033107846643E-196, 3.6938826366068014E-196, 1.0041012794280992E-195, 2.7294301888986675E-195, 7.419361045185406E-195, 2.016791373353671E-194, 5.482208065983983E-194, 1.490218341008089E-193, 4.050833763855709E-193, 1.101130773265179E-192, 2.993183789477209E-192, 8.136316299122392E-192, 2.2116799789922265E-191, 6.011969568315371E-191, 1.6342228966392253E-190, 4.4422779589171113E-190, 1.2075364784547675E-189, 3.282424571107068E-189, 8.92255448602772E-189, 2.425402115319395E-188, 6.592926904915355E-188, 1.79214305133496E-187, 4.871550528055661E-187, 1.3242245776666673E-186, 3.599615946028287E-186, 9.78476998200719E-186, 2.659776075359514E-185, 7.230020851688713E-185, 1.9653234116333892E-184, 5.34230278107224E-184, 1.4521887058451231E-183, 3.947457923821984E-183, 1.0730302255093144E-182, 2.9167986204137332E-182, 7.928680793406766E-182, 2.1552386987482013E-181, 5.858546779607288E-181, 1.5925182066949723E-180, 4.328913614497258E-180, 1.1767205227552116E-179, 3.198658219194836E-179, 8.694853785564504E-179, 2.363506255864984E-178, 6.42467573615509E-178, 1.746408207555959E-177, 4.747229597770176E-177, 1.2904307529671472E-176, 3.507754341050756E-176, 9.535066345267336E-176, 2.591899541396432E-175, 7.045512786902009E-175, 1.9151693415969248E-174, 5.205969622575851E-174, 1.4151292367806538E-173, 3.846720258072078E-173, 1.045647032279984E-172, 2.8423629805010285E-172, 7.726344058192276E-172, 2.1002377128928765E-171, 5.709039546124285E-171, 1.5518778128928824E-170, 4.218440703602533E-170, 1.1466910691560932E-169, 3.1170298734336303E-169, 8.472965161251656E-169, 2.303190374523956E-168, 6.260720440258473E-168, 1.701840523821621E-167, 4.62608152166211E-167, 1.2574995962791943E-166, 3.418237608335161E-166, 9.29173407843235E-166, 2.5257552661512635E-165, 6.865714679174435E-165, 1.866294830116931E-164, 5.073114566291778E-164, 1.3790154522394582E-163, 3.7485528226129495E-163, 1.0189624503698769E-162, 2.7698267293941856E-162, 7.529170882336924E-162, 2.0466404088178596E-161, 5.56334611651382E-161, 1.512274346576166E-160, 4.110787043867721E-160, 1.1174279267498045E-159, 3.0374839443564585E-159, 8.25673801176584E-159, 2.244414150254963E-158, 6.1009492034592176E-158, 1.6584100275603453E-157, 4.50802633729044E-157, 1.2254085656601853E-156, 3.3310057014599044E-156, 9.054612259832416E-156, 2.4612985502035675E-155, 6.690503835950083E-155, 1.8186679660152888E-154, 4.9436516047443576E-154, 1.3438240331106108E-153, 3.652892398145774E-153, 9.92958982547828E-153, 2.6991427376823027E-152, 7.3370297995122135E-152, 1.994411660450821E-151, 5.421372463189529E-151, 1.4736818914204564E-150, 4.005882964287806E-150, 1.088911919926534E-149, 2.9599693109692324E-149, 8.046030012041041E-149, 2.18713790898745E-148, 5.945256705384597E-148, 1.6160884846515524E-147, 4.392983574030969E-147, 1.1941366764543551E-146, 3.2460001983475855E-146, 8.8235440586675E-146, 2.3984878190403553E-145, 6.519765758635405E-145, 1.772256261139753E-144, 4.817491674217065E-144, 1.3095299991573769E-143, 3.559671483107555E-143, 9.676190774054103E-143, 2.630261301303634E-142, 7.149792225695347E-142, 1.943514969662872E-141, 5.283020542151163E-141, 1.4360739330834996E-140, 3.9036541111764032E-140, 1.0611230602364477E-139, 2.8844319473099593E-139, 7.84069876400596E-139, 2.1313228444765414E-138, 5.793536445518422E-138, 1.5748463788034308E-137, 4.2808762411845363E-137, 1.1636629220608724E-136, 3.163163464591171E-136, 8.598369704466743E-136, 2.337279322276433E-135, 6.353384093665193E-135, 1.7270287031459572E-134, 4.694550492773212E-134, 1.2761111606368036E-133, 3.4688299108856403E-133, 9.429257929713919E-133, 2.5631381141873417E-132, 6.967331001069377E-132, 1.8939170679975288E-131, 5.148199748336684E-131, 1.3994258162094293E-130, 3.804034213613942E-130, 1.0340436948077763E-129, 2.8108219632627907E-129, 7.640606938467665E-129, 2.0769322678328357E-128, 5.645687086879944E-128, 1.5346568127351796E-127, 4.171630237420918E-127, 1.1339665711932977E-126, 3.0824406750909563E-126, 8.37894218404787E-126, 2.2776327994966818E-125, 6.191247522703296E-125, 1.6829556040859853E-124, 4.5747479502862494E-124, 1.2435453481209945E-123, 3.3803067202247166E-123, 9.188625696750548E-123, 2.4977273040076145E-122, 6.789527378582775E-122, 1.845584943222965E-121, 5.016820182185716E-121, 1.3637129731022491E-120, 3.706956710275979E-120, 1.0076552294433743E-119, 2.739090595934893E-119, 7.445620503219039E-119, 2.023929422267303E-118, 5.501611507503037E-118, 1.4954928881576769E-117, 4.0651709187617596E-117, 1.1050280679513555E-116, 3.003777734030334E-116, 8.165114384910189E-116, 2.219508285637377E-115, 6.033249389304709E-115, 1.6400070480930697E-114, 4.458001565878111E-114, 1.2118105325725891E-113, 3.2940421731384895E-113, 8.954135150208654E-113, 2.433986351722258E-112, 6.616260705434716E-112, 1.7984863104885375E-111, 4.888792154132158E-111, 1.3289115531074511E-110, 3.612356038181234E-110, 9.819402293160495E-110, 2.6691899766673256E-109, 7.255611264437603E-109, 1.9722796756250217E-108, 5.361211684173837E-108, 1.4573285967670963E-107, 3.961429477016909E-107, 1.0768281419102595E-106, 2.9271223293841774E-106, 7.956744351476403E-106, 2.1628672925745152E-105, 5.879282834821692E-105, 1.5981547034872092E-104, 4.344234755347641E-104, 1.1808855501885005E-103, 3.2099795870407646E-103, 8.725629524586503E-103, 2.3718718327094683E-102, 6.44741641521183E-102, 1.7525895549820557E-101, 4.7640323331013947E-101, 1.2949980563724296E-100, 3.5201699899499525E-100, 9.56881327374431E-100, 2.6010732940533088E-99, 7.070450309820548E-99, 1.9219478787856753E-98, 5.2243955659975294E-98, 1.4201378353978042E-97, 3.8603349913851996E-97, 1.0493479260117497E-96, 2.8524232604238555E-96, 7.753690709912764E-96, 2.1076716069929933E-95, 5.72924572981599E-95, 1.5573703263204683E-94, 4.233371554108682E-94, 1.1507496472539512E-93, 3.1280620563875923E-93, 8.5029538631631E-93, 2.3113425190436427E-92, 6.28287989314225E-92, 1.7078641226055994E-91, 4.6424556110307644E-91, 1.261950308999819E-90, 3.430336362898836E-90, 9.324622137237299E-90, 2.5346947846365435E-89, 6.890014851450124E-89, 1.8729003560057785E-88, 5.091070300111434E-88, 1.3838964592430477E-87, 3.761820584522275E-87, 1.0225689628581036E-86, 2.7796303536272215E-86, 7.555818934379333E-86, 2.053884626293416E-85, 5.583037134407759E-85, 1.5176268538776042E-84, 4.125337057189083E-84, 1.121383042095528E-83, 3.0482348236054953E-83, 8.285962249116636E-83, 2.2523580600947705E-82, 6.122543452787843E-82, 1.664279766968299E-81, 4.523982262003404E-81, 1.2297456769063303E-80, 3.342795345742034E-80, 9.086660081726823E-80, 2.4700104681773258E-79, 6.714184569587689E-79, 1.8251046352720517E-78, 4.961148056969105E-78, 1.3485799924445315E-77, 3.665820371396835E-77, 9.964732578705785E-77, 2.708695208461993E-76, 7.362996533913695E-76, 2.0014700145557332E-75, 5.440559532453721E-75, 1.4788974793889734E-74, 4.020060558571273E-74, 1.092765612182012E-73, 2.970445258959489E-73, 8.074507236705857E-73, 2.1948784599535102E-72, 5.966298125808066E-72, 1.6218081151910012E-71, 4.408531734441582E-71, 1.198363039426718E-70, 3.257488853378793E-70, 8.854771398921902E-70, 2.406976727302894E-69, 6.542840888268955E-69, 1.778528517418201E-68, 4.834541417183388E-68, 1.3141647465063647E-67, 3.572270133517001E-67, 9.710435805122717E-67, 2.63957027915428E-66, 7.175096392165733E-66, 1.9503931430716318E-65, 5.3017188565638215E-65, 1.4411566290936352E-64, 3.9174693825966044E-64, 1.0648786018364265E-63, 2.8946401383311E-63, 7.868447965383903E-63, 2.1388659707647114E-62, 5.814040618670345E-62, 1.5804200403673568E-61, 4.296027044486766E-61, 1.1677812418806031E-60, 3.174358801839755E-60, 8.62880163941313E-60, 2.345551464945955E-59, 6.3758692300917355E-59, 1.733140900346534E-58, 4.711165925070571E-58, 1.2806275683797178E-57, 3.481106736845E-57, 9.462629520363307E-57, 2.5722094667974783E-56, 6.9919903587080315E-56, 1.9006201022568844E-55, 5.166420404109835E-55, 1.4043786616805493E-54, 3.8174968984748894E-54, 1.03770335512154E-53, 2.820769858672565E-53, 7.667647949477605E-53, 2.0842827711783212E-52, 5.6656680900216754E-52, 1.5400881501571645E-51, 4.1863938339341257E-51, 1.1379799629071911E-50, 3.093350150840571E-50, 8.408597060399334E-50, 2.2856938448387544E-49, 6.2131591878042886E-49, 1.688911928929718E-48, 4.5909386437919143E-48, 1.2479464696643861E-47, 3.3922703599272275E-47, 9.221146830884422E-47, 2.5065676066043174E-46, 6.8135571305481364E-46, 1.8521166948363666E-45, 5.0345752964740226E-45, 1.368539456379101E-44, 3.720075801577098E-44, 1.0112214979786464E-43, 2.7487849807248755E-43, 7.47197247068667E-43, 2.0310928323153876E-42, 5.521082422279256E-42, 1.5007857288519654E-41, 4.0795586181406803E-41, 1.108938997126179E-40, 3.0144088843073416E-40, 8.194012195477669E-40, 2.2273635587196807E-39, 6.054601485195952E-39, 1.6458113136245473E-38, 4.473779311490168E-38, 1.2160992719555806E-37, 3.3057007442449645E-37, 8.985825281444118E-37, 2.442600707513088E-36, 6.639677673630215E-36, 1.8048513285848406E-35, 4.906094420881007E-35, 1.3336148713971936E-34, 3.625141007634431E-34, 9.854154449263851E-34, 2.6786368134431636E-33, 7.28128971953363E-33, 1.9792597720953414E-32, 5.380185921962174E-32, 1.4624861244004054E-31, 3.975449484028966E-31, 1.080639291795678E-30, 2.9374821418009058E-30, 7.984904044796711E-30, 2.1705221445447534E-29, 5.900089995748943E-29, 1.6038109389511792E-28, 4.359610133382778E-28, 1.185064946717304E-27, 3.221340469489223E-27, 8.756510122348782E-27, 2.380266370880709E-26, 6.47023467943241E-26, 1.75879225876483E-25, 4.780892502168074E-25, 1.2995814853898995E-24, 3.5326287852455166E-24, 9.602680736954162E-24, 2.6102792042257208E-23, 7.095474414148981E-23, 1.9287497671359936E-22, 5.242885191553114E-22, 1.4251641388208515E-21, 3.873997809109103E-21, 1.0530616658562386E-20, 2.862518609581133E-20, 7.78113163345177E-20, 2.1151310700892382E-19, 5.74952254077566E-19, 1.5628822871880503E-18, 4.24835413113866E-18, 1.1548223864099742E-17, 3.139132557537509E-17, 8.533046968331264E-17, 2.3195229636950566E-16, 6.305116324200775E-16, 1.71390848833098E-15, 4.6588861918718874E-15, 1.2664165777252073E-14, 3.442477422913037E-14, 9.357622912219837E-14, 2.5436656904062604E-13, 6.914399608426436E-13, 1.879528650772233E-12, 5.1090893668503945E-12, 1.3887944613766301E-11, 3.775134371775124E-11, 1.0261880234452292E-10, 2.789468100949932E-10, 7.582560135332983E-10, 2.061153470123145E-9, 5.602796449011294E-9, 1.5229979055675358E-8, 4.139937459513021E-8, 1.1253517584464134E-7, 3.059023470086686E-7, 8.315287232107949E-7, 2.260329438286135E-6, 6.1442124206223525E-6, 1.670170240686275E-5, 4.539993096841499E-5, 1.2340981629677117E-4, 3.35462624207139E-4, 9.118819143623114E-4, 0.0024787522852420807, 0.006737947463989258, 0.018315639346837997, 0.049787066876888275, 0.1353352963924408, 0.3678794503211975, 1.0, 2.7182817459106445, 7.389056205749512, 20.08553695678711, 54.59815216064453, 148.41314697265625, 403.42877197265625, 1096.633056640625, 2980.9580078125, 8103.083984375, 22026.46484375, 59874.140625, 162754.78125, 442413.375, 1202604.25, 3269017.5, 8886110.0, 2.4154952E7, 6.5659968E7, 1.78482304E8, 4.85165184E8, 1.318815744E9, 3.584912896E9, 9.74480384E9, 2.6489122816E10, 7.200489472E10, 1.95729620992E11, 5.32048248832E11, 1.446257098752E12, 3.9313342464E12, 1.0686474223616E13, 2.904884772864E13, 7.8962956959744E13, 2.14643574308864E14, 5.83461777702912E14, 1.586013579247616E15, 4.31123180027904E15, 1.1719142537166848E16, 3.1855931348221952E16, 8.6593395455164416E16, 2.35385270340419584E17, 6.3984347447610573E17, 1.73927483790327808E18, 4.7278395262972723E18, 1.285159987981792E19, 3.493427277593156E19, 9.496119530068797E19, 2.581312717296228E20, 7.016736290557636E20, 1.907346499785443E21, 5.1847060206155E21, 1.4093490364499379E22, 3.831007739580998E22, 1.0413759887481643E23, 2.8307533984544136E23, 7.694785471490595E23, 2.0916595931561093E24, 5.685720022003016E24, 1.545539007875769E25, 4.201209991636407E25, 1.142007304008196E26, 3.104297782658242E26, 8.43835682327257E26, 2.2937832658080656E27, 6.23514943204966E27, 1.694889206675675E28, 4.607187019879158E28, 1.2523630909973607E29, 3.4042761729010895E29, 9.253781621373885E29, 2.5154385492401904E30, 6.837671137556327E30, 1.8586717056324128E31, 5.05239404378821E31, 1.3733830589835937E32, 3.733241849647479E32, 1.014800418749161E33, 2.758513549969986E33, 7.498416981578345E33, 2.0382811492597872E34, 5.540622484676759E34, 1.5060972626944096E35, 4.0939972479624634E35, 1.1128638067747114E36, 3.0250770246136387E36, 8.223012393018281E36, 2.2352467822017166E37, 6.076029840339376E37, 1.6516361647240826E38, 4.4896127778163155E38, 1.2204032949639917E39, 3.3174000012927697E39, 9.017628107716908E39, 2.451245443147225E40, 6.663175904917432E40, 1.8112388823726723E41, 4.923458004084836E41, 1.3383347029375378E42, 3.637970747803715E42, 9.889030935681123E42, 2.6881169167589747E43, 7.307059786371152E43, 1.986264756071962E44, 5.399227989109673E44, 1.467662348860426E45, 3.989519470441919E45, 1.0844638420493122E46, 2.9478781225754055E46, 8.013164089994031E46, 2.1782039447564253E47, 5.920972420778763E47, 1.609486943324346E48, 4.3750396394525074E48, 1.1892591576149107E49, 3.2327411123173475E49, 8.787501601904039E49, 2.3886908001521312E50, 6.493134033643613E50, 1.7650169203544438E51, 4.7978130078372714E51, 1.3041809768060802E52, 3.5451314095271004E52, 9.636666808527841E52, 2.6195174357581655E53, 7.120586694432509E53, 1.9355758655647052E54, 5.2614409704305464E54, 1.4302079642723736E55, 3.8877083524279136E55, 1.0567886837680406E56, 2.872649515690124E56, 7.808670894670738E56, 2.1226166967029073E57, 5.769871153180574E57, 1.568413405104933E58, 4.263390023436419E58, 1.1589095247718807E59, 3.150242850860434E59, 8.563247933339596E59, 2.3277319969498524E60, 6.327431953939798E60, 1.719974302355042E61, 4.675374788964851E61, 1.2708985520400816E62, 3.454660807101683E62, 9.390740355567705E62, 2.5526681615684215E63, 6.938871462941557E63, 1.8861808782043154E64, 5.1271712215233855E64, 1.3937096689052236E65, 3.7884955399150257E65, 1.0298199046367501E66, 2.799340708992666E66, 7.609396391563323E66, 2.0684484008569103E67, 5.622626080395226E67, 1.528388084444653E68, 4.1545899609113734E68, 1.1293346659459732E69, 3.069849599753188E69, 8.344717266683004E69, 2.268329019570017E70, 6.165958325782564E70, 1.676081191364984E71, 4.556060380835955E71, 1.2384658100355657E72, 3.3664990715562672E72, 9.15109220707761E72, 2.4875248571153216E73, 6.761793219649385E73, 1.8380461271305958E74, 4.996327312938759E74, 1.3581426848077408E75, 3.691814001080034E75, 1.0035391101975138E76, 2.7279024753382288E76, 7.415207287657125E76, 2.0156621983963848E77, 5.479138512760614E77, 1.4893842728520671E78, 4.048565732162643E78, 1.1005142643914475E79, 2.991508131437659E79, 8.131762373533769E79, 2.210442148596269E80, 6.008604166110734E80, 1.633308028614055E81, 4.439791652732591E81, 1.206860599814453E82, 3.280586734644871E82, 8.917559854082513E82, 2.4240442814945802E83, 6.589235682116406E83, 1.7911398904871E84, 4.86882298924053E84, 1.3234832005748183E85, 3.597600556519039E85, 9.77929222446451E85, 2.658286976862848E86, 7.225974166887662E86, 1.9642232209552433E87, 5.3393125705958075E87, 1.4513757076459615E88, 3.945247871835613E88, 1.0724295693252266E89, 2.915165904253785E89, 7.924242330665303E89, 2.1540322390343345E90, 5.855267177907345E90, 1.5916266807316476E91, 4.326489915443873E91, 1.1760619079592718E92, 3.1968677404735245E92, 8.689987517871135E92, 2.3621834216830225E93, 6.421080550439423E93, 1.7454306955949023E94, 4.744571892885607E94, 1.2897084285532175E95, 3.505791114318544E95, 9.529727908157224E95, 2.5904487437231458E96, 7.041568925985714E96, 1.9140971884979424E97, 5.203055142575272E97, 1.4143368931719686E98, 3.8445667684706366E98, 1.0450615121235744E99, 2.8407720200442806E99, 7.722018663521402E99, 2.0990624115923312E100, 5.705842978547001E100, 1.5510089388648915E101, 4.216079296087462E101, 1.1460491592124923E102, 3.1152847602082673E102, 8.468222063292654E102, 2.3019011105282883E103, 6.257216813084462E103, 1.7008878437355237E104, 4.62349260394851E104, 1.2567956334920216E105, 3.416324322370112E105, 9.286532888251822E105, 2.5243410574836706E106, 6.861870970598542E106, 1.8652499723625443E107, 5.070274654122399E107, 1.3782437251846782E108, 3.746454626411946E108, 1.0183920005400422E109, 2.768276122845335E109, 7.524954624697075E109, 2.0454950851007314E110, 5.56023190218245E110, 1.511427628805191E111, 4.1084862677372065E111, 1.1168024085164686E112, 3.0357834799588566E112, 8.252116273466952E112, 2.2431576057283144E113, 6.097534318207731E113, 1.65748157925005E114, 4.5055022172222453E114, 1.2247224482958058E115, 3.329140840363789E115, 9.049543313665034E115, 2.4599209935197392E116, 6.686758417135634E116, 1.817649308779104E117, 4.940883275207154E117, 1.3430713954289087E118, 3.6508464654683645E118, 9.924030156169606E118, 2.697631034485758E119, 7.332921137166064E119, 1.9932945470297703E120, 5.418336099279846E120, 1.472856595860236E121, 4.0036393271908754E121, 1.0883019300873278E122, 2.9583112936666607E122, 8.041523923017192E122, 2.1859129781586158E123, 5.941927186144745E123, 1.6151834292371802E124, 4.390523815859274E124, 1.1934680816813702E125, 3.2441826014060764E125, 8.81860282490643E125, 2.3971445233885962E126, 6.516115189736396E126, 1.7712635751001657E127, 4.814793918384117E127, 1.3087966177291396E128, 3.557678449715009E128, 9.670771210463886E128, 2.628788218289742E129, 7.145787619369324E129, 1.9424264981694277E130, 5.280062387569078E130, 1.4352697002457768E131, 3.901467289560222E131, 1.0605288965077546E132, 2.882816299252225E132, 7.836307815186044E132, 2.1301292155181736E133, 5.790291758828013E133, 1.573964437869041E134, 4.278478878300888E134, 1.1630112062985817E135, 3.1613917467297413E135, 8.593554223894477E135, 2.335970335559215E136, 6.349826172787151E136, 1.7260616357651607E137, 4.691921416188566E137, 1.2753966504932798E138, 3.466887271843006E138, 9.423976538577447E138, 2.561702766944378E139, 6.963429563637273E139, 1.892856346657855E140, 5.1453167686439515E140, 1.3986421289359558E141, 3.8019036618832785E141, 1.033464507572145E142, 2.809247950589945E142, 7.636326960498012E142, 2.075769060297565E143, 5.64252553828769E143, 1.5337974510118784E144, 4.169293918423203E144, 1.1333315586787883E145, 3.080714152600695E145, 8.374250298636991E145, 2.276357074042286E146, 6.187780443461367E146, 1.6820131331794073E147, 4.572185635487065E147, 1.2428488853188662E148, 3.378413594504258E148, 9.183480622172801E148, 2.4963286658278886E149, 6.785725312893433E149, 1.8445514681108982E150, 5.014010481958507E150, 1.3629491735708616E151, 3.7048805655699485E151, 1.0070909418550386E152, 2.7375567044077912E152, 7.441451374243517E152, 2.022795961737854E153, 5.4985298195094216E153, 1.494655405262451E154, 4.062894701808608E154, 1.1044092571980793E155, 3.002095574584687E155, 8.160542326793782E155, 2.218265110516721E156, 6.02987028472758E156, 1.6390888071605646E157, 4.455504920700703E157, 1.2111317421229415E158, 3.2921976772303727E158, 8.94912101169977E158, 2.432623425087251E159, 6.612555731556604E159, 1.7974788874847574E160, 4.8860545948985793E160, 1.328167263606087E161, 3.610333312791256E161, 9.813901863427107E161, 2.667695552814763E162, 7.251548346906463E162, 1.9711751621240536E163, 5.3582093498119173E163, 1.4565123573071036E164, 3.959211091077107E164, 1.0762251933089556E165, 2.9254832789181E165, 7.952287052787358E165, 2.161656025361765E166, 5.8759898326913254E166, 1.597259768214821E167, 4.3418021646459346E167, 1.1802241249113175E168, 3.2081817253680657E168, 8.720743087611513E168, 2.3705435424427623E169, 6.443805025317327E169, 1.7516078165936552E170, 4.7613641572445654E170, 1.2942728582966776E171, 3.518198614137319E171, 9.563454814394247E171, 2.5996166206245285E172, 7.066491077377918E172, 1.920871394985668E173, 5.221469250951617E173, 1.4193426880442385E174, 3.8581732071331E174, 1.0487601931965087E175, 2.850825930161946E175, 7.749348772180658E175, 2.1064911705560668E176, 5.726036941135634E176, 1.5564982816556894E177, 4.231000988846797E177, 1.1501053030837989E178, 3.1263099916916113E178, 8.498192212235393E178, 2.3100480183046895E179, 6.279361500971995E179, 1.7069074829463731E180, 4.63985600437427E180, 1.2612435745231905E181, 3.4284156709489884E181, 9.319400030019162E181, 2.5332752658571312E182, 6.88615578404537E182, 1.8718514371423056E183, 5.088219872370737E183, 1.3831214731781958E184, 3.759713966511158E184, 1.021996184153141E185, 2.778073442169904E185, 7.55158797540476E185, 2.0527342305586606E186, 5.579910641313343E186, 1.5167767828844167E187, 4.123026721295484E187, 1.1207549425651513E188, 3.0465278560980536E188, 8.281321669236493E188, 2.251096660331649E189, 6.119114404399683E189, 1.6633478556884994E190, 4.521448560089285E190, 1.2290570545894685E191, 3.340923580982338E191, 9.081571104550255E191, 2.468626868232408E192, 6.710424255583952E192, 1.8240823171621646E193, 4.958369974640573E193, 1.3478247120462365E194, 3.6637673548790206E194, 9.959152908532152E194, 2.707178052117959E195, 7.358873642076596E195, 2.0003490682463053E196, 5.4375131636754E196, 1.4780692924846082E197, 4.01780853635105E197, 1.0921536132159379E198, 2.968781250496917E198, 8.069984512111955E198, 2.193649279840519E199, 5.962956589227457E199, 1.620899738203635E200, 4.406062052965071E200, 1.1976919074588434E201, 3.2556641859513496E201, 8.849812639395597E201, 2.40562867677584E202, 6.539175932653188E202, 1.7775323307944624E203, 4.831833881898182E203, 1.3134287685114547E204, 3.5702693195009266E204, 9.704997606668411E204, 2.63809219778715E205, 7.171077244202293E205, 1.949300880034352E206, 5.298749302736127E206, 1.4403494631058154E207, 3.91527572177694E207, 1.0642823992403076E208, 2.8930193727937684E208, 7.8640411896421955E208, 2.1376680994038112E209, 5.8107841809216616E209, 1.5795351101531684E210, 4.293620869258453E210, 1.1671272667059652E211, 3.172580666390786E211, 8.623968972387222E211, 2.3442378838418366E212, 6.372298757235201E212, 1.7321703934464356E213, 4.708527306855985E213, 1.279910496643312E214, 3.479157135998568E214, 9.45732984079136E214, 2.5707689593428096E215, 6.988074107282322E215, 1.8995553996578656E216, 5.1635269305465607E216, 1.4035923083915864E217, 3.815359096108819E217, 1.0371220592190472E218, 2.819190456167585E218, 7.663353127378024E218, 2.083115484919861E219, 5.662495731848751E219, 1.5392257142577226E220, 4.184049381430498E220, 1.1373425785132867E221, 3.091617462831603E221, 8.403887374207366E221, 2.2844135610697528E222, 6.209679892802781E222, 1.6879660933816274E223, 4.588367423411997E223, 1.2472476068464461E224, 3.3903703993793316E224, 9.215982463319503E224, 2.5051637206758385E225, 6.809741127603255E225, 1.8510795864289367E226, 5.031755776868959E226, 1.3677729802316034E227, 3.7179924024793253E227, 1.0106552237522032E228, 2.7472456017809066E228, 7.467788172398272E228, 2.029955237703202E229, 5.517990469846618E229, 1.4999452522236406E230, 4.0772734783595525E230, 1.1083180046837618E231, 3.012720614547867E231, 8.18942426109357E231, 2.2261161215322043E232, 6.051211457626543E232, 1.6448897917725177E233, 4.471273900208441E233, 1.2154183152078517E234, 3.3038494682728794E234, 8.98079409878202E234, 2.4412328161430576E235, 6.63595840453991E235, 1.8038406914061554E236, 4.90334700062756E236, 1.3328680266667662E237, 3.623110695743118E237, 9.848636053777669E237, 2.677136737066629E238, 7.277212447141125E238, 1.978151484427976E239, 5.377173488599035E239, 1.4616672175682191E240, 3.973222981713661E240, 1.0800340064859439E241, 2.935837009891444E241, 7.980432566722885E241, 2.169306470354036E242, 5.896786161387733E242, 1.6029126916635028E243, 4.357168123448786E243, 1.1844011798406507E244, 3.2195361624179725E244, 8.751606149833694E244, 2.3789334438756013E245, 6.466611224443739E245, 1.7578073785142153E246, 4.7782149589194885E246, 1.2988535295611824E247, 3.5306502960727705E247, 9.597302512507479E247, 2.608817438130718E248, 7.091500562953208E248, 1.9276698418065647E249, 5.239949786641934E249, 1.42436589329759E250, 3.8718282216768776E250, 1.0524719896550007E251, 2.860915548426704E251, 7.77677492833005E251, 2.113946677051906E252, 5.7463023795153145E252, 1.56200679236425E253, 4.2459748085663055E253, 1.1541756557557508E254, 3.137374584307575E254, 8.528268445871411E254, 2.3182239583484444E255, 6.301585387776819E255, 1.7129486892266285E256, 4.6562769567905925E256, 1.26570724146049E257, 3.4405490416979487E257, 9.352382323649647E257, 2.54224113415832E258, 6.910528108396216E258, 1.8784760208391767E259, 5.106228040084293E259, 1.3880166914480165E260, 3.7730204737910044E260, 1.0256131352582533E261, 2.787906051540986E261, 7.578313650939932E261, 2.0599991793068063E262, 5.5996586041611455E262, 1.522145133131402E263, 4.137618951061827E263, 1.1247213964487372E264, 3.0573102223682595E264, 8.310629417537063E264, 2.2590636576955473E265, 6.1407711078356886E265, 1.6692346202615142E266, 4.5374504961394207E266, 1.2334070098307164E267, 3.3527476928456816E267, 9.113713162029408E267, 2.4773638527240193E268, 6.734172833429278E268, 1.8305382378470305E269, 4.9759187284770303E269, 1.352594940263854E270, 3.6767339705169146E270, 9.994400500679653E270, 2.716759624268743E271, 7.384918458508588E271, 2.007428933605617E272, 5.456757565532369E272, 1.4833003969415539E273, 4.0320284712983994E273, 1.096019026243815E274, 2.979288529962515E274, 8.098545495417704E274, 2.201412886580694E275, 5.984060832462728E275, 1.6266362950862408E276, 4.4216561713555547E276, 1.2019307065458128E277, 3.2671863888979078E277, 8.881133159512924E277, 2.4141423627760256E278, 6.562319473965767E278, 1.7838233889223407E279, 4.848934634563382E279, 1.3180771991576186E280, 3.5829049382293792E280, 9.739345931419228E280, 2.6474285478041252E281, 7.196457718729758E281, 1.956199868121249E282, 5.31750271790054E282, 1.4454470027638629E283, 3.929132560365955E283, 1.0680488848057261E284, 2.9032581477488686E284, 7.89187408872514E284, 2.1452336456259667E285, 5.831349876080173E285, 1.5851251724785243E286, 4.308816643345461E286, 1.1712579802975851E287, 3.1838092090922606E287, 8.654490685278886E287, 2.3525345191912968E288, 6.39485115791896E288, 1.7383009254496851E289, 4.725191397657393E289, 1.2844402232816276E290, 3.491470347090126E290, 9.490800658395667E290, 2.579867270991543E291, 7.012806239173502E291, 1.906278351789277E292, 5.181801397059486E292, 1.408559707497606E293, 3.8288623079292884E293, 1.0407926842436056E294, 2.829168201470791E294, 7.690475570840264E294, 2.0904882610105383E295, 5.68253547942899E295, 1.544673396032028E296, 4.1988574190754736E296, 1.1413677466646359E297, 3.102559332875688E297, 8.433630296371073E297, 2.292498520423419E298, 6.23165710486722E298, 1.6939399242810123E299, 4.604606371472047E299, 1.2516618713553432E300, 3.402369329874797E300, 9.248598815279678E300, 2.51402968559859E301, 6.833842035076675E301, 1.8576309291617257E302, 5.049564425991982E302, 1.3726137091534984E303, 3.7311513682845094E303, 1.0142320772726397E304, 2.7569686255975333E304, 7.494218049456063E304, 2.037139607241041E305, 5.5375196488302575E305, 1.5052539519895093E306, 4.091704288360009E306, 1.1122405335641184E307, 3.023383151402969E307, 8.218407798110846E307, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN]
org.apache.commons.math.util.FastMath.EXP_INT_TABLE_A[] elements >= 0.0
org.apache.commons.math.util.FastMath.EXP_INT_TABLE_B has only one value
org.apache.commons.math.util.FastMath.EXP_INT_TABLE_B != null
org.apache.commons.math.util.FastMath.EXP_INT_TABLE_B[] == [0.0, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, 2.476397055E-315, 8.167555766E-315, 3.2560597974E-314, 7.106836947E-314, 1.9153492448E-313, 5.3524769447E-313, 1.500270547087E-312, 3.722208993045E-312, 9.577517262645E-312, 2.7067633803453E-311, 8.5981816772533E-311, 1.32312027088577E-310, 7.4079598407484E-310, 1.92867317003983E-309, 3.835217807678677E-309, 7.65841712091245E-309, 2.1988214192601247E-308, 5.036588593274041E-308, 1.7560409217857142E-307, 3.333005866454225E-307, 9.187282353728816E-307, 2.882463139094055E-306, 7.782413451196169E-306, 1.8147730993076388E-305, 5.479218363198391E-305, 6.704597874020558E-305, 4.08068942572261E-304, 1.8815133641872122E-303, 4.2005465841519E-303, 1.4799345038600483E-302, 2.2278324587801234E-302, 9.453410853316543E-302, 1.918655346657741E-301, 5.384592182273843E-301, 1.8327378631444742E-300, 3.547385401910663E-300, 1.6184549674756048E-299, 3.8341254496074277E-299, 7.382084725223658E-299, 1.2909399103730673E-298, 3.2608758934425483E-298, 2.0577588748869995E-297, 2.915117468914912E-297, 1.655229639411404E-296, 2.1820114167733544E-296, 1.4101633764358662E-295, 3.189024128921191E-295, 6.699942810145897E-295, 3.0831228860897108E-294, 3.3055880391409686E-294, 1.3723023953022682E-293, 4.2351689056895143E-293, 6.001272058791201E-293, 3.7636574360927604E-292, 6.989750075993467E-292, 1.2800250809973126E-291, 4.972343481270598E-291, 9.099731465906491E-291, 4.9964252406147724E-290, 7.132447075046458E-290, 3.5056030506063758E-289, 7.2652567849433765E-289, 3.091423306034589E-288, 6.779126242326894E-288, 1.9436038567108546E-287, 4.436994194391546E-287, 8.903562882514838E-287, 4.094945957285495E-286, 5.325710983096651E-286, 1.9452098455555612E-285, 8.056585862668601E-285, 9.867579386007288E-285, 7.358435060733201E-284, 1.2099736197932623E-283, 4.0169019249553017E-283, 1.2138955989182796E-282, 2.722710236647505E-282, 1.0128830504431574E-281, 1.768560324939241E-281, 3.24805852077848E-281, 1.482527426698921E-280, 6.101260107049358E-280, 1.1154488170251528E-279, 3.4101230884200864E-279, 1.0585486365993195E-278, 3.487270650769626E-278, 4.720754013191732E-278, 1.615017684152174E-277, 5.307203548817621E-277, 1.554061670640041E-276, 2.3384844698002962E-276, 1.0950313598192709E-275, 2.676900060641514E-275, 7.498671097989964E-275, 2.7149504036407675E-274, 6.61011714812222E-274, 9.565604168783E-274, 4.204820554573987E-273, 1.4435497530916398E-272, 2.3138674826670994E-272, 9.29669392832775E-272, 8.215674234934033E-272, 4.983289962573892E-271, 1.9324215579205706E-270, 3.856892959796833E-270, 1.2292850462401489E-269, 2.171465803615768E-269, 1.3404656369469888E-268, 1.1416576007872186E-268, 5.83562724115764E-268, 2.5536127355264122E-267, 4.230372948555406E-267, 1.1445708611900701E-266, 4.4568505765495007E-266, 1.127722705435397E-265, 3.028547551555857E-265, 3.7940916116666205E-265, 1.8953692275694213E-264, 5.026246014483497E-264, 1.5557045275910785E-263, 2.5735269753061894E-263, 1.0669721036575398E-262, 1.49173138383079E-262, 6.760545733446039E-262, 2.0650269005355835E-261, 3.8694706686990817E-261, 8.638091785477657E-261, 5.485086427245173E-260, 1.3386996894658773E-259, 4.370021543074261E-259, 9.243918936190228E-259, 2.990912504392155E-258, 8.168589514592108E-258, 8.853422101688506E-258, 7.335137781962019E-257, 1.4044299227774037E-256, 3.9214635882848717E-256, 1.2923872582702195E-255, 2.6419904164057274E-255, 8.46806679805778E-255, 1.7397232780398694E-254, 2.06180636700985E-254, 1.7145443036605247E-253, 2.8020137426810266E-253, 1.0195241991489214E-252, 1.5366872880782098E-252, 7.241264624543274E-252, 1.9212169947004395E-251, 2.184743606502455E-251, 2.0048435120553305E-250, 3.452517363461934E-250, 1.3865358090256578E-249, 2.27155283299376E-249, 1.0158397228377594E-248, 9.657495733024459E-249, 5.213408571948311E-248, 1.3468969014351372E-247, 6.016701270403944E-247, 9.662712555447958E-247, 4.398614669026914E-246, 9.991280376948304E-246, 3.3729844709432994E-245, 4.9837468688836696E-245, 1.7744024285045186E-244, 4.7545364003650795E-244, 1.771399238996101E-243, 2.1626913434875195E-243, 1.3810477716118048E-242, 3.40292267656917E-242, 7.315714028404299E-242, 1.8842503224230247E-241, 6.843440490020105E-241, 1.227508467256743E-240, 4.930618626881399E-240, 6.018626557857765E-240, 3.224048686551494E-239, 4.6879122120666095E-239, 1.7696498235944135E-238, 3.794758143284587E-238, 1.33703076094825E-237, 5.624521359867459E-237, 1.3292013339297373E-236, 3.4440530303091913E-236, 9.203459964294169E-236, 3.238994888828722E-235, 3.81341339983694E-235, 1.5786292226007845E-234, 4.0246490052525016E-234, 1.2539082970070278E-233, 3.511024012767152E-233, 1.3275290914659535E-232, 2.917497974751856E-232, 7.033193483647784E-232, 2.3706335389076607E-231, 4.494852424364595E-231, 1.5741720910760897E-230, 3.545985622181174E-230, 5.886624187808078E-230, 1.8345338893054923E-229, 9.45071490060964E-229, 1.8829418366620264E-228, 7.42205356295443E-228, 9.361371123412607E-228, 5.829721725773481E-227, 1.2304068068939469E-226, 2.3418647013190617E-226, 1.049235858025211E-225, 1.3003867522636893E-225, 6.999188630325552E-225, 2.0402105689098835E-224, 5.164902728917601E-224, 9.981031744879876E-224, 4.0281104210095145E-223, 1.1158160971176672E-222, 2.0736172194624895E-222, 4.983162653734032E-222, 2.1753390051977871E-221, 3.969413618002761E-221, 1.3961255018698695E-220, 2.1290855095314206E-220, 1.1927747883417406E-219, 3.7264401117998796E-219, 9.318532410862293E-219, 2.3414841777613345E-218, 4.3791842770430786E-218, 1.7173159016511951E-217, 3.5037536832675478E-217, 1.4300098613455884E-216, 2.4189403362149483E-216, 9.306541421999056E-216, 3.442100456607687E-215, 5.94407068841904E-215, 2.0483260435783403E-214, 3.8410992889527954E-214, 1.2038281262953917E-213, 3.865007795216205E-213, 9.754659138599756E-213, 2.7653605770745684E-212, 5.359568079675375E-212, 2.61726605666378E-211, 5.054202073556894E-211, 8.707092668016246E-211, 1.4080573899148006E-210, 1.288124387778789E-209, 1.8639901642011898E-209, 6.076014540574561E-209, 1.798489141298457E-208, 2.1525406805994896E-208, 1.1864056832305874E-207, 2.1077440662171152E-207, 1.3784853708457332E-206, 1.6965806532093783E-206, 7.241626420445137E-206, 2.575584299085016E-205, 6.151951078101721E-205, 2.40652042118887E-204, 4.022633486003565E-204, 5.8840879519086286E-204, 3.2820308007277566E-203, 4.31880454864738E-203, 2.427240455243201E-202, 7.326955749884755E-202, 1.4310184489676175E-201, 4.464279133463661E-201, 4.895131474682867E-201, 4.48614966943544E-200, 8.924048768324976E-200, 2.5035535029701945E-199, 6.627829836338812E-199, 2.6066826304502746E-198, 8.042275310036546E-198, 2.115062964308555E-197, 4.413745413236018E-197, 1.644449394585716E-196, 3.138217752973845E-196, 7.48533983136081E-196, 2.613626422028823E-195, 3.6741841454219095E-195, 5.906102862953403E-195, 4.4940857547850743E-194, 5.840064709376958E-194, 3.087661273836024E-193, 4.995552216100365E-193, 1.991444798915497E-192, 7.097454751809522E-192, 2.0510193986749737E-191, 5.759440286608551E-191, 1.7013941257113314E-190, 2.1383323934483528E-190, 8.280292810015406E-190, 3.138655772049104E-189, 7.961506427685701E-189, 2.0579001228504997E-188, 7.530840351477639E-188, 1.4582863136475673E-187, 3.149267215638608E-187, 5.443114553057336E-187, 3.4672966834277804E-186, 7.374944406615125E-186, 2.7318417252599104E-185, 7.913674211949961E-185, 2.5217716516462005E-184, 4.0866585874353075E-184, 1.2087698972768686E-183, 3.7072473866919033E-183, 1.1333588840402273E-182, 1.61949812578045E-182, 6.567779607147072E-182, 2.422974840736314E-181, 2.551170809294396E-181, 1.0905890688083124E-180, 3.221279639653057E-180, 7.068244813489027E-180, 1.3752309224575428E-179, 7.20154303462761E-179, 1.5391707185581056E-178, 7.708777608683431E-178, 5.597398155472547E-178, 1.8487854656676722E-177, 1.0577249492414076E-176, 2.8926683313922764E-176, 4.090184282164232E-176, 1.6142943398013813E-175, 7.873864351702525E-175, 2.242630017261011E-174, 3.4637009373878283E-174, 1.5907089565090164E-173, 1.6985075903314236E-173, 1.1552273904608563E-172, 2.237894048535414E-172, 5.321990399912051E-172, 1.4106062639738257E-171, 2.9850404523368767E-171, 1.5683802588004895E-170, 4.880146806045633E-170, 1.1489352403441815E-169, 1.6401586605693734E-169, 8.29169700697816E-169, 1.0380723705441457E-168, 7.126414081261746E-168, 1.253325949455206E-167, 2.595079206183114E-167, 1.537490712803659E-166, 2.6338455225993276E-166, 7.994936425058567E-166, 1.5716634677516025E-165, 3.669404761339415E-165, 1.9941628263579332E-164, 4.5012079983352374E-164, 7.283163019991001E-164, 2.398038505188316E-163, 7.868666894503849E-163, 2.1478649410390003E-162, 8.306111510463843E-162, 1.5453160659068463E-161, -4.590496588813841E-162, 3.5449293983801232E-161, -1.0440854056870505E-160, -2.321064927632431E-160, 5.707867001443433E-160, -2.238614484037969E-159, 2.482282821883242E-159, -1.1508772192025259E-158, 1.9903990578876104E-158, -1.2116165315442256E-158, -2.9084557554502667E-157, -1.1211083853006645E-156, -1.309893394818129E-156, 4.2269712317468864E-156, -7.678973146281339E-156, 3.2021376921211934E-155, -7.08313012515209E-155, 1.944398214330544E-154, 1.1860061363751161E-153, 1.5234465914578058E-153, -2.9020908354550263E-153, 4.980100072851796E-153, 2.3101551448625578E-152, -1.1959241322537072E-151, -9.27398924154364E-153, 5.999390491704392E-152, 1.3373196561281372E-150, -1.0271780540759147E-150, 2.575620466387945E-150, -6.56250013356227E-149, -1.1961357917482867E-148, 5.5807813570926636E-148, 9.252840189663807E-148, -1.830335419852293E-147, 9.350990339947455E-147, -1.6072409939877762E-146, -2.5309995887229526E-146, -1.6014373376410622E-146, -3.303297758377758E-145, 1.5640419864850202E-145, 9.544642884951585E-145, -8.64864445321803E-144, 7.580392204597681E-144, 2.678334184447568E-143, -3.7269289985326055E-143, -2.851965258161176E-142, 7.243267286265823E-142, 4.4510805312036926E-141, 9.008499734799015E-141, 1.130435759928337E-140, -3.096539751496479E-140, -1.497405487919762E-139, 3.51519845948652E-139, -4.713790209541894E-139, 4.740753295616865E-138, 9.517570994930463E-138, -1.8842098029339485E-137, -3.825558165008403E-137, 1.1817638600528107E-136, -3.514601201473235E-136, -6.344612631552417E-136, -1.6754164785291923E-136, 4.445372986583078E-135, -3.89604237755475E-134, -1.0155552195374609E-134, 2.1858142063550155E-134, 3.497714990137842E-133, -7.635830383612894E-133, 1.2050744860079718E-132, -7.683019590615251E-133, -3.344806129021162E-131, -1.6737914131474577E-131, -4.30610076666344E-131, 5.184023388254773E-130, 2.6290763595212492E-129, 7.90041744728452E-130, -3.204473056113754E-129, -2.552517201762272E-128, 7.130134251490065E-128, -3.2244113258340395E-127, -1.064920993515727E-127, 2.7466520735457463E-126, 4.368312797746065E-126, 1.8802599072446818E-125, -4.257625799463564E-125, 5.491672256552995E-125, 3.7298611779671127E-124, 5.724180836308973E-124, 1.3861841053630075E-123, 4.2303826056297614E-123, 3.5335436928899096E-123, -2.522906629540626E-122, 1.0147808005267102E-121, 6.734406065735473E-122, -4.948973160958133E-121, 2.4256181927024344E-120, 4.9056283164780554E-120, 6.846440394397547E-120, 3.512747689569002E-119, -9.020907406701404E-119, 2.5718749916003624E-118, 4.3724191002977524E-119, 1.001455050575191E-117, -2.4442443105031435E-117, 2.38873950760028E-116, -4.831068747037129E-118, -5.148989321866988E-116, 1.7875271881514469E-115, -1.1821586412088555E-114, 4.43247726423679E-115, 4.634817120492781E-114, 1.671311907037975E-113, -4.595250028278979E-113, -5.905511605694905E-113, -1.3657642265608213E-112, 2.881416869529271E-112, 2.1253302469985373E-111, -5.301386276260592E-111, 1.4198782892306878E-112, -3.395494928605007E-110, 9.284633292147283E-110, -6.054133004896379E-110, -8.324100783330331E-109, -2.193190669794277E-108, 1.3613655394659198E-107, 6.463452607647978E-108, 1.0187183636134904E-106, 1.0705673935006142E-106, 2.509050608571019E-106, -1.5096182622106617E-105, 1.7794190449526737E-106, 1.2261246749706581E-104, 2.1377905661197194E-104, -2.2015877944429946E-104, 7.873970951802825E-104, -1.7999197335480384E-103, 1.0487383011058756E-105, -2.9988278531841556E-102, 4.7976477743232285E-102, 3.452316818502442E-102, 5.89953246760617E-101, -4.0785601577267006E-101, 2.7214076662438963E-100, 5.237807655758373E-100, 6.180972117932364E-99, -1.3019742873005683E-98, 4.501188264957416E-99, -2.4075054705261798E-98, 1.6503086546628772E-97, -6.878666975101243E-97, 1.196718116616528E-96, 2.476190162339265E-96, -7.1844969234484515E-96, 5.088386759261555E-95, 6.749368983223726E-95, 1.965737856765605E-94, -5.574080023496771E-94, 1.2493696959436675E-93, 8.533262777516794E-94, -7.225259028588793E-93, -7.340587186324432E-93, -3.482412195764625E-92, 3.4742610108480497E-91, -7.177274244758699E-91, 1.2736636153072213E-90, -5.730160886217076E-90, -1.545495535488274E-89, 1.1304179460367007E-89, 1.249260560756154E-88, -4.7439719382414206E-88, 7.164663249266942E-88, 1.7617425105337704E-87, 2.4175248449172035E-87, -1.043079666926483E-86, -2.8137609614326677E-86, -1.2091497144395591E-85, 3.7944631664558904E-85, -2.8144926807308225E-85, 3.9782728352520784E-85, 4.313978872469646E-84, 5.82190887044604E-84, 5.883385169571802E-83, 1.134857098306787E-82, 3.468049324128309E-82, 2.625423995658143E-82, -3.42827917465521E-81, 5.119461911618321E-81, -2.134387988350615E-80, -4.4703076268400615E-80, 4.806078883451016E-80, 2.3820250362443495E-79, -7.258551497833573E-79, -4.0297835558876335E-78, 2.1424166787650852E-78, -3.2117127164185917E-77, 4.8459153070935316E-77, -1.766924303914492E-76, -2.6921749814579492E-76, -4.1291070428848755E-76, 2.2086994756104319E-75, -7.814146377574201E-75, -1.9589778310104216E-74, 6.52658129486538E-74, 1.7804909509998055E-74, -4.1900132227036916E-73, 1.5705861683841123E-72, -1.904714978998808E-72, -7.81295459930537E-72, 2.818537910881676E-71, 5.840507984320445E-71, 1.7331720051707087E-70, 1.936946987935961E-70, -5.86517231340979E-71, -1.3277440528416646E-69, 1.9906256185827793E-69, 8.668714514280051E-69, 6.643105496829061E-69, -2.5436254170647032E-67, -4.8279217213630774E-67, -1.2640304072937576E-66, 3.51187258511716E-66, 1.4199501303738373E-65, -1.2351697477129173E-65, 7.0542365522414836E-65, 1.030593104122615E-64, -5.452692909894593E-65, -9.415506349675128E-64, -3.6206211446779087E-63, -1.6699188275658641E-62, 2.287280262665656E-62, 7.076135457313529E-62, 2.9019628518165404E-61, -3.1305705497720186E-61, 2.2978757040142953E-60, 1.2424439441817321E-60, 7.140343013236265E-60, 8.633726388939636E-60, 1.3483035574114863E-58, 1.653701058949654E-58, -8.939932297357388E-58, -1.395320103272191E-57, 6.440430933947252E-58, -1.681200826841738E-56, 3.9904382022898837E-56, -4.870518577546228E-56, -1.6990896855901115E-55, -6.751434891261518E-56, -1.669012123121194E-54, -4.079585475491198E-54, -1.3070436427679952E-53, -3.090028378908628E-53, 7.468160889798606E-53, 6.229095980733463E-53, 1.4794751934479566E-52, 1.7444373785853918E-51, -5.3681978363391484E-52, 2.71853394036182E-51, -1.3334367969274016E-50, -1.6958057665854177E-49, -1.452507231312146E-49, 3.3855429446520427E-49, 4.903687986212687E-49, 2.2185957416622524E-48, -9.924196700842429E-48, 4.285128462851149E-47, 3.076063086193525E-48, 4.102052341676543E-46, 1.1745772638457318E-45, -5.309047216809048E-47, 2.72972449891179E-45, -1.1748423022293739E-44, 6.626052626622228E-44, 3.0227439688367925E-44, -4.740494808228372E-43, 5.926057457356852E-43, 3.09768273342776E-42, -5.589493227475577E-42, -8.84908716783327E-42, 2.3684740712822874E-41, 1.4836491430755657E-40, 4.5878801324451396E-40, 1.0585156316103144E-39, 2.3805896467049493E-39, 1.0285082556185196E-38, 2.5187968110874885E-38, -1.4088399542613178E-38, -3.00901028043488E-38, 2.0089026801414973E-37, -1.3324111396289096E-36, 5.458481186294964E-36, -4.8402541351522003E-36, -1.3331969720555312E-35, -8.248332290732976E-35, -1.8349670703969982E-34, 6.403477383195494E-34, 3.7813691654412385E-34, 2.4621305031382827E-33, -5.634051826192439E-33, 3.817173955083142E-32, -6.038239639506472E-32, -2.130447095555397E-31, -6.824454861992054E-31, -1.3455801602048414E-30, -2.518642767561659E-30, 8.082792416221215E-30, 4.718103502869148E-29, -5.607991635038776E-29, -1.8042191582018579E-28, 6.989914264479507E-28, -2.9031739430339586E-28, 6.076820259849921E-27, -3.24981577480893E-27, -2.7648210023059463E-26, -9.785306155980342E-26, 1.241529292737115E-25, 3.0891604448087654E-25, 2.3451052074796954E-24, 6.574128018028633E-24, -1.3345148716925826E-23, 4.3594621428644293E-23, -5.678896695157704E-23, -4.676849004137386E-23, -2.281578975407609E-22, -3.144430608076357E-21, 5.662033727488754E-22, -4.30293375386492E-21, 4.985137671479376E-20, 1.657668502165438E-19, -3.3878706977811337E-19, -7.488022803661722E-19, 1.725039737424264E-18, -6.0275040161173166E-18, -8.081007442213538E-19, 2.9257892371894816E-17, 1.5231541295722552E-16, -1.1474026049124666E-17, 6.890372706231206E-16, 2.592721454922832E-15, -1.1253822296423454E-15, -2.650684279637763E-14, -4.107226967119929E-15, -3.130508064738312E-14, -6.729414275200856E-14, -1.6166170913368169E-12, -1.2059301405584488E-12, -1.2210091619211167E-11, 3.695372823623631E-12, 5.119220484478292E-11, -1.0857572226543142E-10, -4.6490379071586397E-10, -4.5810381714280557E-10, 1.4909756678328582E-9, -1.3155828104004438E-8, -9.149755188170102E-9, 0.0, 8.254840070411029E-8, -1.0681886149151956E-7, -3.359944163407147E-8, -2.1275002921718894E-6, 1.2129920353421116E-5, 2.1520078872608393E-5, 1.0178783359926372E-4, -2.077077172525637E-5, -5.67996159922899E-5, 9.510567165169581E-4, 0.0010901978184553272, 0.010169003920808009, 0.017008920503326107, 0.03416477677774927, -0.1275278893606981, 0.5205078726367633, 0.7535752982147762, 1.1373305111387886, -3.036812739155085, 11.409790277969124, -9.516785302789955, -49.86840843831867, -393.7510973999651, -686.1565277058598, 4617.385872524165, -11563.161235730215, -8230.201383316231, -34460.52482632287, 50744.04207438878, 357908.46214699093, 1936607.425231087, 3222936.695160983, 5477052.0646243105, -3.517545711859706E7, -1.2693418527187027E8, -2.5316384477288628E8, -1.6436423669122624E8, 4.0889180422033095E8, 4.968829330953611E9, -3.503399598592085E9, 1.905394922122271E10, 1.0361722296739479E11, -5.806792575852521E10, 2.3454138776381036E11, -1.718446464587963E12, -1.0946634815588584E12, 1.6889383928999305E13, -3.784600043778247E13, 7.270965670658928E13, -4.9202842786896806E14, 4.597700093952774E14, 2.6113557852262235E15, -4.544525556171388E15, -9.517971970450354E15, -2.0634857819227416E16, -9.7143113104549808E16, -2.2667083759873216E16, -7.2285665164439578E17, 4.1215410760803866E18, 8.5807488300972206E18, 1.530436781375042E19, -1.5453111533064765E19, -1.0633845571643594E20, -3.512380426745336E20, 3.7734658676841284E20, -3.855478664503271E21, 7.984485303520287E21, -1.2296934902142301E22, 1.042139023692827E22, 1.2167897656061312E23, 9.22064170155394E22, 3.965171513035854E23, -4.135121057126514E24, -7.944341754299148E24, 1.4715152230577016E25, -3.0635272288480756E25, -9.54468158713835E25, 1.5411775738825048E25, -8.274711842374368E26, -1.0028324930788433E27, 5.189062091114782E27, -2.8583500869462184E28, -5.198295198128238E28, 2.9758750368256437E29, 3.216046320616945E29, -1.7846700158234043E30, 3.847174961282827E30, 9.026991921214922E30, 4.1358029739592175E30, -6.461509354879894E29, 9.704297297526684E31, 2.9731739067444943E32, 9.97728609663656E32, 3.1149346370027763E33, 2.0051635097366476E34, 2.819272221032373E34, 1.6266731695798413E34, 1.998050894021586E35, -6.1633417615076335E35, 2.2505716077585116E36, 1.9299691540987203E36, 8.006569251375383E36, -3.785295042408568E37, -1.1870498357197593E38, 1.0010529668998112E38, 1.3240710866573994E38, 2.6888010385137123E39, 1.7400655988987023E39, -6.402740469853475E39, -3.93114092562274E40, 1.2363717201084252E41, -1.9219116633978794E41, -1.347867098583136E42, 7.87675118338788E41, 3.3932984011177642E41, -1.9872713979884691E43, 2.220208491349658E43, -3.466267817480825E43, 3.19462030745197E44, -9.841244788104406E44, -2.2676593395522725E45, -1.1349246400274207E46, -1.1700910284427406E46, -3.6754317105801715E46, 1.7647101734915075E47, 2.122358392979746E47, 3.156243682143956E47, 5.356668151937413E47, 2.7668218233914262E48, 3.5127708120698784E48, 1.7884841356632925E49, 1.716531820904728E50, -2.9114757102866277E50, 1.0657703081219677E51, -7.512169809356372E50, 1.764200470879736E51, -1.0088898215431471E52, -3.1085734725176E52, 4.3529009584292495E52, -2.467842129213774E53, -3.9317379627195146E53, -4.332335454045836E52, 7.979013724931926E54, -1.5038413653121357E55, 9.310799925566843E55, -2.2042966348036592E55, -4.518315366841937E55, -6.971366338144781E56, -2.0461505570781806E57, -8.823884392655312E57, -1.1264032993918548E58, -7.692065092509875E58, -1.8472516879728875E59, 8.72220314694275E58, 1.6525336989036362E59, -3.343201925128334E60, 5.493352163155986E60, -2.548073509300398E61, -9.566541624209933E61, 4.0891054447206644E61, -7.724182294653349E62, 1.0143022354947225E63, -4.952031310451961E63, -7.877410133454722E63, 4.505432606253564E64, -7.330635250808021E64, -1.642361029990822E65, 5.982180242124184E65, 7.120242132370469E65, 5.908356249789671E66, -2.8477710945673134E65, 6.65688196961235E66, -9.233295580238604E67, 3.2850043261803593E68, 7.041681569694413E68, -1.5652761725518397E69, 1.5377053215489084E68, 1.282130763903269E70, -2.380286345847567E70, -7.207022875977515E70, 2.7641662602473095E71, 7.685235201534525E71, 4.3239378585884645E70, -1.6840562544109314E72, -5.04128025464686E71, 5.4557485189210095E73, 7.160277784358221E73, 7.636179075087608E73, -8.18804507680012E74, 2.807397988979441E75, 2.165163304600171E75, -1.3208450062862734E76, -5.1939252391404724E76, -6.985952908805853E76, -1.6259920998287064E77, 6.098975200926637E77, -5.63383579957466E77, -1.5876819186852907E78, 2.1487475413123092E79, -3.987619123706934E79, 9.772655251656639E79, -1.638756156057952E79, -7.83892088580041E80, 1.274413296252691E81, 2.51946651720982E81, -2.516866097506943E81, 1.053956282234684E82, 1.8279051206232177E83, 1.2250764591564252E82, -4.0353723442917463E83, -1.4121324224340735E84, -5.45287716696021E84, -1.7514953095665195E85, -5.0706081370522526E85, -4.35799392139009E85, -3.982538093450217E86, -1.4591838284752642E87, 2.5313735821872488E87, -3.718501227185903E86, -1.3907979640327008E88, -5.79002114093961E86, -1.2500675565781447E89, 4.8182788286170926E89, -1.7198866036687559E90, -4.690417668647599E88, 1.3020631859056421E91, -1.3850458263351744E91, 4.87301010703588E91, -1.695546877943826E92, -1.6353756659909833E92, -1.5483926773679628E93, -1.8921091400297595E93, -6.183525570536406E93, -4.987913342551977E93, 1.0186485886120274E93, -1.5343120819745468E95, -5.262123923229857E95, 1.618327917706804E96, -4.135185828158998E96, -8.016793741945299E96, -3.0399439534134115E97, -1.2319346292749103E98, 7.536337311795176E97, -3.577715974851322E98, 2.0521614818695524E99, 1.2627736197958951E98, -5.206910481915062E99, 3.0974593993948837E100, -9.522726334561169E100, -1.1909272509710985E100, -5.056512677995137E101, 2.0902045062932175E102, 6.243669516810509E102, -1.7375090618655787E103, -2.5445477450140954E103, 3.619891246849381E103, 8.90737333900943E103, -2.7897360297480367E104, 1.3725786770437066E105, -8.316530604593264E105, -6.054541568735673E105, 7.523374196797555E105, 1.1475955030427985E107, 1.5260756679495707E107, 7.370294848920685E107, 1.3608995799112174E108, 1.0700758858011432E108, -4.989318918773146E108, -1.6629755787634093E108, 7.635999584053557E109, 1.892621828736983E109, -6.793094743406533E110, -8.160628910742724E110, -7.724219106106896E111, -1.6059226011778748E112, -1.5277127454062126E112, 3.911086668967361E112, 3.529920406834134E113, -4.3991443996021166E113, -1.2631909085915044E114, 3.8656278695544835E114, 1.71845288713123E115, 3.7660598745907915E115, -4.048086182363988E115, 2.3093822298965837E116, -9.684925795536813E116, -3.137992585221854E117, -5.637415935329794E117, -1.5536658521931418E118, -6.336314643222911E118, 8.550658957115427E118, -5.591880480212007E119, 2.4137404318673354E119, -2.631656656397244E120, -7.653117429165879E119, -4.073965591445897E121, 3.634781057940233E121, 4.537273754534966E121, -2.5138919966097735E122, -1.0292817180691822E123, -1.4265564976097062E122, 6.000235114895513E123, 4.186590347846346E124, -1.8950538406321535E124, 7.716762345695022E124, -4.443798187035849E125, -2.268994961992292E125, -2.8169291774231604E126, -2.749127978087685E126, -2.2929764629585683E126, -7.369842361872221E127, 2.81312841469177E128, 2.7856896414497757E128, -3.096733638475319E128, -5.4199510725063615E129, -7.315860999413894E129, 3.6424644535156437E130, -7.886250961456327E130, 5.289988151341401E130, 2.7758613753516344E131, -2.738246981762776E132, -2.2667181460478093E132, -3.614672661225457E131, 2.325337720526947E133, 4.16603235883392E133, -6.50348962894948E133, 3.851445905038431E134, -5.46060534001412E134, 5.4679180659102885E135, -3.037477806841494E135, -3.0417051809209134E136, -6.995964550587914E136, -3.6897084415718804E137, -6.938000231893302E137, 2.403806217004454E138, -3.4552363953199905E138, 7.3409917428393E138, -1.7445917446236717E139, -6.680679913078676E139, -8.193572619487537E139, 5.337290292186291E139, -3.951314467739045E140, -4.4662073456574476E141, 6.249381778908997E141, -2.928362616578011E142, -1.6661676835672304E143, -1.974465323891493E143, 1.3083870531380308E144, -2.382825271750576E144, -5.4826958838142734E144, 1.5340733916570804E145, -3.1327120557842516E145, 1.5790297768522832E146, 1.1518771984292262E146, -4.789917000227385E145, -8.689594184775204E146, 3.0680417869552433E146, 4.877860620031438E147, -3.4650891244084597E148, 1.8702183451052442E149, -3.5727227900139915E148, -1.3457821696677932E150, 3.3212950284273017E149, 7.316033240396569E150, -7.187723217018267E150, -8.537194547485455E150, -1.4561530066010593E152, -7.548155147049997E151, 1.0047353208353007E153, -1.2489460589853119E153, 4.426120229279107E153, -2.5466223330961086E154, 8.831699889789037E154, -2.0258084311749475E155, -5.525009099476396E155, -1.0235056525096769E156, -4.117971654572494E154, -4.7559175309753334E156, -1.4656240137098836E157, -7.675790582869644E157, -1.0126616322947826E158, 7.084865265284368E158, -9.374695893307895E158, 2.05597910889115E159, -7.368602086210704E159, -1.6167825196198978E160, 2.3832096207000712E160, 1.3166970112139726E161, -6.432337568761393E161, 2.9279594746502846E161, 4.8926595743317624E162, 1.2704793774453618E163, -1.1345910784680524E163, 7.75933511025868E163, -1.1441115218462356E163, 5.162248481759758E164, 6.362563919556132E164, -2.8362173224732088E165, -4.342161053332263E165, 4.388125271425036E166, -7.049068240916723E166, 3.8520227881415595E166, 2.9274120974020826E167, -7.500936767542933E167, -6.540181860667302E168, 4.664436780622191E168, -1.436111169285268E169, -1.0407581736224179E170, -2.7670181051374297E170, -6.788169932297778E170, 1.6997387217850427E171, -1.0965324942770584E171, 9.841563119484623E171, 3.175748919314254E172, 2.9621181706527444E172, -3.30101656090905E173, -3.791840683760427E173, -2.841347842666459E174, -7.836327226971707E174, 9.650358667643114E174, 5.9994277301267294E175, -6.0490084078440215E175, -2.8964095485948707E176, 9.916187343252014E175, 2.7535627955313556E176, 3.886891475472745E177, 3.1962472803616787E178, -5.50599549115449E178, 5.672812341879918E178, -3.295268490032475E179, 9.761163062156018E179, 3.107837179570674E180, 3.3894811576571423E179, -5.235397688850367E180, -5.004237248003625E181, -1.7544995191195304E182, 2.645622651144787E182, -3.459885432869825E182, -4.0361435606199565E183, -1.8382923511801317E183, -1.7332235571505177E184, 2.847653455671381E184, 1.7991060813894693E185, -2.0937429891059164E185, 5.744446753652847E185, -2.1349396267483754E184, -1.2542332720182776E186, 3.3730714236579374E186, -5.923734606208998E187, 2.24669039465627E188, -1.2588742703536392E188, 1.474522484905093E189, -2.4006971787803736E189, -3.52597540499141E189, 2.6676722922838097E190, 5.27579825970359E190, 2.1360492104281465E191, 1.9442210982008953E191, -1.4691239161932232E190, 3.8218180377739526E192, 1.9722862688653467E192, 3.047601928063002E193, 1.6747356805175311E193, 7.710512446969693E192, 1.7780021277684035E194, -1.4015110811648513E195, 4.0447634595724164E195, 9.023639664212642E195, 1.976868146639626E196, -9.084495133765657E196, -1.2023077889892748E196, 5.7455368446308694E197, -1.7766273910482863E198, 3.5590470673352285E198, 1.1304970373249033E199, 1.6496143246803731E199, -2.394588390685223E199, -1.4677321100833294E199, -1.1843870433971731E201, -1.8853982316037226E201, 2.8829871423339434E201, 5.369687677705385E200, 1.8356062677502141E202, -1.5544655377217875E203, 2.955364187248884E203, -2.7651059253677425E203, 9.903174064539538E203, -3.284204788892967E204, -1.5843229740595697E205, 5.333371443528904E204, 1.2781631468016048E205, 3.2188292385399854E205, -6.619064395428225E206, 1.291561142865928E207, 1.3142988156905172E207, -1.3841980097978606E208, 6.380177790989479E207, 1.0386032577072378E209, 2.7681631086098026E209, -9.053874899534375E209, 1.2424707839848734E210, 1.045546633850141E211, -1.2448938139338362E211, 7.221902646057552E211, 6.651345415954053E211, -5.8180712702152444E212, 5.275183961165903E212, 5.092753117288608E212, -2.437796532151255E213, 1.3480763914637323E214, 5.619995933180841E214, 2.547000388735681E214, 4.817319356453926E214, -7.897146442236022E215, -7.93844120619577E215, -4.9489938500591624E216, -2.862720607805682E216, -2.9275804461593914E217, -3.411186219855533E217, -2.0110092718356274E218, -8.472642266772353E218, -4.357990742470246E217, 4.793444363780116E219, 1.6544084224626834E220, -6.017988576347111E220, -3.580397221598409E220, -4.7208848667217906E221, -7.724899660259369E221, -2.4459728627968634E222, 3.667348665023154E221, 4.544122762558404E223, -4.0573420909530794E223, -3.2552002992257195E223, -6.488296536838142E224, 1.7544839352461719E224, -4.0873400635183405E225, -8.833499967268279E225, -1.0953484767704112E226, -8.56825295972308E226, -1.8097633115378247E227, -6.171564449018882E227, -4.351843341274115E227, 2.8032429752543687E228, -1.0065901934522996E229, 9.863720960170636E228, -9.481088691357648E229, -1.6843492713373762E229, -1.3282890219894906E230, 6.883577595238845E230, -1.153577281189635E231, -8.009548754642203E231, -4.722612904888278E232, -4.768909872963015E232, 3.2542391242036633E233, 6.513425781583774E233, -1.8889614379831606E233, -2.227647301474917E234, -4.7971208532986115E234, 6.693500938105557E234, -6.587776621471115E234, 3.0099905634916516E236, -4.6694407626686244E235, 2.965546585110978E236, 5.771457643937893E237, -9.029878114318277E237, 8.169926810324408E237, -1.779945804977441E239, 4.1218749988429474E239, 7.201319954099161E239, -1.530845432304069E240, -3.861762510530086E240, -2.4090696463777446E241, -1.8196842273916379E241, -1.7959243076374794E242, -3.7257346819782323E242, 3.413310324247329E242, -2.0406580894051073E243, -1.5335923091350053E243, -1.056727406551016E244, -4.6753408714233723E244, -2.0697130057384643E245, -1.0356006160554071E245, 1.1339195187304043E246, 1.792783182582235E246, 9.599214853681978E245, 1.5367645598839362E247, 2.934570385464815E247, -1.6411525886171892E248, 2.2638862982382794E248, -1.2268014119628852E249, 4.737693450915584E247, 6.3818993714899675E249, 1.2639113706171572E250, -4.011320021817099E249, -5.2744376732859406E250, -3.732266217624991E251, 1.7591819833844019E252, -3.292458622014749E252, -9.161340309319204E252, -1.728610646009749E253, 1.1698424008604891E254, -1.8494343291160577E254, 2.0568656302182574E254, 1.0537591246531136E255, 1.803052068234866E254, -1.053036399720808E256, 2.1836166619192508E256, 1.0368403169781264E257, -2.0648015610276362E257, 8.426174035728768E257, -1.3577357192972777E258, 2.1313950901331177E258, 8.919141843592823E258, -1.1800039972549816E259, -1.1878772398311421E260, -1.538273497873993E260, -4.51305093266001E260, 1.1241179396053055E261, 6.154786508667658E261, -1.0626125049032536E262, -1.8908603201210102E262, -4.571195152299358E262, 1.526100002923062E263, -9.457084582570225E263, -1.5460500618825853E264, -5.598276199126451E264, -1.2074097381167957E265, -3.015972957475025E265, 1.4345106852061226E265, 8.28479585346867E265, -3.118741081244705E266, -1.2054747399765794E266, 3.4454766202661184E267, 1.1279135096919439E268, 1.2066382528772518E268, 1.1984128162292276E269, 3.685169705587367E268, 6.570047690198998E269, 1.8836492887460383E270, 7.4364594917181125E270, 1.2773080633674971E271, 1.8928981707279692E271, 4.039437286589528E271, 1.785277385538302E272, -6.017681359527226E272, 1.9716943051755635E273, -8.772048092842086E271, 1.5645672698520312E274, -3.7979660725865874E274, 5.324902289537048E274, -1.8806716685063293E274, 9.320900373401115E275, 1.4615985810260016E275, 8.321226457219046E276, -4.608112855795952E276, -3.476352191116455E277, 5.266381689434054E277, -9.622106063561645E277, 4.1719443712336026E278, 4.222411269063919E279, -6.714376022102489E279, -1.0732735585199074E280, -2.5866883048437488E280, -1.1306860837934988E281, 3.690690354793168E281, -5.5299180508885456E281, 2.7006726968568243E282, 4.135457669031131E282, 2.8401159516008676E283, 5.127265762024798E283, -3.4893601256685762E283, -1.145160459652136E283, 2.1742808735341656E284, 4.656972469326391E285, 7.672307991205681E285, 1.5781599575584034E286, 4.218682431618625E286, -2.4602260687026867E287, 2.7211316452521414E287, -1.8740018211089393E288, 2.6367639658206183E288, -3.102678910525039E288, 1.1992295328636466E289, 6.8190133180135345E289, 5.783203879030497E289, 5.171047077293295E290, 1.8396930096213817E290, 1.4977047507315718E290, 1.0672499803427623E292, 3.3310942289102464E291, -7.962256961838823E292, 1.7396889119023863E293, 3.8072183820435085E293, 2.2772059538865722E294, -2.0549866377878678E294, -1.2277120342804144E295, -3.609949022969024E295, 1.1479863663699871E296, -1.5314373779304356E296, -2.2537635160762597E296, -6.1370690793508674E296, -4.996854125490041E297, -6.883499809714189E297, -2.595456638706416E298, -1.1892631528580186E299, -1.4672600326020399E299, -3.200068509818696E299, -7.126913872617518E298, -3.3655587417265094E300, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN]
org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A has only one value
org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A != null
org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A[] == [1.0, 1.0009770393371582, 1.0019550323486328, 1.0029339790344238, 1.0039138793945312, 1.004894733428955, 1.0058765411376953, 1.006859302520752, 1.007843017578125, 1.0088276863098145, 1.0098135471343994, 1.0108001232147217, 1.0117876529693604, 1.0127761363983154, 1.013765811920166, 1.014756202697754, 1.0157477855682373, 1.016740083694458, 1.0177335739135742, 1.0187277793884277, 1.0197231769561768, 1.0207195281982422, 1.021716833114624, 1.0227150917053223, 1.023714303970337, 1.024714469909668, 1.0257158279418945, 1.0267179012298584, 1.0277209281921387, 1.0287251472473145, 1.0297303199768066, 1.0307364463806152, 1.0317435264587402, 1.0327515602111816, 1.0337605476379395, 1.0347704887390137, 1.0357816219329834, 1.0367934703826904, 1.037806510925293, 1.038820505142212, 1.0398354530334473, 1.040851354598999, 1.0418684482574463, 1.0428862571716309, 1.043905258178711, 1.0449252128601074, 1.0459461212158203, 1.0469679832458496, 1.0479910373687744, 1.0490150451660156, 1.0500397682189941, 1.0510656833648682, 1.0520927906036377, 1.0531206130981445, 1.0541496276855469, 1.0551795959472656, 1.0562105178833008, 1.0572423934936523, 1.0582754611968994, 1.059309482574463, 1.0603444576263428, 1.061380386352539, 1.0624175071716309, 1.06345534324646, 1.0644943714141846, 1.0655345916748047, 1.066575527191162, 1.067617654800415, 1.0686607360839844, 1.0697050094604492, 1.0707499980926514, 1.071796178817749, 1.072843313217163, 1.0738916397094727, 1.0749409198760986, 1.075991153717041, 1.0770423412322998, 1.078094720840454, 1.0791480541229248, 1.080202341079712, 1.0812578201293945, 1.0823142528533936, 1.083371639251709, 1.08443021774292, 1.0854897499084473, 1.086550235748291, 1.0876119136810303, 1.088674545288086, 1.089738130569458, 1.0908029079437256, 1.0918686389923096, 1.092935562133789, 1.094003438949585, 1.0950722694396973, 1.096142053604126, 1.0972130298614502, 1.09828519821167, 1.099358320236206, 1.1004323959350586, 1.1015074253082275, 1.102583646774292, 1.103661060333252, 1.1047391891479492, 1.105818748474121, 1.1068990230560303, 1.107980489730835, 1.1090631484985352, 1.1101467609405518, 1.1112313270568848, 1.1123170852661133, 1.1134037971496582, 1.1144917011260986, 1.1155805587768555, 1.1166706085205078, 1.1177616119384766, 1.1188538074493408, 1.1199469566345215, 1.1210410594940186, 1.1221363544464111, 1.1232328414916992, 1.1243302822113037, 1.1254286766052246, 1.126528263092041, 1.127629041671753, 1.1287307739257812, 1.129833459854126, 1.1309373378753662, 1.132042407989502, 1.133148431777954, 1.1342556476593018, 1.1353638172149658, 1.1364731788635254, 1.1375834941864014, 1.1386950016021729, 1.1398074626922607, 1.1409211158752441, 1.142035961151123, 1.1431517601013184, 1.14426851272583, 1.1453864574432373, 1.14650559425354, 1.1476259231567383, 1.148747205734253, 1.149869441986084, 1.1509928703308105, 1.1521174907684326, 1.153243064880371, 1.154369831085205, 1.1554977893829346, 1.1566267013549805, 1.1577568054199219, 1.1588881015777588, 1.160020351409912, 1.161153793334961, 1.1622881889343262, 1.163423776626587, 1.1645605564117432, 1.1656982898712158, 1.166837215423584, 1.1679773330688477, 1.1691184043884277, 1.1702606678009033, 1.1714041233062744, 1.172548532485962, 1.173694133758545, 1.1748409271240234, 1.1759889125823975, 1.177137851715088, 1.1782879829406738, 1.1794393062591553, 1.1805915832519531, 1.1817450523376465, 1.1828997135162354, 1.1840553283691406, 1.1852121353149414, 1.1863701343536377, 1.1875293254852295, 1.1886897087097168, 1.1898510456085205, 1.1910135746002197, 1.1921772956848145, 1.1933419704437256, 1.1945080757141113, 1.1956751346588135, 1.1968433856964111, 1.1980125904083252, 1.1991832256317139, 1.200354814529419, 1.2015275955200195, 1.2027015686035156, 1.2038767337799072, 1.2050528526306152, 1.2062301635742188, 1.2074086666107178, 1.2085883617401123, 1.2097692489624023, 1.210951328277588, 1.2121343612670898, 1.2133188247680664, 1.2145042419433594, 1.2156908512115479, 1.2168786525726318, 1.2180676460266113, 1.2192575931549072, 1.2204489707946777, 1.2216413021087646, 1.222834825515747, 1.224029779434204, 1.2252256870269775, 1.2264227867126465, 1.227621078491211, 1.2288203239440918, 1.2300209999084473, 1.2312228679656982, 1.2324256896972656, 1.2336299419403076, 1.234835147857666, 1.23604154586792, 1.2372493743896484, 1.2384581565856934, 1.2396681308746338, 1.2408792972564697, 1.2420918941497803, 1.2433054447174072, 1.2445201873779297, 1.2457361221313477, 1.2469532489776611, 1.2481715679168701, 1.2493910789489746, 1.2506117820739746, 1.2518336772918701, 1.2530567646026611, 1.2542810440063477, 1.2555065155029297, 1.2567331790924072, 1.2579610347747803, 1.2591900825500488, 1.260420322418213, 1.2616519927978516, 1.2628846168518066, 1.2641184329986572, 1.2653534412384033, 1.266589879989624, 1.2678272724151611, 1.2690660953521729, 1.27030611038208, 1.2715470790863037, 1.272789478302002, 1.2740330696105957, 1.275277853012085, 1.2765238285064697, 1.27777099609375, 1.2790195941925049, 1.2802691459655762, 1.281519889831543, 1.2827720642089844, 1.2840254306793213, 1.2852799892425537, 1.2865357398986816, 1.287792682647705, 1.2890510559082031, 1.2903103828430176, 1.2915711402893066, 1.2928330898284912, 1.2940962314605713, 1.2953605651855469, 1.296626091003418, 1.2978930473327637, 1.2991611957550049, 1.3004305362701416, 1.3017010688781738, 1.3029727935791016, 1.304245948791504, 1.3055200576782227, 1.3067958354949951, 1.308072566986084, 1.3093504905700684, 1.3106298446655273, 1.3119103908538818, 1.3131921291351318, 1.3144752979278564, 1.3157594203948975, 1.317044973373413, 1.3183319568634033, 1.31961989402771, 1.3209092617034912, 1.322199821472168, 1.3234915733337402, 1.324784755706787, 1.3260791301727295, 1.3273746967315674, 1.3286716938018799, 1.329969882965088, 1.3312692642211914, 1.3325698375701904, 1.333871841430664, 1.3351752758026123, 1.336479663848877, 1.3377854824066162, 1.339092493057251, 1.3404009342193604, 1.3417105674743652, 1.3430213928222656, 1.3443336486816406, 1.3456470966339111, 1.3469617366790771, 1.3482778072357178, 1.349595069885254, 1.3509137630462646, 1.352233648300171, 1.3535549640655518, 1.3548774719238281, 1.356201171875, 1.3575263023376465, 1.3588526248931885, 1.360180139541626, 1.361509084701538, 1.3628394603729248, 1.364171028137207, 1.3655037879943848, 1.366837978363037, 1.368173360824585, 1.3695101737976074, 1.3708481788635254, 1.372187614440918, 1.373528242111206, 1.3748703002929688, 1.376213550567627, 1.3775582313537598, 1.378904104232788, 1.380251407623291, 1.3815999031066895, 1.3829498291015625, 1.384300947189331, 1.3856534957885742, 1.387007236480713, 1.3883624076843262, 1.389719009399414, 1.3910768032073975, 1.3924360275268555, 1.393796443939209, 1.395158290863037, 1.3965213298797607, 1.397885799407959, 1.3992514610290527, 1.4006187915802002, 1.401987075805664, 1.4033570289611816, 1.4047281742095947, 1.4061005115509033, 1.4074742794036865, 1.4088494777679443, 1.4102261066436768, 1.4116039276123047, 1.4129831790924072, 1.4143636226654053, 1.415745496749878, 1.4171288013458252, 1.418513298034668, 1.4198992252349854, 1.4212865829467773, 1.4226751327514648, 1.424065351486206, 1.4254565238952637, 1.426849365234375, 1.4282433986663818, 1.4296388626098633, 1.4310357570648193, 1.432433843612671, 1.433833360671997, 1.4352343082427979, 1.4366366863250732, 1.4380402565002441, 1.4394452571868896, 1.4408516883850098, 1.4422595500946045, 1.4436686038970947, 1.4450790882110596, 1.446491003036499, 1.447904348373413, 1.4493188858032227, 1.450735092163086, 1.4521524906158447, 1.4535713195800781, 1.454991340637207, 1.4564130306243896, 1.4578359127044678, 1.4592602252960205, 1.460686206817627, 1.4621131420135498, 1.4635417461395264, 1.4649717807769775, 1.4664030075073242, 1.4678359031677246, 1.4692699909210205, 1.470705509185791, 1.4721424579620361, 1.4735808372497559, 1.475020408630371, 1.47646164894104, 1.4779040813446045, 1.4793481826782227, 1.4807934761047363, 1.4822404384613037, 1.4836885929107666, 1.485138177871704, 1.4865891933441162, 1.488041639328003, 1.4894955158233643, 1.4909508228302002, 1.4924075603485107, 1.493865728378296, 1.4953253269195557, 1.49678635597229, 1.49824857711792, 1.4997124671936035, 1.5011777877807617, 1.5026445388793945, 1.504112720489502, 1.505582332611084, 1.5070531368255615, 1.5085256099700928, 1.5099995136260986, 1.511474847793579, 1.5129516124725342, 1.5144298076629639, 1.5159096717834473, 1.5173907279968262, 1.5188732147216797, 1.5203571319580078, 1.5218427181243896, 1.523329496383667, 1.524817943572998, 1.5263078212738037, 1.5277988910675049, 1.5292916297912598, 1.5307857990264893, 1.5322813987731934, 1.5337786674499512, 1.5352771282196045, 1.5367772579193115, 1.538278579711914, 1.5397815704345703, 1.5412859916687012, 1.5427920818328857, 1.5442993640899658, 1.5458080768585205, 1.547318458557129, 1.548830270767212, 1.5503435134887695, 1.5518584251403809, 1.5533745288848877, 1.5548923015594482, 1.5564115047454834, 1.5579321384429932, 1.5594542026519775, 1.5609779357910156, 1.5625030994415283, 1.5640296936035156, 1.5655577182769775, 1.5670874118804932, 1.5686185359954834, 1.5701510906219482, 1.5716853141784668, 1.5732207298278809, 1.5747578144073486, 1.5762965679168701, 1.577836513519287, 1.5793781280517578, 1.5809214115142822, 1.5824658870697021, 1.5840120315551758, 1.5855598449707031, 1.587108850479126, 1.5886595249176025, 1.5902118682861328, 1.5917654037475586, 1.593320608139038, 1.5948774814605713, 1.596435785293579, 1.5979955196380615, 1.5995566844940186, 1.6011195182800293, 1.6026840209960938, 1.6042497158050537, 1.6058173179626465, 1.6073861122131348, 1.6089565753936768, 1.6105287075042725, 1.6121022701263428, 1.6136772632598877, 1.6152539253234863, 1.6168320178985596, 1.6184117794036865, 1.619992971420288, 1.6215758323669434, 1.6231601238250732, 1.6247460842132568, 1.626333475112915, 1.627922534942627, 1.6295130252838135, 1.6311051845550537, 1.6326987743377686, 1.634294033050537, 1.6358907222747803, 1.6374890804290771, 1.6390891075134277, 1.640690565109253, 1.6422934532165527, 1.6438980102539062, 1.6455042362213135, 1.6471118927001953, 1.6487212181091309, 1.6503322124481201, 1.651944637298584, 1.6535584926605225, 1.6551742553710938, 1.6567914485931396, 1.6584100723266602, 1.6600303649902344, 1.6616523265838623, 1.663275957107544, 1.6649010181427002, 1.666527509689331, 1.6681559085845947, 1.669785737991333, 1.671417236328125, 1.6730501651763916, 1.674684762954712, 1.676321029663086, 1.6779589653015137, 1.679598331451416, 1.681239366531372, 1.6828820705413818, 1.6845262050628662, 1.6861720085144043, 1.687819480895996, 1.6894686222076416, 1.6911191940307617, 1.6927716732025146, 1.6944255828857422, 1.6960809230804443, 1.6977381706237793, 1.6993968486785889, 1.7010571956634521, 1.7027192115783691, 1.7043828964233398, 1.7060482501983643, 1.7077150344848633, 1.709383487701416, 1.7110536098480225, 1.7127254009246826, 1.7143988609313965, 1.716073989868164, 1.7177505493164062, 1.7194287776947021, 1.7211089134216309, 1.7227904796600342, 1.7244737148284912, 1.726158618927002, 1.7278449535369873, 1.7295331954956055, 1.7312231063842773, 1.7329144477844238, 1.7346076965332031, 1.736302375793457, 1.7379989624023438, 1.739696979522705, 1.7413966655731201, 1.7430980205535889, 1.7448012828826904, 1.7465059757232666, 1.7482123374938965, 1.74992036819458, 1.7516300678253174, 1.7533416748046875, 1.7550547122955322, 1.7567694187164307, 1.7584857940673828, 1.7602040767669678, 1.7619237899780273, 1.7636451721191406, 1.7653684616088867, 1.7670931816101074, 1.768819808959961, 1.770547866821289, 1.77227783203125, 1.7740094661712646, 1.775742769241333, 1.777477741241455, 1.7792143821716309, 1.7809526920318604, 1.7826926708221436, 1.7844345569610596, 1.7861778736114502, 1.7879230976104736, 1.7896699905395508, 1.7914185523986816, 1.7931687831878662, 1.7949209213256836, 1.7966744899749756, 1.7984299659729004, 1.800187110900879, 1.8019459247589111, 1.8037066459655762, 1.8054687976837158, 1.8072328567504883, 1.8089985847473145, 1.8107659816741943, 1.812535285949707, 1.8143062591552734, 1.8160789012908936, 1.8178532123565674, 1.819629430770874, 1.8214070796966553, 1.8231868743896484, 1.8249680995941162, 1.8267512321472168, 1.828536033630371, 1.830322504043579, 1.83211088180542, 1.8339009284973145, 1.8356926441192627, 1.8374862670898438, 1.8392815589904785, 1.841078519821167, 1.8428773880004883, 1.8446779251098633, 1.846480131149292, 1.8482842445373535, 1.8500902652740479, 1.8518977165222168, 1.8537070751190186, 1.8555183410644531, 1.8573312759399414, 1.8591458797454834, 1.8609623908996582, 1.8627805709838867, 1.864600658416748, 1.866422414779663, 1.8682458400726318, 1.8700714111328125, 1.8718984127044678, 1.8737273216247559, 1.8755581378936768, 1.8773906230926514, 1.8792247772216797, 1.8810608386993408, 1.8828988075256348, 1.8847384452819824, 1.886579990386963, 1.888423204421997, 1.890268325805664, 1.8921151161193848, 1.8939638137817383, 1.8958141803741455, 1.8976664543151855, 1.8995206356048584, 1.901376485824585, 1.9032342433929443, 1.9050939083099365, 1.9069552421569824, 1.908818244934082, 1.9106833934783936, 1.9125502109527588, 1.9144186973571777, 1.9162893295288086, 1.9181616306304932, 1.9200356006622314, 1.9219114780426025, 1.9237892627716064, 1.9256689548492432, 1.9275505542755127, 1.929433822631836, 1.931318759918213, 1.9332058429718018, 1.9350945949554443, 1.9369852542877197, 1.938877820968628, 1.940772294998169, 1.9426684379577637, 1.9445664882659912, 1.9464664459228516, 1.9483680725097656, 1.9502718448638916, 1.9521772861480713, 1.9540846347808838, 1.955993890762329, 1.9579050540924072, 1.959817886352539, 1.9617326259613037, 1.9636495113372803, 1.9655680656433105, 1.9674885272979736, 1.9694106578826904, 1.9713349342346191, 1.9732608795166016, 1.975188970565796, 1.977118730545044, 1.9790503978729248, 1.9809842109680176, 1.982919692993164, 1.9848570823669434, 1.9867963790893555, 1.9887375831604004, 1.990680456161499, 1.9926254749298096, 1.994572401046753, 1.996521234512329, 1.998471736907959, 2.000424385070801, 2.0023789405822754, 2.004335403442383, 2.006293773651123, 2.008254051208496, 2.010216236114502, 2.0121798515319824, 2.014145851135254, 2.016113758087158, 2.0180835723876953, 2.0200552940368652, 2.022029399871826, 2.0240049362182617, 2.02598237991333, 2.0279617309570312, 2.0299429893493652, 2.0319266319274902, 2.03391170501709, 2.0358991622924805, 2.0378880500793457, 2.039879322052002, 2.041872501373291, 2.0438671112060547, 2.0458641052246094, 2.047863006591797, 2.049863815307617, 2.0518670082092285, 2.0538716316223145, 2.055878162384033, 2.057887077331543, 2.0598974227905273, 2.0619101524353027, 2.063924789428711, 2.065941333770752, 2.067959785461426, 2.0699801445007324, 2.07200288772583, 2.0740270614624023, 2.0760536193847656, 2.0780820846557617, 2.0801124572753906, 2.0821447372436523, 2.084178924560547, 2.0862154960632324, 2.0882534980773926, 2.0902938842773438, 2.0923361778259277, 2.0943803787231445, 2.0964269638061523, 2.0984749794006348, 2.100525379180908, 2.1025776863098145, 2.1046319007873535, 2.1066884994506836, 2.1087465286254883, 2.110806941986084, 2.1128692626953125, 2.114933490753174, 2.117000102996826, 2.1190686225891113, 2.1211390495300293, 2.12321138381958, 2.1252856254577637, 2.1273622512817383, 2.1294407844543457, 2.131521224975586, 2.133604049682617, 2.135688304901123, 2.13777494430542, 2.139863967895508, 2.1419544219970703, 2.144047260284424, 2.14614200592041, 2.1482391357421875, 2.1503376960754395, 2.1524391174316406, 2.1545419692993164, 2.156647205352783, 2.1587538719177246, 2.1608633995056152, 2.1629743576049805, 2.1650876998901367, 2.167203426361084, 2.169320583343506, 2.1714401245117188, 2.1735615730285645, 2.175685405731201, 2.1778111457824707, 2.179938793182373, 2.1820688247680664, 2.1842007637023926, 2.1863350868225098, 2.1884708404541016, 2.1906094551086426, 2.192749500274658, 2.194891929626465, 2.1970362663269043, 2.1991829872131348, 2.201331615447998, 2.2034826278686523, 2.2056355476379395, 2.2077903747558594, 2.2099475860595703, 2.212106704711914, 2.214268207550049, 2.2164316177368164, 2.218596935272217, 2.220764636993408, 2.2229342460632324, 2.2251062393188477, 2.2272801399230957, 2.2294564247131348, 2.2316346168518066, 2.2338151931762695, 2.2359976768493652, 2.2381820678710938, 2.2403693199157715, 2.242558002471924, 2.244749069213867, 2.2469425201416016, 2.2491378784179688, 2.2513351440429688, 2.2535347938537598, 2.2557363510131836, 2.2579402923583984, 2.2601466178894043, 2.262354850769043, 2.2645654678344727, 2.266777992248535, 2.2689924240112305, 2.271209716796875, 2.273428440093994, 2.2756495475769043, 2.2778730392456055, 2.2800989151000977, 2.2823266983032227, 2.2845563888549805, 2.2867884635925293, 2.289022922515869, 2.291259288787842, 2.2934980392456055, 2.295738697052002, 2.2979817390441895, 2.300227165222168, 2.3024744987487793, 2.3047242164611816, 2.306975841522217, 2.309229850769043, 2.31148624420166, 2.31374454498291, 2.316005229949951, 2.318267822265625, 2.32053279876709, 2.3228001594543457, 2.3250694274902344, 2.3273415565490723, 2.3296151161193848, 2.3318915367126465, 2.334169864654541, 2.3364500999450684, 2.338733196258545, 2.3410181999206543, 2.3433055877685547, 2.345594882965088, 2.347886562347412, 2.3501806259155273, 2.3524770736694336, 2.3547754287719727, 2.3570761680603027, 2.3593788146972656, 2.3616843223571777, 2.3639917373657227, 2.3663015365600586, 2.3686132431030273, 2.370927333831787, 2.373243808746338, 2.3755626678466797, 2.3778839111328125, 2.380207061767578, 2.3825325965881348, 2.3848605155944824, 2.387190818786621, 2.3895230293273926, 2.391857624053955, 2.3941946029663086, 2.396533966064453, 2.3988752365112305, 2.401218891143799, 2.4035654067993164, 2.4059133529663086, 2.40826416015625, 2.4106173515319824, 2.4129724502563477, 2.415329933166504, 2.417689800262451, 2.4200520515441895, 2.4224166870117188, 2.424783229827881, 2.427152633666992, 2.4295239448547363, 2.4318976402282715, 2.4342737197875977, 2.436652183532715, 2.439032554626465, 2.441415786743164, 2.4438014030456543, 2.4461889266967773, 2.4485788345336914, 2.4509711265563965, 2.4533658027648926, 2.4557628631591797, 2.458162307739258, 2.460564136505127, 2.462968349456787, 2.46537446975708, 2.4677834510803223, 2.4701943397521973, 2.4726080894470215, 2.4750237464904785, 2.4774417877197266, 2.479862689971924, 2.482285499572754, 2.484710693359375, 2.487138271331787, 2.4895682334899902, 2.4920010566711426, 2.4944357872009277, 2.496872901916504, 2.499312400817871, 2.5017542839050293, 2.5041985511779785, 2.5066452026367188, 2.50909423828125, 2.5115456581115723, 2.5139999389648438, 2.516456127166748, 2.5189146995544434, 2.5213756561279297, 2.5238394737243652, 2.5263051986694336, 2.528773307800293, 2.5312442779541016, 2.533717155456543, 2.5361928939819336, 2.538670539855957, 2.5411510467529297, 2.5436339378356934, 2.546119213104248, 2.5486068725585938, 2.5510969161987305, 2.553589344024658, 2.556084632873535, 2.558581829071045, 2.5610814094543457, 2.5635838508605957, 2.5660886764526367, 2.5685958862304688, 2.571105480194092, 2.573617458343506, 2.576131820678711, 2.5786490440368652, 2.5811686515808105, 2.5836901664733887, 2.586214542388916, 2.5887417793273926, 2.591270923614502, 2.5938024520874023, 2.596336841583252, 2.5988736152648926, 2.601412773132324, 2.603954315185547, 2.6064987182617188, 2.6090455055236816, 2.6115946769714355, 2.6141462326049805, 2.6167001724243164, 2.6192569732666016, 2.6218161582946777, 2.624377727508545, 2.626941680908203, 2.6295084953308105, 2.632077217102051, 2.6346492767333984, 2.637223243713379, 2.6398000717163086, 2.6423792839050293, 2.644960880279541, 2.6475448608398438, 2.6501317024230957, 2.6527209281921387, 2.655313014984131, 2.657907009124756, 2.6605043411254883, 2.6631035804748535, 2.665705680847168, 2.6683101654052734, 2.67091703414917, 2.6735267639160156, 2.6761388778686523, 2.67875337600708, 2.681370735168457, 2.683990478515625, 2.686613082885742, 2.689237594604492, 2.6918654441833496, 2.69449520111084, 2.6971278190612793, 2.699763298034668, 2.7024011611938477, 2.7050414085388184, 2.70768404006958, 2.710329532623291, 2.712977886199951, 2.7156286239624023, 2.7182817459106445]
org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A[] sorted by <
org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B has only one value
org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B != null
org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B[] == [0.0, 1.552583321178453E-10, 1.2423699995465188E-9, 4.194022929828008E-9, 9.94381632344361E-9, 1.9426261544163577E-8, 3.3576783010266685E-8, 5.3331719086630523E-8, 7.962832297769345E-8, 1.1340476362128895E-7, -8.281845251820919E-8, -3.126416414805498E-8, 3.058997113995161E-8, 1.0368579417304741E-7, -4.9452513107409435E-8, 4.8955889659397494E-8, -7.698155155722897E-8, 5.051784853384516E-8, -4.443661736519001E-8, 1.1593958457401774E-7, 5.575759739697068E-8, 1.4385227981629147E-8, -7.227368462584163E-9, -8.129108387083023E-9, 1.263202100290635E-8, 5.600896265625552E-8, -1.154629885168314E-7, -2.399186832888246E-8, 9.295948298604103E-8, -2.070841011504222E-9, -6.97066538508643E-8, -1.0898941254272996E-7, -1.1895963756343625E-7, -9.865691193993138E-8, -4.711988033385175E-8, 3.6613751875298095E-8, -8.491135959370133E-8, 6.610611940107793E-8, 1.3794148633283659E-8, -2.462631860370667E-9, 1.830278273495162E-8, 7.705834203598065E-8, -6.364563771711373E-8, 7.39978436695387E-8, 1.4122417557484554E-8, -3.881598887298574E-9, 2.0958481826069642E-8, 8.96162975425619E-8, -3.535214171178576E-8, -1.1455271549574576E-7, 9.140964977432485E-8, 1.0667524445105459E-7, -6.777752790396222E-8, 4.586785041291296E-8, -2.8245462428022094E-8, -5.071761314397018E-8, -2.0566368810068663E-8, 6.319146317890346E-8, -3.687854305539139E-8, -8.137269363160008E-8, -6.930491127388755E-8, 3.1184473002226595E-10, -1.0995299963140049E-7, 7.772668425499348E-8, 8.750367485925089E-8, -7.963112393823186E-8, 5.415131809829094E-8, 1.3006683896462346E-8, 3.634736373360733E-8, -1.132504393233074E-7, 4.2046187038837375E-8, 2.6396811618001066E-8, 7.92177143584738E-8, -3.691100820545433E-8, -8.257112559083188E-8, -5.676200971739166E-8, 4.151794514828518E-8, -2.5147255753587636E-8, -1.7335469415174996E-8, 6.595784859136531E-8, -1.2680354928109105E-8, -1.3824992526093461E-8, 6.353142754175797E-8, -1.8021197722549054E-8, -1.9054827792903468E-8, 6.144098503892116E-8, -1.3940903373095247E-8, -5.7694907599522404E-9, 8.696863522320578E-8, 2.6869297963554945E-8, 5.3366470162689076E-8, -7.094204160127543E-8, -1.0662027949814858E-7, -5.26498707801063E-8, 9.198855229106814E-8, 8.989677431456647E-8, -5.790384407322479E-8, -1.1197236522467887E-7, -7.12854317090566E-8, 6.51813137650059E-8, 6.003465022483798E-8, -8.569906238528267E-8, 1.0584469687624562E-7, -7.956144278281947E-8, 7.43676272093501E-8, 9.182512565315022E-8, -2.6157563728873715E-8, -4.012947040998503E-8, 5.094280572218447E-8, 9.675095351161728E-9, 7.552139802281006E-8, 1.1099566726533146E-8, 5.58656252899437E-8, -2.756054703800197E-8, 2.791018095971047E-10, -9.799351869734466E-8, -8.291832428736212E-8, 4.654720780112994E-8, 5.302803981406403E-8, -6.243126731995636E-8, -6.036655299348577E-8, 6.026878587378257E-8, 6.210379583313526E-8, -5.381287389094251E-8, -4.8012970400697E-8, 8.055420567281602E-8, 9.452180117175641E-8, -5.057430382371206E-9, 2.1288872215266507E-8, -6.380305844689076E-8, -2.0858800984600168E-8, -8.724006061713588E-8, -2.3470351753125604E-8, -6.690931338790221E-8, 2.192160831263035E-8, 5.6648446166177225E-9, -1.1461755745719884E-7, -9.944393412663547E-8, 5.2249837964645906E-8, 1.0311034276196487E-7, 5.4203784018566126E-8, -9.340259278913173E-8, -1.0022192034216903E-7, 3.481513333662908E-8, 7.436036590244714E-8, 1.9485199912395296E-8, 1.0968068384729757E-7, 1.0760175582979094E-7, 1.4322981952798675E-8, 6.933855730431659E-8, 3.530656968851287E-8, -8.669526204279467E-8, -5.7169586962345785E-8, -1.1345515834332824E-7, -1.605251622332555E-8, -2.298302779758532E-9, -7.110952399338234E-8, 1.70164513845372E-8, 2.4746155561368937E-8, -4.6834239957353325E-8, 4.1781076667923185E-8, 5.326182134294869E-8, -1.1302647617762544E-8, 8.759667154796094E-8, 1.126326877851684E-7, 6.48979555673987E-8, -5.451390316294111E-8, -6.0896188500539086E-9, -2.7152010585461855E-8, -1.1660424775832058E-7, -3.492984900939992E-8, -1.944841848873016E-8, -6.905990750285027E-8, 5.575538653428039E-8, 1.1768108384670781E-7, 1.178204606523101E-7, 5.727787111340131E-8, -6.284125161007433E-8, -3.0118152047565877E-9, -5.448044533034374E-10, -5.433154287341921E-8, 7.515630833946181E-8, -8.780756503572527E-8, -6.527407547535494E-8, -9.45487863616303E-8, 6.390098458668406E-8, -6.564672913105876E-8, -5.238488022920792E-9, 7.824500749252316E-9, -2.5339299158309795E-8, -1.036103313062145E-7, 1.2550633697348567E-8, 8.584676196065558E-8, 1.1740089468291563E-7, 1.0833697012353316E-7, 5.978002467397905E-8, -2.7143806069290897E-8, 8.711129287069315E-8, -7.316349947981893E-8, -3.00015852582934E-8, -2.0691000399732483E-8, -4.4100097152254264E-8, -9.909612209943178E-8, 5.38733640215475E-8, -6.0893829005035E-8, 3.457553391989844E-8, 1.0300006058273187E-7, -9.290053015365092E-8, -7.514966995961323E-8, -8.10254145615142E-8, -1.0938612624777085E-7, 7.932952721989251E-8, 9.428257290008738E-9, -7.952636967837795E-8, 5.203033137154554E-8, -7.159157201731446E-8, 2.7593424989059015E-8, 1.1231621190000476E-7, -5.469119869891027E-8, 4.560067256086347E-9, 5.280427179595944E-8, 9.119538242455128E-8, -1.1753008498403413E-7, -9.537874867759656E-8, -7.96118345325538E-8, -6.907085854395348E-8, -6.259620482221904E-8, -5.902712448725381E-8, -5.720173456146447E-8, -5.5957016861703E-8, -5.412881689012608E-8, -5.0551842723970724E-8, -4.405966390424518E-8, -3.348471032333413E-8, -1.7658271111516935E-8, 4.589506477601956E-9, 3.4429618182751655E-8, 7.303420385174346E-8, -1.168420305422519E-7, -5.718749537552229E-8, 1.4754809136835937E-8, 1.001616104682875E-7, -3.8207793300052055E-8, 7.766278405014509E-8, -2.7883635712109803E-8, -1.1524714043067699E-7, 5.517333625963128E-8, 7.724278756071081E-9, -1.7990934773848504E-8, -2.0786347668702902E-8, 5.251554594269693E-10, 4.7131849857076246E-8, -1.1819540733893871E-7, -1.742885956093543E-8, 1.1220467571570283E-7, 3.347954541376715E-8, -1.399157980498908E-8, -2.9013441705763093E-8, -1.0389614239253089E-8, 4.307749759934266E-8, -1.0583192018912101E-7, 2.0919226941745448E-8, -5.2305110482722706E-8, -8.588407110184028E-8, -7.861419797923639E-8, -2.929085835358592E-8, 6.329175751021792E-8, -3.807794163054899E-8, -9.377320954068088E-8, -1.0258469865953145E-7, -6.330187984612758E-8, 2.5286958775281306E-8, -7.40238661307607E-8, 1.1681688445204168E-7, -1.1623125976292733E-7, -5.6696107089038004E-8, 5.822140627806124E-8, -8.678466172071259E-9, -1.7757121899175995E-8, 3.220665454652531E-8, -9.598330731102836E-8, 7.573375369829243E-8, 7.174547784678893E-8, -1.0672213971363184E-7, 1.8395252217743006E-8, -2.8511112548600118E-8, -7.79306270997787E-9, 8.178019529487065E-8, 3.0220784595602374E-9, -4.4156343103298585E-9, 6.07014616741277E-8, -3.8809601937571554E-8, -6.329342805230603E-8, -1.1511990258493999E-8, 1.177739474561431E-7, 8.738625278484571E-8, -1.0143341551207646E-7, 2.9394972678456236E-8, 4.278345398213486E-9, 6.28805835150457E-8, -3.197037359731606E-8, -4.060821046423735E-8, 3.82160283750664E-8, -3.2666060441373307E-8, -1.3584500601329896E-8, 9.671332777035621E-8, 6.10626893063691E-8, 1.1913723189736356E-7, 3.3774671482641995E-8, 4.4651109654500895E-8, -8.539328154875224E-8, -1.166799420361101E-7, -4.794765976694151E-8, -1.1635256954820579E-7, -8.221241452580445E-8, 5.5737717715868425E-8, 6.034539636024073E-8, -6.712199323081945E-8, -8.697724830833087E-8, 2.0494942705297694E-9, -3.718924074653624E-8, 3.499747150995707E-8, -1.8535359161566028E-8, 4.1905679587096103E-8, -2.0821912536551675E-8, 3.297776915751238E-8, -3.3835280846270374E-8, 1.8437339356553904E-8, -4.734187609526424E-8, 8.527976799299225E-9, -5.1088103279787804E-8, 1.3513294656751725E-8, -3.480032127343472E-8, 4.367697180842916E-8, 1.1815196363705356E-8, 1.0932279207149782E-7, 9.907230065250944E-8, -1.764389559496152E-8, -1.1135725625095859E-9, -8.846040040259342E-8, -3.996962588736431E-8, -9.276238757878814E-8, -7.12139818505956E-9, -2.016525972830718E-8, 1.0782585410141121E-7, -9.868269632073771E-8, 7.686861750031585E-8, -7.947087669425045E-8, -8.955768055535647E-8, 4.791582240886607E-8, 9.583994718167641E-8, 5.5524866689108584E-8, -7.171796605211277E-8, -4.6157237582310713E-8, -1.0489751005162237E-7, -8.204903560604627E-9, 6.818588687884566E-9, -5.850916105103205E-8, 3.5549586192569994E-8, 5.1896700056778354E-8, -8.146080588190463E-9, 9.516285362051742E-8, -1.1368933260611668E-7, 8.187871486648885E-8, -3.206182925646474E-8, 2.265440168347286E-8, 8.938334752179552E-9, -7.187922490287331E-8, 1.9952407216533937E-8, 4.734805892507655E-8, 1.1642439930208906E-8, -8.582843599651953E-8, -5.3086706437795354E-9, 1.6121782610217253E-8, -2.0197142620980974E-8, -1.129242035557684E-7, -2.2298267863810133E-8, 1.4605950309628873E-8, -8.663710700190489E-10, -6.736873974532501E-8, 5.486523121881414E-8, -1.0965249168570443E-7, -8.27343074126263E-8, -1.0144703278439455E-7, 7.39809943048038E-8, -3.193297932837415E-8, 5.900393284617182E-8, 1.0973020465397083E-7, -1.1681436418514489E-7, 9.5985669644661E-8, 3.423560333632085E-8, -6.22836197265283E-8, 4.621027492345726E-8, -1.1575484316683829E-7, -6.997545435826076E-8, -5.3502441327259514E-8, -6.49667713553005E-8, -1.029980741248172E-7, 7.219393868923887E-8, -1.4854841678687828E-8, 1.1406713393562271E-7, -1.650155887561251E-8, 7.165331603232264E-8, -9.692697614257269E-8, -4.402550702194912E-8, -6.679737442193143E-9, 1.6492800268960003E-8, 2.68759245092879E-8, 2.5854805721793077E-8, 1.4815967715704613E-8, -4.852711011229633E-9, -3.176199594915881E-8, -6.452129525125173E-8, -1.01738658407525E-7, 9.639780418418697E-8, 5.4445606140746644E-8, 1.2219361033150988E-8, -2.8883532688356087E-8, -6.746431126005811E-8, -1.0212284427080097E-7, 1.0696094577483825E-7, 8.43527683868743E-8, 6.987544103716777E-8, 6.493457409236137E-8, 7.093715125593688E-8, 8.929153091001965E-8, -1.1701113164306871E-7, -6.972256643013266E-8, -5.848862070736576E-9, 7.602385197610123E-8, -6.110775144284437E-8, 6.101012058093429E-8, -3.304167134225169E-8, -1.0342514383702196E-7, 8.969907328603505E-8, 7.091600108064668E-8, 8.006778743052707E-8, 1.1857939200074815E-7, -5.0541412403312774E-8, 5.0970277930552287E-8, -5.229355472795119E-8, 1.1793478462381443E-7, 8.625007227318527E-8, 9.250422086873268E-8, -1.0028661472061573E-7, -1.384914052949463E-8, 1.1483560326413004E-7, 4.878798101459259E-8, 2.7866921183936055E-8, 5.3514180410849046E-8, -1.1124565511436785E-7, 1.186914813275767E-8, -5.253258132241335E-8, -6.458486486369316E-8, -2.2838888809969377E-8, 7.415557606805398E-8, -1.0568403170659571E-8, -3.7139182948393606E-8, -4.1022790876160215E-9, 8.999821367768787E-8, 8.201043988912348E-9, -9.616457442665051E-9, 3.8005886250603055E-8, -8.588890051473289E-8, 9.699937202692456E-8, 1.11298006674538E-7, -4.1527104733570825E-8, 1.1682852007826251E-7, 1.1099648061301941E-7, -5.755303038890997E-8, 8.948877445235827E-8, 7.675780395028194E-8, -9.427143563390596E-8, 5.471416081500162E-8, 4.8354824064383506E-8, -1.118706134478866E-7, 5.235528379688445E-8, 6.567708120053687E-8, -7.042204992948526E-8, -1.1603891006723397E-7, -6.968742825553785E-8, 7.01199184127881E-8, 6.645352711199266E-8, -7.919617109348822E-8, 1.1149986927391714E-7, -7.522074418324674E-8, 7.739252980388984E-8, 9.39987974788905E-8, -2.390421480210064E-8, -3.639873824357815E-8, 5.8015881615938497E-8, 2.2423186335040668E-8, 9.674534330665206E-8, 4.4068830785712375E-8, 1.0431875573076199E-7, 4.0584538834428926E-8, 9.279423236781974E-8, 2.404020521381534E-8, 7.425346071427343E-8, 6.529321706138789E-9, 6.080174837146273E-8, 1.6902327633329284E-10, 6.456806922371733E-8, 1.7100134295216033E-8, 9.770510970673519E-8, 6.94872148530716E-8, -6.602926393514549E-8, -6.889997193778161E-8, 6.240235720677117E-8, 9.098790295810902E-8, 1.8386917534879182E-8, 8.454972737414241E-8, 5.259099728747365E-8, -7.595453077213505E-8, -6.113203624663034E-8, 9.859622328905143E-8, -7.206766550807255E-8, -9.474579567171831E-8, 3.210408693366267E-8, 7.160716418525417E-8, 2.530870537724554E-8, -1.0524451040704701E-7, -8.008561371849434E-8, 1.0233519853128553E-7, -3.326791455362767E-8, -8.504961764629757E-9, -6.024017201863256E-8, 5.1500902632092514E-8, 8.98570720774568E-8, 5.638724693948384E-8, -4.734813904255994E-8, 1.8631451577542948E-8, 1.7470924137873214E-8, -4.926470933588261E-8, 5.84096713620797E-8, 1.0364355880696472E-7, 8.800655674349468E-8, 1.3069802481237792E-8, 1.1882454749452428E-7, -6.999215748398631E-8, -7.49674072510849E-8, 1.054760847603618E-7, -3.920012014371067E-9, 7.526183084319617E-8, 1.0618494853096868E-7, 9.043280094115832E-8, 2.9590395068826316E-8, -7.475571347653619E-8, 1.7401160143611842E-8, 6.923209420670962E-8, 8.232829924979753E-8, 5.82825404854514E-8, -1.3108606792380822E-9, -9.485602512220194E-8, 1.7663064617118723E-8, 9.942682855652123E-8, -8.638275100090915E-8, -6.132639063569726E-8, -6.221897889344726E-8, -8.745525834919404E-8, 1.029901759234897E-7, 3.3888561478632076E-8, -5.47315553588771E-8, 7.715994473741065E-8, -4.566098167230033E-8, 5.5257514455273825E-8, -9.530545662611411E-8, -1.889488909834863E-8, 4.769006625301079E-8, 1.0607041998938709E-7, -8.054981263802322E-8, -3.370929373457322E-8, 9.799164177397836E-9, 5.160291611526656E-8, 9.333090708652975E-8, -1.0180490545927503E-7, -5.533523366931846E-8, -4.044932340334176E-9, 5.370131904567218E-8, -1.1887814032213867E-7, -4.3307634616102625E-8, 4.363437558318513E-8, -9.482896784430338E-8, 1.9782818312325887E-8, -8.77224935488516E-8, 6.113879253864931E-8, -8.822335132515693E-9, -5.753754066078771E-8, -8.335545536862392E-8, -8.462309712606694E-8, -5.968586877433824E-8, -6.887556547891059E-9, 7.542967150507818E-8, -4.949331199790077E-8, 9.684172421525468E-8, 3.9260317944365246E-8, 1.784536881359796E-8, 3.426282345243592E-8, 9.018025618601154E-8, -5.1151708476133135E-8, 8.877492215808044E-8, 3.479545684576179E-8, 2.7002575714977818E-8, 6.707201545505014E-8, -8.173742908533777E-8, 5.909041310777802E-8, 1.439903710393587E-8, 2.4289317341982113E-8, 9.044519282818302E-8, -2.3866331257845713E-8, -7.853944465095286E-8, -7.188526769607005E-8, -2.2132706360079843E-9, -1.0624985110080394E-7, 9.453598391231829E-8, -1.134160131581847E-7, -1.315295870404327E-8, -7.981320644583728E-8, -7.327771300038971E-8, 8.155647334672472E-9, -7.222791579580787E-8, -7.430436987497092E-8, 3.633404807819848E-9, -7.512438321498593E-8, -7.044869765481105E-8, 1.9372589859580955E-8, -4.2365298585101096E-8, -1.552830824758035E-8, 1.0160071259930585E-7, 7.232201430620959E-8, -1.0164389431039905E-7, 5.826233477413577E-8, 7.6927415825689E-8, -4.392309439525734E-8, -6.414337408955734E-8, 1.799550702470095E-8, -3.4194410638967946E-8, 1.9437762419688045E-8, -5.7792549966531335E-8, -2.5731071572354522E-8, 1.173595905705643E-7, -1.0361863127101014E-7, 2.8330789837569332E-8, 3.81131861433539E-8, -7.252724942149532E-8, -6.342604067787756E-8, 6.716441526213986E-8, 8.257484966196574E-8, -1.5443717968117592E-8, 1.3280021798948244E-8, -6.79180673261558E-8, -1.8863249269709046E-8, -7.62162303263991E-8, 2.011589233663723E-10, -2.62683511147141E-8, 8.455684903712996E-8, 9.602293320384794E-8, 9.896378545255258E-9, 6.636396724067746E-8, 2.8777050870552646E-8, -1.0109271059094341E-7, -8.305334708631055E-8, 8.467026501338835E-8, -7.29821745001452E-8, -7.739491336852633E-8, 7.321238022013781E-8, -9.621538067089515E-8, -1.0705722541811197E-7, 4.247240125405735E-8, 1.1574222007764044E-7, 1.145412771487496E-7, 4.066036653218687E-8, -1.0410796803072171E-7, -7.955085231106037E-8, 1.1612776191572459E-7, 7.888519481107568E-9, 7.436813814737735E-8, 7.894935661289349E-8, 2.343525263620692E-8, -9.036933434595339E-8, -2.2239222395888823E-8, -8.784622656707742E-9, -4.819540032304379E-8, 9.975892708522332E-8, -3.9945124955316294E-8, 1.1345047468988893E-8, 1.702808472925844E-8, -2.10770182066344E-8, -1.0114948914089626E-7, 1.70518021921727E-8, 9.693260855961159E-8, -9.809953482725758E-8, -8.937957126662392E-8, -1.134963954323427E-7, 6.980004387880031E-8, -1.4494150014095534E-8, 1.122932337832262E-7, -2.483811732227808E-8, 5.278759515330048E-8, 1.0859222881334994E-7, -9.400056055939758E-8, -7.630957994128623E-8, -7.490757191850264E-8, -8.794689652049879E-8, -1.1357810855950775E-7, 8.846862323478745E-8, 4.32092015744956E-8, -9.082923009890997E-9, -6.655106680680314E-8, 1.1108184705020206E-7, 4.8838973948592766E-8, -1.2998975819628988E-8, -7.25680516883106E-8, -1.280024819379844E-7, -1.7743467191652895E-7, -2.1899520225809197E-7, 2.2602433110285232E-7, 2.0582268590356215E-7, 1.9911192455808124E-7, 2.0776878313278689E-7, 2.3367183133931002E-7, -1.9813568387704588E-7, -1.320972037315105E-7, -4.316580502355056E-8, 7.054443447243064E-8, 2.109212796025238E-7, -9.698281856949837E-8, 1.0239791185239086E-7, -1.4271754202157014E-7, 1.232402895636637E-7, -5.150590480969644E-8, -1.882201085012735E-7, 1.918355503889933E-7, 1.368893262241355E-7, 1.256828068633383E-7, 1.601222826656464E-7, -2.3472125169205568E-7, -1.032634625827871E-7, 7.957037517331382E-8, -1.6114314525832115E-7, 1.3018591370778052E-7, 1.8007284821359149E-9, -6.75421764491544E-8, -7.592155950645605E-8, -2.1414301981236817E-8, 9.79045937979623E-8, -1.9287515190177685E-7, 6.184953843236509E-8, -8.966500602352001E-8, -1.686490951669855E-7, -1.7316830893872364E-7, -1.0128633727463388E-7, 4.8935021740786486E-8, -1.9740129448026905E-7, 1.1532102163380318E-7, 3.5371542244169364E-8, 4.153321337726989E-8, 1.3575372396796738E-7, -1.5685449228299222E-7, 1.1933437776279623E-7, 1.2599421120614435E-8, 1.7331079674066365E-9, 8.869266069401045E-8, -2.013999442282902E-7, 8.709065843311144E-8, 2.453117120472083E-9, 2.3489472779602617E-8, 1.5216652792122652E-7, -8.638415150333099E-8, -2.1335475961524608E-7, -2.2677272333821516E-7, -1.246635423141374E-7, 9.494921297991565E-8, -4.27932550865546E-8, -5.907349480138712E-8, 4.809072216941908E-8, -1.9615359732789476E-7, 1.6385396676990034E-7, 1.7642714221524228E-7, -1.564440844355254E-7, 1.2090653407564583E-7, 5.679855838941285E-8, 1.3006497185242537E-7, -1.341336085949317E-7, 2.1987686050231372E-7, -2.3641341460419062E-7, -7.048932272279454E-8, -2.3401958604540354E-7, 2.2867766559333004E-7, -1.1089952719756529E-7, 1.7977178878541792E-7, 1.4903074102418675E-7, -2.011072593789072E-7, 8.504948422097802E-8, 5.5846006716348844E-8, 1.9014079059505456E-7, 1.3119976852347583E-8, 3.645999732952202E-9, 1.6374611405314333E-7, 1.8612397134087598E-8, 4.7113225346448296E-8, -2.2555535676499395E-7, 1.5631615647329739E-7, -2.3574653182047758E-7, 3.08072210937242E-8, 4.344259288116142E-9, 1.6374489573868447E-7, 3.42171232580676E-8, 9.46452492584643E-8, -1.297587351085525E-7, -1.601065201853145E-7, 5.6550495386976275E-9, -1.0725602261510391E-7, -1.9945408945084193E-8, -2.071910882200156E-7, -1.900947109027913E-7, 3.34069282059055E-8, -1.145810806477298E-8, 1.5421457732308477E-7, 5.5657084775121975E-8, 1.7177785285061278E-7, 2.7813027425289027E-8, 1.0267509648109748E-7, -7.839574072711142E-8, -3.648293887796095E-8, 2.3049492079013518E-7, -2.290530257391564E-7, 1.747018414872141E-8, 1.8477759656842807E-8, -2.2394073401050633E-7, -2.3085653185818848E-7, -1.7598351175286083E-10, -6.640551220774385E-9, 2.2868466674913266E-7, 2.3106230530437902E-7, 2.594209135294356E-9, 2.2221434720602702E-8, -1.847872222755186E-7, -1.3948659218254467E-7, 1.6023339607737848E-7, -2.3718944120137026E-7, 1.0087056692827474E-7, 2.228553660510707E-7, 1.3088328582956644E-7, -1.7292527438195104E-7, -2.0961068531216087E-7, 2.2951597845188004E-8, 5.005103745740068E-8, -1.2618366811281002E-7, -2.6784582477238417E-8, -1.2645600379949252E-7, 5.3774170051560117E-8, 3.9205810725333715E-8, -1.6802196396307013E-7, -8.893078799284047E-8, -1.9821451970481713E-7, -1.689060694498032E-8, -1.9648717830943396E-8, -2.0433926409457167E-7, -9.1973399031975E-8, -1.5723449006087263E-7, 7.887051614592191E-8, 1.4166246290402286E-7, 3.330146018487787E-8, 2.3278688667580978E-7, -2.1139124097042925E-7, 1.334449995534113E-7, -1.6104730195920897E-7, -1.3902314592614197E-7, 2.0169027167169864E-7, -9.040643863751471E-8, -5.946190852360168E-8, -1.8013411720005014E-7, 2.6595401669835947E-8, 8.607292924069425E-8, 4.84038176769263E-10, -2.2798356346688802E-7, -1.203028719549339E-7, -1.5111906039270745E-7, 1.5859915617670956E-7, -1.426262681506497E-7, -9.892260062323546E-8, -1.8492643515928268E-7, 7.840210076743552E-8, 2.1643071541578027E-7, 2.313664294893465E-7, 1.2541842003811723E-7, -9.920197743470107E-8, 3.655589133934081E-8, 5.807052689551411E-8, -3.244024724169575E-8, -2.327564406466327E-7, -6.38187356721971E-8, -2.3995994000400915E-10, -3.9793609609721186E-8, -1.802510054588344E-7, 5.745586744591196E-8, 1.987228872666507E-7, -2.3105188606976847E-7, 2.0088042407239129E-7, 6.624793114025702E-8, -1.5587043044056635E-7, 1.3606464059428694E-8, 1.0008761540741556E-7, 1.058213771597129E-7, 3.3058299602856804E-8, -1.1594886810010702E-7, 1.378919824418909E-7, -1.5683631181406778E-7, -4.4200075770425176E-8, 1.2250985436706623E-9, -1.8297013058336644E-8, -1.005004229646318E-7, 2.337202285991116E-7, 3.296104292035678E-8, -2.23668185816307E-7, -5.7055442971184756E-8, 5.82391923137467E-8, 1.244950238958056E-7, 1.4399358260219398E-7, 1.1901862840583523E-7, 5.1856152603337505E-8, -5.520562000491495E-8, -1.9987622893254038E-7, 9.697418238031897E-8, -1.1603376405901542E-7, 1.170714288147407E-7, -1.550851303094034E-7, 2.3472546699189522E-8, 1.78211222185955E-7, -1.6540009048230807E-7, -5.137865010872577E-8, 4.57490653163866E-8, 1.2829599363166098E-7, 1.985773325073412E-7, -2.1792661654989742E-7, -1.652218131743459E-7, -1.178234251477505E-7, -7.34071933723896E-8, -2.9646587857612632E-8, 1.5787194498912167E-8, 6.52252321321176E-8, 1.2100088103262734E-7, 1.8544977697201776E-7, -2.159273204728711E-7, -1.2711589287782304E-7, -2.2610609958205195E-8, 9.993330547750349E-8, -2.33974236642384E-7, -6.830955860192377E-8, 1.2244183812423448E-7, -1.3620325027706252E-7, 1.1178574689680927E-7, -8.490693031052439E-8, 2.2975389535985893E-7, 1.0445707500867073E-7, 1.8405243253979117E-8, -2.6033812325397097E-8, -2.6489990728664908E-8, 1.9409124727247465E-8, 1.1403826867020365E-7, -2.1706266226554237E-7, -1.7839974359909697E-8, 2.3725087624341041E-7, 7.37567604176979E-8, -2.9098805266958403E-8, -6.892713087722722E-8, -4.333719263537725E-8, 5.006436936098099E-8, 2.1367325342138113E-7, -2.6949659655907758E-8, -1.9256682968755803E-7, 1.960616287777496E-7, 1.876664741413704E-7, -2.1534486893602122E-7, -5.688830723853217E-8, 1.8861113228746644E-7, 4.6730779443102234E-8, -3.275360514112964E-9, 4.1011920825226876E-8, 1.820141955326842E-7, -5.468175655175594E-8, -1.8981247089866317E-7, -2.209492705846306E-7, -1.4566110577298295E-7, 3.848544860465368E-8, -1.429109630340783E-7, -2.105749999899302E-7, -1.6206609756618993E-7, 5.058693461947143E-9, -1.8359244902596882E-7, 2.2810251664891242E-7, -1.8791776732592608E-7, 1.3106843166204263E-9, -1.5543153797220025E-7, -1.7884997059081524E-7, -6.648490725635754E-8, 1.8412576154421806E-7, 9.860939269906055E-8, 1.5627006743114285E-7, -1.17260039161597E-7, 2.3416513526430908E-7, -2.1749172296989992E-7, -3.9242560971295217E-8, -1.822826971477839E-7, -1.6729355321895212E-7, 8.208715337901827E-9, -1.301267783434537E-7, -1.029741755377153E-7, 9.215765583599035E-8, -1.907487641016455E-8, 4.2661388254716074E-8, -1.9697226735187428E-7, 2.1819935527247946E-7, -1.398318929248588E-7, 1.6195123407015624E-7, 1.723826394935661E-7, -1.0602700638269148E-7, -1.9392742205954563E-7, -8.880302882034106E-8, 2.1186420987133E-7, 2.3375763256988976E-7, -2.0599801342241997E-8, -7.184550924856607E-8, 8.254840070367875E-8]
org.apache.commons.math.util.FastMath.FACT has only one value
org.apache.commons.math.util.FastMath.FACT != null
org.apache.commons.math.util.FastMath.FACT[] == [1.0, 1.0, 2.0, 6.0, 24.0, 120.0, 720.0, 5040.0, 40320.0, 362880.0, 3628800.0, 3.99168E7, 4.790016E8, 6.2270208E9, 8.71782912E10, 1.307674368E12, 2.0922789888E13, 3.55687428096E14, 6.402373705728E15, 1.21645100408832E17]
org.apache.commons.math.util.FastMath.FACT[] elements >= 1.0
org.apache.commons.math.util.FastMath.FACT[] sorted by <=
org.apache.commons.math.util.FastMath.LN_MANT has only one value
org.apache.commons.math.util.FastMath.LN_MANT != null
org.apache.commons.math.util.FastMath.LN_MANT.getClass().getName() == double[][].class
org.apache.commons.math.util.FastMath.LN_MANT[] contains no nulls and has only one value, of length 1024
org.apache.commons.math.util.FastMath.LN_MANT[] elements != null
org.apache.commons.math.util.FastMath.LN_SPLIT_COEF has only one value
org.apache.commons.math.util.FastMath.LN_SPLIT_COEF != null
org.apache.commons.math.util.FastMath.LN_SPLIT_COEF[] contains no nulls and has only one value, of length 16
org.apache.commons.math.util.FastMath.LN_SPLIT_COEF[] elements != null
org.apache.commons.math.util.FastMath.LN_QUICK_COEF has only one value
org.apache.commons.math.util.FastMath.LN_QUICK_COEF != null
org.apache.commons.math.util.FastMath.LN_QUICK_COEF[] contains no nulls and has only one value, of length 9
org.apache.commons.math.util.FastMath.LN_QUICK_COEF[] elements != null
org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF has only one value
org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF != null
org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[] contains no nulls and has only one value, of length 6
org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[] elements != null
org.apache.commons.math.util.FastMath.SINE_TABLE_A has only one value
org.apache.commons.math.util.FastMath.SINE_TABLE_A != null
org.apache.commons.math.util.FastMath.SINE_TABLE_A[] == [0.0, 0.1246747374534607, 0.24740394949913025, 0.366272509098053, 0.4794255495071411, 0.5850973129272461, 0.6816387176513672, 0.7675435543060303, 0.8414709568023682, 0.902267575263977, 0.9489846229553223, 0.9808930158615112, 0.9974949359893799, 0.9985313415527344]
org.apache.commons.math.util.FastMath.SINE_TABLE_A[] sorted by <
org.apache.commons.math.util.FastMath.SINE_TABLE_B has only one value
org.apache.commons.math.util.FastMath.SINE_TABLE_B != null
org.apache.commons.math.util.FastMath.SINE_TABLE_B[] == [0.0, -4.068233003401932E-9, 9.755392680573412E-9, 1.9987994582857286E-8, -1.0902938113007961E-8, -3.9986783938944604E-8, 4.23719669792332E-8, -5.207000323380292E-8, 2.800552834259E-8, 1.883511811213715E-8, -3.5997360512765566E-9, 4.116164446561962E-8, 5.0614674548127384E-8, -1.0129027912496858E-9]
org.apache.commons.math.util.FastMath.COSINE_TABLE_A has only one value
org.apache.commons.math.util.FastMath.COSINE_TABLE_A != null
org.apache.commons.math.util.FastMath.COSINE_TABLE_A[] == [1.0, 0.9921976327896118, 0.9689123630523682, 0.9305076599121094, 0.8775825500488281, 0.8109631538391113, 0.7316888570785522, 0.6409968137741089, 0.5403022766113281, 0.4311765432357788, 0.3153223395347595, 0.19454771280288696, 0.07073719799518585, -0.05417713522911072]
org.apache.commons.math.util.FastMath.COSINE_TABLE_A[] elements != 0
org.apache.commons.math.util.FastMath.COSINE_TABLE_A[] sorted by >
org.apache.commons.math.util.FastMath.COSINE_TABLE_B has only one value
org.apache.commons.math.util.FastMath.COSINE_TABLE_B != null
org.apache.commons.math.util.FastMath.COSINE_TABLE_B[] == [0.0, 3.4439717236742845E-8, 5.865827662008209E-8, -3.7999795083850525E-8, 1.184154459111628E-8, -3.43338934259355E-8, 1.1795268640216787E-8, 4.438921624363781E-8, 2.925681159240093E-8, -2.6437112632041807E-8, 2.2860509143963117E-8, -4.813899778443457E-9, 3.6725170580355583E-9, 2.0217439756338078E-10]
org.apache.commons.math.util.FastMath.TANGENT_TABLE_A has only one value
org.apache.commons.math.util.FastMath.TANGENT_TABLE_A != null
org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[] == [0.0, 0.1256551444530487, 0.25534194707870483, 0.3936265707015991, 0.5463024377822876, 0.7214844226837158, 0.9315965175628662, 1.1974215507507324, 1.5574076175689697, 2.092571258544922, 3.0095696449279785, 5.041914939880371, 14.101419448852539, -18.430862426757812]
org.apache.commons.math.util.FastMath.TANGENT_TABLE_B has only one value
org.apache.commons.math.util.FastMath.TANGENT_TABLE_B != null
org.apache.commons.math.util.FastMath.TANGENT_TABLE_B[] == [0.0, -7.877917738262007E-9, -2.5857668567479893E-8, 5.2240336371356666E-9, 5.206150291559893E-8, 1.8307188599677033E-8, -5.7618793749770706E-8, 7.848361555046424E-8, 1.0708593250394448E-7, 1.7827257129423813E-8, 2.893485277253286E-8, 3.1660099222737955E-7, 4.983191803254889E-7, -3.356118100840571E-7]
org.apache.commons.math.util.FastMath.RECIP_2PI has only one value
org.apache.commons.math.util.FastMath.RECIP_2PI != null
org.apache.commons.math.util.FastMath.RECIP_2PI[] == [2935890503282001226, 9154082963658192752, 3952090531849364496, 9193070505571053912, 7910884519577875640, 113236205062349959, 4577762542105553359, -5034868814120038111, 4208363204685324176, 5648769086999809661, 2819561105158720014, -4035746434778044925, -302932621132653753, -2644281811660520851, -3183605296591799669, 6722166367014452318, -3512299194304650054, -7278142539171889152]
org.apache.commons.math.util.FastMath.PI_O_4_BITS has only one value
org.apache.commons.math.util.FastMath.PI_O_4_BITS != null
org.apache.commons.math.util.FastMath.PI_O_4_BITS[] == [-3958705157555305932, -4267615245585081135]
org.apache.commons.math.util.FastMath.PI_O_4_BITS[] elements one of { -4267615245585081135L, -3958705157555305932L }
org.apache.commons.math.util.FastMath.PI_O_4_BITS[] sorted by >
org.apache.commons.math.util.FastMath.EIGHTHS has only one value
org.apache.commons.math.util.FastMath.EIGHTHS != null
org.apache.commons.math.util.FastMath.EIGHTHS[] == [0.0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625]
org.apache.commons.math.util.FastMath.EIGHTHS[] sorted by <
org.apache.commons.math.util.FastMath.CBRTTWO has only one value
org.apache.commons.math.util.FastMath.CBRTTWO != null
org.apache.commons.math.util.FastMath.CBRTTWO[] == [0.6299605249474366, 0.7937005259840998, 1.0, 1.2599210498948732, 1.5874010519681994]
org.apache.commons.math.util.FastMath.CBRTTWO[] sorted by <
size(org.apache.commons.math.util.FastMath.EXP_INT_TABLE_A[]) == 1500
size(org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A[]) == 1025
size(org.apache.commons.math.util.FastMath.FACT[]) == 20
size(org.apache.commons.math.util.FastMath.LN_SPLIT_COEF[]) == 16
size(org.apache.commons.math.util.FastMath.LN_QUICK_COEF[]) == 9
size(org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[]) == 6
size(org.apache.commons.math.util.FastMath.SINE_TABLE_A[]) == 14
size(org.apache.commons.math.util.FastMath.RECIP_2PI[]) == 18
size(org.apache.commons.math.util.FastMath.PI_O_4_BITS[]) == 2
org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A[] elements < org.apache.commons.math.util.FastMath.PI
org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B[] elements < org.apache.commons.math.util.FastMath.PI
org.apache.commons.math.util.FastMath.SINE_TABLE_A[] elements < org.apache.commons.math.util.FastMath.PI
org.apache.commons.math.util.FastMath.SINE_TABLE_B[] elements < org.apache.commons.math.util.FastMath.PI
org.apache.commons.math.util.FastMath.COSINE_TABLE_A[] elements < org.apache.commons.math.util.FastMath.PI
org.apache.commons.math.util.FastMath.COSINE_TABLE_B[] elements < org.apache.commons.math.util.FastMath.PI
org.apache.commons.math.util.FastMath.TANGENT_TABLE_B[] elements < org.apache.commons.math.util.FastMath.PI
org.apache.commons.math.util.FastMath.EIGHTHS[] elements < org.apache.commons.math.util.FastMath.PI
org.apache.commons.math.util.FastMath.CBRTTWO[] elements < org.apache.commons.math.util.FastMath.PI
org.apache.commons.math.util.FastMath.E in org.apache.commons.math.util.FastMath.EXP_INT_TABLE_A[]
org.apache.commons.math.util.FastMath.E in org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A[]
org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A[] elements <= org.apache.commons.math.util.FastMath.E
org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B[] elements < org.apache.commons.math.util.FastMath.E
org.apache.commons.math.util.FastMath.SINE_TABLE_A[] elements < org.apache.commons.math.util.FastMath.E
org.apache.commons.math.util.FastMath.SINE_TABLE_B[] elements < org.apache.commons.math.util.FastMath.E
org.apache.commons.math.util.FastMath.COSINE_TABLE_A[] elements < org.apache.commons.math.util.FastMath.E
org.apache.commons.math.util.FastMath.COSINE_TABLE_B[] elements < org.apache.commons.math.util.FastMath.E
org.apache.commons.math.util.FastMath.TANGENT_TABLE_B[] elements < org.apache.commons.math.util.FastMath.E
org.apache.commons.math.util.FastMath.EIGHTHS[] elements < org.apache.commons.math.util.FastMath.E
org.apache.commons.math.util.FastMath.CBRTTWO[] elements < org.apache.commons.math.util.FastMath.E
org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A[] > org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B[] (elementwise)
org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A[] elements > org.apache.commons.math.util.FastMath.LN_2_A
org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A[] elements > org.apache.commons.math.util.FastMath.LN_2_B
org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A[] elements < org.apache.commons.math.util.FastMath.TWO_POWER_52
org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B[] elements < org.apache.commons.math.util.FastMath.LN_2_A
org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B[] elements < org.apache.commons.math.util.FastMath.TWO_POWER_52
org.apache.commons.math.util.FastMath.FACT[] elements > org.apache.commons.math.util.FastMath.LN_2_A
org.apache.commons.math.util.FastMath.FACT[] elements > org.apache.commons.math.util.FastMath.LN_2_B
org.apache.commons.math.util.FastMath.LN_MANT.getClass().getName() == org.apache.commons.math.util.FastMath.LN_SPLIT_COEF.getClass().getName()
org.apache.commons.math.util.FastMath.LN_MANT.getClass().getName() == org.apache.commons.math.util.FastMath.LN_QUICK_COEF.getClass().getName()
org.apache.commons.math.util.FastMath.LN_MANT.getClass().getName() == org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF.getClass().getName()
org.apache.commons.math.util.FastMath.SINE_TABLE_B[] elements < org.apache.commons.math.util.FastMath.LN_2_A
org.apache.commons.math.util.FastMath.COSINE_TABLE_B[] elements < org.apache.commons.math.util.FastMath.LN_2_A
org.apache.commons.math.util.FastMath.TANGENT_TABLE_B[] elements < org.apache.commons.math.util.FastMath.LN_2_A
org.apache.commons.math.util.FastMath.SINE_TABLE_B[] elements < org.apache.commons.math.util.FastMath.LN_2_B
org.apache.commons.math.util.FastMath.COSINE_TABLE_B[] elements < org.apache.commons.math.util.FastMath.LN_2_B
org.apache.commons.math.util.FastMath.CBRTTWO[] elements > org.apache.commons.math.util.FastMath.LN_2_B
org.apache.commons.math.util.FastMath.SINE_TABLE_A[] >= org.apache.commons.math.util.FastMath.SINE_TABLE_B[] (elementwise)
org.apache.commons.math.util.FastMath.SINE_TABLE_A[] >= org.apache.commons.math.util.FastMath.COSINE_TABLE_B[] (elementwise)
org.apache.commons.math.util.FastMath.SINE_TABLE_A[] >= org.apache.commons.math.util.FastMath.TANGENT_TABLE_B[] (elementwise)
org.apache.commons.math.util.FastMath.SINE_TABLE_A[] <= org.apache.commons.math.util.FastMath.EIGHTHS[] (elementwise)
org.apache.commons.math.util.FastMath.SINE_TABLE_A[] elements < org.apache.commons.math.util.FastMath.TWO_POWER_52
org.apache.commons.math.util.FastMath.SINE_TABLE_B[] <= org.apache.commons.math.util.FastMath.EIGHTHS[] (elementwise)
org.apache.commons.math.util.FastMath.SINE_TABLE_B[] elements < org.apache.commons.math.util.FastMath.TWO_POWER_52
org.apache.commons.math.util.FastMath.COSINE_TABLE_A[] elements < org.apache.commons.math.util.FastMath.TWO_POWER_52
org.apache.commons.math.util.FastMath.COSINE_TABLE_B[] <= org.apache.commons.math.util.FastMath.EIGHTHS[] (elementwise)
org.apache.commons.math.util.FastMath.COSINE_TABLE_B[] elements < org.apache.commons.math.util.FastMath.TWO_POWER_52
org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[] elements < org.apache.commons.math.util.FastMath.TWO_POWER_52
org.apache.commons.math.util.FastMath.TANGENT_TABLE_B[] <= org.apache.commons.math.util.FastMath.EIGHTHS[] (elementwise)
org.apache.commons.math.util.FastMath.TANGENT_TABLE_B[] elements < org.apache.commons.math.util.FastMath.TWO_POWER_52
org.apache.commons.math.util.FastMath.PI_O_4_BITS[] elements < org.apache.commons.math.util.FastMath.HEX_40000000
org.apache.commons.math.util.FastMath.PI_O_4_BITS[] elements < org.apache.commons.math.util.FastMath.MASK_30BITS
org.apache.commons.math.util.FastMath.PI_O_4_BITS[] elements < size(org.apache.commons.math.util.FastMath.EXP_INT_TABLE_A[])-1
org.apache.commons.math.util.FastMath.PI_O_4_BITS[] elements < size(org.apache.commons.math.util.FastMath.FACT[])-1
org.apache.commons.math.util.FastMath.PI_O_4_BITS[] elements < size(org.apache.commons.math.util.FastMath.LN_MANT[])-1
org.apache.commons.math.util.FastMath.PI_O_4_BITS[] elements < size(org.apache.commons.math.util.FastMath.LN_SPLIT_COEF[])-1
org.apache.commons.math.util.FastMath.PI_O_4_BITS[] elements < size(org.apache.commons.math.util.FastMath.LN_QUICK_COEF[])-1
org.apache.commons.math.util.FastMath.PI_O_4_BITS[] elements < size(org.apache.commons.math.util.FastMath.SINE_TABLE_A[])-1
org.apache.commons.math.util.FastMath.PI_O_4_BITS[] elements < size(org.apache.commons.math.util.FastMath.RECIP_2PI[])-1
org.apache.commons.math.util.FastMath.PI_O_4_BITS[] elements < size(org.apache.commons.math.util.FastMath.PI_O_4_BITS[])-1
org.apache.commons.math.util.FastMath.PI_O_4_BITS[] elements < size(org.apache.commons.math.util.FastMath.CBRTTWO[])-1
org.apache.commons.math.util.FastMath.EIGHTHS[] elements < org.apache.commons.math.util.FastMath.TWO_POWER_52
org.apache.commons.math.util.FastMath.CBRTTWO[] elements < org.apache.commons.math.util.FastMath.TWO_POWER_52
===========================================================================
org.apache.commons.math.util.FastMath.abs(double):::ENTER
x >= -1.0
org.apache.commons.math.util.FastMath.PI != x
org.apache.commons.math.util.FastMath.E != x
org.apache.commons.math.util.FastMath.LN_2_A != x
org.apache.commons.math.util.FastMath.LN_2_B != x
org.apache.commons.math.util.FastMath.TWO_POWER_52 != x
===========================================================================
org.apache.commons.math.util.FastMath.abs(double):::EXIT
org.apache.commons.math.util.FastMath.EXP_INT_TABLE_A == orig(org.apache.commons.math.util.FastMath.EXP_INT_TABLE_A)
org.apache.commons.math.util.FastMath.EXP_INT_TABLE_A[] == orig(org.apache.commons.math.util.FastMath.EXP_INT_TABLE_A[])
org.apache.commons.math.util.FastMath.EXP_INT_TABLE_B == orig(org.apache.commons.math.util.FastMath.EXP_INT_TABLE_B)
org.apache.commons.math.util.FastMath.EXP_INT_TABLE_B[] == orig(org.apache.commons.math.util.FastMath.EXP_INT_TABLE_B[])
org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A == orig(org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A)
org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A[] == orig(org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A[])
org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B == orig(org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B)
org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B[] == orig(org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B[])
org.apache.commons.math.util.FastMath.FACT == orig(org.apache.commons.math.util.FastMath.FACT)
org.apache.commons.math.util.FastMath.FACT[] == orig(org.apache.commons.math.util.FastMath.FACT[])
org.apache.commons.math.util.FastMath.LN_MANT == orig(org.apache.commons.math.util.FastMath.LN_MANT)
org.apache.commons.math.util.FastMath.LN_MANT[] == orig(org.apache.commons.math.util.FastMath.LN_MANT[])
org.apache.commons.math.util.FastMath.LN_SPLIT_COEF == orig(org.apache.commons.math.util.FastMath.LN_SPLIT_COEF)
org.apache.commons.math.util.FastMath.LN_SPLIT_COEF[] == orig(org.apache.commons.math.util.FastMath.LN_SPLIT_COEF[])
org.apache.commons.math.util.FastMath.LN_QUICK_COEF == orig(org.apache.commons.math.util.FastMath.LN_QUICK_COEF)
org.apache.commons.math.util.FastMath.LN_QUICK_COEF[] == orig(org.apache.commons.math.util.FastMath.LN_QUICK_COEF[])
org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF == orig(org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF)
org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[] == orig(org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[])
org.apache.commons.math.util.FastMath.SINE_TABLE_A == orig(org.apache.commons.math.util.FastMath.SINE_TABLE_A)
org.apache.commons.math.util.FastMath.SINE_TABLE_A[] == orig(org.apache.commons.math.util.FastMath.SINE_TABLE_A[])
org.apache.commons.math.util.FastMath.SINE_TABLE_B == orig(org.apache.commons.math.util.FastMath.SINE_TABLE_B)
org.apache.commons.math.util.FastMath.SINE_TABLE_B[] == orig(org.apache.commons.math.util.FastMath.SINE_TABLE_B[])
org.apache.commons.math.util.FastMath.COSINE_TABLE_A == orig(org.apache.commons.math.util.FastMath.COSINE_TABLE_A)
org.apache.commons.math.util.FastMath.COSINE_TABLE_A[] == orig(org.apache.commons.math.util.FastMath.COSINE_TABLE_A[])
org.apache.commons.math.util.FastMath.COSINE_TABLE_B == orig(org.apache.commons.math.util.FastMath.COSINE_TABLE_B)
org.apache.commons.math.util.FastMath.COSINE_TABLE_B[] == orig(org.apache.commons.math.util.FastMath.COSINE_TABLE_B[])
org.apache.commons.math.util.FastMath.TANGENT_TABLE_A == orig(org.apache.commons.math.util.FastMath.TANGENT_TABLE_A)
org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[] == orig(org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[])
org.apache.commons.math.util.FastMath.TANGENT_TABLE_B == orig(org.apache.commons.math.util.FastMath.TANGENT_TABLE_B)
org.apache.commons.math.util.FastMath.TANGENT_TABLE_B[] == orig(org.apache.commons.math.util.FastMath.TANGENT_TABLE_B[])
org.apache.commons.math.util.FastMath.RECIP_2PI == orig(org.apache.commons.math.util.FastMath.RECIP_2PI)
org.apache.commons.math.util.FastMath.RECIP_2PI[] == orig(org.apache.commons.math.util.FastMath.RECIP_2PI[])
org.apache.commons.math.util.FastMath.PI_O_4_BITS == orig(org.apache.commons.math.util.FastMath.PI_O_4_BITS)
org.apache.commons.math.util.FastMath.PI_O_4_BITS[] == orig(org.apache.commons.math.util.FastMath.PI_O_4_BITS[])
org.apache.commons.math.util.FastMath.EIGHTHS == orig(org.apache.commons.math.util.FastMath.EIGHTHS)
org.apache.commons.math.util.FastMath.EIGHTHS[] == orig(org.apache.commons.math.util.FastMath.EIGHTHS[])
org.apache.commons.math.util.FastMath.CBRTTWO == orig(org.apache.commons.math.util.FastMath.CBRTTWO)
org.apache.commons.math.util.FastMath.CBRTTWO[] == orig(org.apache.commons.math.util.FastMath.CBRTTWO[])
size(org.apache.commons.math.util.FastMath.EXP_INT_TABLE_A[]) == orig(size(org.apache.commons.math.util.FastMath.EXP_INT_TABLE_B[]))
size(org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A[]) == orig(size(org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B[]))
size(org.apache.commons.math.util.FastMath.LN_MANT[]) == orig(size(org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A[]))-1
size(org.apache.commons.math.util.FastMath.LN_MANT[]) == orig(size(org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B[]))-1
size(org.apache.commons.math.util.FastMath.SINE_TABLE_A[]) == orig(size(org.apache.commons.math.util.FastMath.SINE_TABLE_B[]))
size(org.apache.commons.math.util.FastMath.SINE_TABLE_A[]) == orig(size(org.apache.commons.math.util.FastMath.COSINE_TABLE_A[]))
size(org.apache.commons.math.util.FastMath.SINE_TABLE_A[]) == orig(size(org.apache.commons.math.util.FastMath.COSINE_TABLE_B[]))
size(org.apache.commons.math.util.FastMath.SINE_TABLE_A[]) == orig(size(org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[]))
size(org.apache.commons.math.util.FastMath.SINE_TABLE_A[]) == orig(size(org.apache.commons.math.util.FastMath.TANGENT_TABLE_B[]))
size(org.apache.commons.math.util.FastMath.SINE_TABLE_A[]) == orig(size(org.apache.commons.math.util.FastMath.EIGHTHS[]))
size(org.apache.commons.math.util.FastMath.CBRTTWO[]) == orig(size(org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[]))-1
org.apache.commons.math.util.FastMath.PI != return
org.apache.commons.math.util.FastMath.E != return
org.apache.commons.math.util.FastMath.LN_MANT.getClass().getName() == orig(org.apache.commons.math.util.FastMath.LN_MANT.getClass().getName())
org.apache.commons.math.util.FastMath.LN_MANT.getClass().getName() == orig(org.apache.commons.math.util.FastMath.LN_SPLIT_COEF.getClass().getName())
org.apache.commons.math.util.FastMath.LN_MANT.getClass().getName() == orig(org.apache.commons.math.util.FastMath.LN_QUICK_COEF.getClass().getName())
org.apache.commons.math.util.FastMath.LN_MANT.getClass().getName() == orig(org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF.getClass().getName())
org.apache.commons.math.util.FastMath.LN_2_A != return
org.apache.commons.math.util.FastMath.LN_2_B != return
org.apache.commons.math.util.FastMath.TWO_POWER_52 != return
===========================================================================
org.apache.commons.math.util.FastMath.buildSinCosTables():::ENTER
===========================================================================
org.apache.commons.math.util.FastMath.buildSinCosTables():::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.ceil(double):::ENTER
x == 32.0
===========================================================================
org.apache.commons.math.util.FastMath.ceil(double):::EXIT3727
===========================================================================
org.apache.commons.math.util.FastMath.ceil(double):::EXIT
org.apache.commons.math.util.FastMath.EXP_INT_TABLE_A == orig(org.apache.commons.math.util.FastMath.EXP_INT_TABLE_A)
org.apache.commons.math.util.FastMath.EXP_INT_TABLE_A[] == orig(org.apache.commons.math.util.FastMath.EXP_INT_TABLE_A[])
org.apache.commons.math.util.FastMath.EXP_INT_TABLE_B == orig(org.apache.commons.math.util.FastMath.EXP_INT_TABLE_B)
org.apache.commons.math.util.FastMath.EXP_INT_TABLE_B[] == orig(org.apache.commons.math.util.FastMath.EXP_INT_TABLE_B[])
org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A == orig(org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A)
org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A[] == orig(org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A[])
org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B == orig(org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B)
org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B[] == orig(org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B[])
org.apache.commons.math.util.FastMath.FACT == orig(org.apache.commons.math.util.FastMath.FACT)
org.apache.commons.math.util.FastMath.FACT[] == orig(org.apache.commons.math.util.FastMath.FACT[])
org.apache.commons.math.util.FastMath.LN_MANT == orig(org.apache.commons.math.util.FastMath.LN_MANT)
org.apache.commons.math.util.FastMath.LN_MANT[] == orig(org.apache.commons.math.util.FastMath.LN_MANT[])
org.apache.commons.math.util.FastMath.LN_SPLIT_COEF == orig(org.apache.commons.math.util.FastMath.LN_SPLIT_COEF)
org.apache.commons.math.util.FastMath.LN_SPLIT_COEF[] == orig(org.apache.commons.math.util.FastMath.LN_SPLIT_COEF[])
org.apache.commons.math.util.FastMath.LN_QUICK_COEF == orig(org.apache.commons.math.util.FastMath.LN_QUICK_COEF)
org.apache.commons.math.util.FastMath.LN_QUICK_COEF[] == orig(org.apache.commons.math.util.FastMath.LN_QUICK_COEF[])
org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF == orig(org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF)
org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[] == orig(org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[])
org.apache.commons.math.util.FastMath.SINE_TABLE_A == orig(org.apache.commons.math.util.FastMath.SINE_TABLE_A)
org.apache.commons.math.util.FastMath.SINE_TABLE_A[] == orig(org.apache.commons.math.util.FastMath.SINE_TABLE_A[])
org.apache.commons.math.util.FastMath.SINE_TABLE_B == orig(org.apache.commons.math.util.FastMath.SINE_TABLE_B)
org.apache.commons.math.util.FastMath.SINE_TABLE_B[] == orig(org.apache.commons.math.util.FastMath.SINE_TABLE_B[])
org.apache.commons.math.util.FastMath.COSINE_TABLE_A == orig(org.apache.commons.math.util.FastMath.COSINE_TABLE_A)
org.apache.commons.math.util.FastMath.COSINE_TABLE_A[] == orig(org.apache.commons.math.util.FastMath.COSINE_TABLE_A[])
org.apache.commons.math.util.FastMath.COSINE_TABLE_B == orig(org.apache.commons.math.util.FastMath.COSINE_TABLE_B)
org.apache.commons.math.util.FastMath.COSINE_TABLE_B[] == orig(org.apache.commons.math.util.FastMath.COSINE_TABLE_B[])
org.apache.commons.math.util.FastMath.TANGENT_TABLE_A == orig(org.apache.commons.math.util.FastMath.TANGENT_TABLE_A)
org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[] == orig(org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[])
org.apache.commons.math.util.FastMath.TANGENT_TABLE_B == orig(org.apache.commons.math.util.FastMath.TANGENT_TABLE_B)
org.apache.commons.math.util.FastMath.TANGENT_TABLE_B[] == orig(org.apache.commons.math.util.FastMath.TANGENT_TABLE_B[])
org.apache.commons.math.util.FastMath.RECIP_2PI == orig(org.apache.commons.math.util.FastMath.RECIP_2PI)
org.apache.commons.math.util.FastMath.RECIP_2PI[] == orig(org.apache.commons.math.util.FastMath.RECIP_2PI[])
org.apache.commons.math.util.FastMath.PI_O_4_BITS == orig(org.apache.commons.math.util.FastMath.PI_O_4_BITS)
org.apache.commons.math.util.FastMath.PI_O_4_BITS[] == orig(org.apache.commons.math.util.FastMath.PI_O_4_BITS[])
org.apache.commons.math.util.FastMath.EIGHTHS == orig(org.apache.commons.math.util.FastMath.EIGHTHS)
org.apache.commons.math.util.FastMath.EIGHTHS[] == orig(org.apache.commons.math.util.FastMath.EIGHTHS[])
org.apache.commons.math.util.FastMath.CBRTTWO == orig(org.apache.commons.math.util.FastMath.CBRTTWO)
org.apache.commons.math.util.FastMath.CBRTTWO[] == orig(org.apache.commons.math.util.FastMath.CBRTTWO[])
return == orig(x)
size(org.apache.commons.math.util.FastMath.EXP_INT_TABLE_A[]) == orig(size(org.apache.commons.math.util.FastMath.EXP_INT_TABLE_B[]))
size(org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A[]) == orig(size(org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B[]))
size(org.apache.commons.math.util.FastMath.LN_MANT[]) == orig(size(org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A[]))-1
size(org.apache.commons.math.util.FastMath.LN_MANT[]) == orig(size(org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B[]))-1
size(org.apache.commons.math.util.FastMath.SINE_TABLE_A[]) == orig(size(org.apache.commons.math.util.FastMath.SINE_TABLE_B[]))
size(org.apache.commons.math.util.FastMath.SINE_TABLE_A[]) == orig(size(org.apache.commons.math.util.FastMath.COSINE_TABLE_A[]))
size(org.apache.commons.math.util.FastMath.SINE_TABLE_A[]) == orig(size(org.apache.commons.math.util.FastMath.COSINE_TABLE_B[]))
size(org.apache.commons.math.util.FastMath.SINE_TABLE_A[]) == orig(size(org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[]))
size(org.apache.commons.math.util.FastMath.SINE_TABLE_A[]) == orig(size(org.apache.commons.math.util.FastMath.TANGENT_TABLE_B[]))
size(org.apache.commons.math.util.FastMath.SINE_TABLE_A[]) == orig(size(org.apache.commons.math.util.FastMath.EIGHTHS[]))
size(org.apache.commons.math.util.FastMath.CBRTTWO[]) == orig(size(org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[]))-1
return == 32.0
org.apache.commons.math.util.FastMath.LN_MANT.getClass().getName() == orig(org.apache.commons.math.util.FastMath.LN_MANT.getClass().getName())
org.apache.commons.math.util.FastMath.LN_MANT.getClass().getName() == orig(org.apache.commons.math.util.FastMath.LN_SPLIT_COEF.getClass().getName())
org.apache.commons.math.util.FastMath.LN_MANT.getClass().getName() == orig(org.apache.commons.math.util.FastMath.LN_QUICK_COEF.getClass().getName())
org.apache.commons.math.util.FastMath.LN_MANT.getClass().getName() == orig(org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF.getClass().getName())
===========================================================================
org.apache.commons.math.util.FastMath.expint(int, double[]):::ENTER
result has only one value
result != null
size(result[]) == 2
org.apache.commons.math.util.FastMath.HEX_40000000 > p
org.apache.commons.math.util.FastMath.MASK_30BITS < p
===========================================================================
org.apache.commons.math.util.FastMath.expint(int, double[]):::EXIT
org.apache.commons.math.util.FastMath.PI != return
org.apache.commons.math.util.FastMath.LN_2_A != return
org.apache.commons.math.util.FastMath.LN_2_B != return
org.apache.commons.math.util.FastMath.TWO_POWER_52 != return
===========================================================================
org.apache.commons.math.util.FastMath.floor(double):::ENTER
x == 32.0
===========================================================================
org.apache.commons.math.util.FastMath.floor(double):::EXIT3711
===========================================================================
org.apache.commons.math.util.FastMath.floor(double):::EXIT
org.apache.commons.math.util.FastMath.EXP_INT_TABLE_A == orig(org.apache.commons.math.util.FastMath.EXP_INT_TABLE_A)
org.apache.commons.math.util.FastMath.EXP_INT_TABLE_A[] == orig(org.apache.commons.math.util.FastMath.EXP_INT_TABLE_A[])
org.apache.commons.math.util.FastMath.EXP_INT_TABLE_B == orig(org.apache.commons.math.util.FastMath.EXP_INT_TABLE_B)
org.apache.commons.math.util.FastMath.EXP_INT_TABLE_B[] == orig(org.apache.commons.math.util.FastMath.EXP_INT_TABLE_B[])
org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A == orig(org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A)
org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A[] == orig(org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A[])
org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B == orig(org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B)
org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B[] == orig(org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B[])
org.apache.commons.math.util.FastMath.FACT == orig(org.apache.commons.math.util.FastMath.FACT)
org.apache.commons.math.util.FastMath.FACT[] == orig(org.apache.commons.math.util.FastMath.FACT[])
org.apache.commons.math.util.FastMath.LN_MANT == orig(org.apache.commons.math.util.FastMath.LN_MANT)
org.apache.commons.math.util.FastMath.LN_MANT[] == orig(org.apache.commons.math.util.FastMath.LN_MANT[])
org.apache.commons.math.util.FastMath.LN_SPLIT_COEF == orig(org.apache.commons.math.util.FastMath.LN_SPLIT_COEF)
org.apache.commons.math.util.FastMath.LN_SPLIT_COEF[] == orig(org.apache.commons.math.util.FastMath.LN_SPLIT_COEF[])
org.apache.commons.math.util.FastMath.LN_QUICK_COEF == orig(org.apache.commons.math.util.FastMath.LN_QUICK_COEF)
org.apache.commons.math.util.FastMath.LN_QUICK_COEF[] == orig(org.apache.commons.math.util.FastMath.LN_QUICK_COEF[])
org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF == orig(org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF)
org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[] == orig(org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[])
org.apache.commons.math.util.FastMath.SINE_TABLE_A == orig(org.apache.commons.math.util.FastMath.SINE_TABLE_A)
org.apache.commons.math.util.FastMath.SINE_TABLE_A[] == orig(org.apache.commons.math.util.FastMath.SINE_TABLE_A[])
org.apache.commons.math.util.FastMath.SINE_TABLE_B == orig(org.apache.commons.math.util.FastMath.SINE_TABLE_B)
org.apache.commons.math.util.FastMath.SINE_TABLE_B[] == orig(org.apache.commons.math.util.FastMath.SINE_TABLE_B[])
org.apache.commons.math.util.FastMath.COSINE_TABLE_A == orig(org.apache.commons.math.util.FastMath.COSINE_TABLE_A)
org.apache.commons.math.util.FastMath.COSINE_TABLE_A[] == orig(org.apache.commons.math.util.FastMath.COSINE_TABLE_A[])
org.apache.commons.math.util.FastMath.COSINE_TABLE_B == orig(org.apache.commons.math.util.FastMath.COSINE_TABLE_B)
org.apache.commons.math.util.FastMath.COSINE_TABLE_B[] == orig(org.apache.commons.math.util.FastMath.COSINE_TABLE_B[])
org.apache.commons.math.util.FastMath.TANGENT_TABLE_A == orig(org.apache.commons.math.util.FastMath.TANGENT_TABLE_A)
org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[] == orig(org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[])
org.apache.commons.math.util.FastMath.TANGENT_TABLE_B == orig(org.apache.commons.math.util.FastMath.TANGENT_TABLE_B)
org.apache.commons.math.util.FastMath.TANGENT_TABLE_B[] == orig(org.apache.commons.math.util.FastMath.TANGENT_TABLE_B[])
org.apache.commons.math.util.FastMath.RECIP_2PI == orig(org.apache.commons.math.util.FastMath.RECIP_2PI)
org.apache.commons.math.util.FastMath.RECIP_2PI[] == orig(org.apache.commons.math.util.FastMath.RECIP_2PI[])
org.apache.commons.math.util.FastMath.PI_O_4_BITS == orig(org.apache.commons.math.util.FastMath.PI_O_4_BITS)
org.apache.commons.math.util.FastMath.PI_O_4_BITS[] == orig(org.apache.commons.math.util.FastMath.PI_O_4_BITS[])
org.apache.commons.math.util.FastMath.EIGHTHS == orig(org.apache.commons.math.util.FastMath.EIGHTHS)
org.apache.commons.math.util.FastMath.EIGHTHS[] == orig(org.apache.commons.math.util.FastMath.EIGHTHS[])
org.apache.commons.math.util.FastMath.CBRTTWO == orig(org.apache.commons.math.util.FastMath.CBRTTWO)
org.apache.commons.math.util.FastMath.CBRTTWO[] == orig(org.apache.commons.math.util.FastMath.CBRTTWO[])
return == orig(x)
size(org.apache.commons.math.util.FastMath.EXP_INT_TABLE_A[]) == orig(size(org.apache.commons.math.util.FastMath.EXP_INT_TABLE_B[]))
size(org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A[]) == orig(size(org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B[]))
size(org.apache.commons.math.util.FastMath.LN_MANT[]) == orig(size(org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A[]))-1
size(org.apache.commons.math.util.FastMath.LN_MANT[]) == orig(size(org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B[]))-1
size(org.apache.commons.math.util.FastMath.SINE_TABLE_A[]) == orig(size(org.apache.commons.math.util.FastMath.SINE_TABLE_B[]))
size(org.apache.commons.math.util.FastMath.SINE_TABLE_A[]) == orig(size(org.apache.commons.math.util.FastMath.COSINE_TABLE_A[]))
size(org.apache.commons.math.util.FastMath.SINE_TABLE_A[]) == orig(size(org.apache.commons.math.util.FastMath.COSINE_TABLE_B[]))
size(org.apache.commons.math.util.FastMath.SINE_TABLE_A[]) == orig(size(org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[]))
size(org.apache.commons.math.util.FastMath.SINE_TABLE_A[]) == orig(size(org.apache.commons.math.util.FastMath.TANGENT_TABLE_B[]))
size(org.apache.commons.math.util.FastMath.SINE_TABLE_A[]) == orig(size(org.apache.commons.math.util.FastMath.EIGHTHS[]))
size(org.apache.commons.math.util.FastMath.CBRTTWO[]) == orig(size(org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[]))-1
return == 32.0
org.apache.commons.math.util.FastMath.LN_MANT.getClass().getName() == orig(org.apache.commons.math.util.FastMath.LN_MANT.getClass().getName())
org.apache.commons.math.util.FastMath.LN_MANT.getClass().getName() == orig(org.apache.commons.math.util.FastMath.LN_SPLIT_COEF.getClass().getName())
org.apache.commons.math.util.FastMath.LN_MANT.getClass().getName() == orig(org.apache.commons.math.util.FastMath.LN_QUICK_COEF.getClass().getName())
org.apache.commons.math.util.FastMath.LN_MANT.getClass().getName() == orig(org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF.getClass().getName())
===========================================================================
org.apache.commons.math.util.FastMath.log(double, double[]):::ENTER
size(org.apache.commons.math.util.FastMath.PI_O_4_BITS[]) == size(hiPrec[])
x one of { -1.0, 0.0 }
hiPrec[] == [0.0, 0.0]
hiPrec[] elements == 0.0
===========================================================================
org.apache.commons.math.util.FastMath.log(double, double[]):::EXIT1242
hiPrec[] == orig(hiPrec[])
hiPrec[] == [0.0, 0.0]
hiPrec[] elements == 0.0
return == -Infinity
orig(x) == 0.0
orig(x) in org.apache.commons.math.util.FastMath.EXP_INT_TABLE_A[]
orig(x) in org.apache.commons.math.util.FastMath.EXP_INT_TABLE_B[]
orig(x) in org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B[]
orig(x) in org.apache.commons.math.util.FastMath.SINE_TABLE_A[]
orig(x) in org.apache.commons.math.util.FastMath.SINE_TABLE_B[]
orig(x) in org.apache.commons.math.util.FastMath.COSINE_TABLE_B[]
orig(x) in org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[]
orig(x) in org.apache.commons.math.util.FastMath.TANGENT_TABLE_B[]
orig(x) in org.apache.commons.math.util.FastMath.EIGHTHS[]
hiPrec[] elements == orig(x)
orig(x) in hiPrec[]
===========================================================================
org.apache.commons.math.util.FastMath.log(double, double[]):::EXIT1253
hiPrec[] == [NaN, 0.0]
return == Double.NaN
orig(x) == -1.0
===========================================================================
org.apache.commons.math.util.FastMath.log(double, double[]):::EXIT
org.apache.commons.math.util.FastMath.EXP_INT_TABLE_A == orig(org.apache.commons.math.util.FastMath.EXP_INT_TABLE_A)
org.apache.commons.math.util.FastMath.EXP_INT_TABLE_A[] == orig(org.apache.commons.math.util.FastMath.EXP_INT_TABLE_A[])
org.apache.commons.math.util.FastMath.EXP_INT_TABLE_B == orig(org.apache.commons.math.util.FastMath.EXP_INT_TABLE_B)
org.apache.commons.math.util.FastMath.EXP_INT_TABLE_B[] == orig(org.apache.commons.math.util.FastMath.EXP_INT_TABLE_B[])
org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A == orig(org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A)
org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A[] == orig(org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A[])
org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B == orig(org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B)
org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B[] == orig(org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B[])
org.apache.commons.math.util.FastMath.FACT == orig(org.apache.commons.math.util.FastMath.FACT)
org.apache.commons.math.util.FastMath.FACT[] == orig(org.apache.commons.math.util.FastMath.FACT[])
org.apache.commons.math.util.FastMath.LN_MANT == orig(org.apache.commons.math.util.FastMath.LN_MANT)
org.apache.commons.math.util.FastMath.LN_MANT[] == orig(org.apache.commons.math.util.FastMath.LN_MANT[])
org.apache.commons.math.util.FastMath.LN_SPLIT_COEF == orig(org.apache.commons.math.util.FastMath.LN_SPLIT_COEF)
org.apache.commons.math.util.FastMath.LN_SPLIT_COEF[] == orig(org.apache.commons.math.util.FastMath.LN_SPLIT_COEF[])
org.apache.commons.math.util.FastMath.LN_QUICK_COEF == orig(org.apache.commons.math.util.FastMath.LN_QUICK_COEF)
org.apache.commons.math.util.FastMath.LN_QUICK_COEF[] == orig(org.apache.commons.math.util.FastMath.LN_QUICK_COEF[])
org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF == orig(org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF)
org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[] == orig(org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[])
org.apache.commons.math.util.FastMath.SINE_TABLE_A == orig(org.apache.commons.math.util.FastMath.SINE_TABLE_A)
org.apache.commons.math.util.FastMath.SINE_TABLE_A[] == orig(org.apache.commons.math.util.FastMath.SINE_TABLE_A[])
org.apache.commons.math.util.FastMath.SINE_TABLE_B == orig(org.apache.commons.math.util.FastMath.SINE_TABLE_B)
org.apache.commons.math.util.FastMath.SINE_TABLE_B[] == orig(org.apache.commons.math.util.FastMath.SINE_TABLE_B[])
org.apache.commons.math.util.FastMath.COSINE_TABLE_A == orig(org.apache.commons.math.util.FastMath.COSINE_TABLE_A)
org.apache.commons.math.util.FastMath.COSINE_TABLE_A[] == orig(org.apache.commons.math.util.FastMath.COSINE_TABLE_A[])
org.apache.commons.math.util.FastMath.COSINE_TABLE_B == orig(org.apache.commons.math.util.FastMath.COSINE_TABLE_B)
org.apache.commons.math.util.FastMath.COSINE_TABLE_B[] == orig(org.apache.commons.math.util.FastMath.COSINE_TABLE_B[])
org.apache.commons.math.util.FastMath.TANGENT_TABLE_A == orig(org.apache.commons.math.util.FastMath.TANGENT_TABLE_A)
org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[] == orig(org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[])
org.apache.commons.math.util.FastMath.TANGENT_TABLE_B == orig(org.apache.commons.math.util.FastMath.TANGENT_TABLE_B)
org.apache.commons.math.util.FastMath.TANGENT_TABLE_B[] == orig(org.apache.commons.math.util.FastMath.TANGENT_TABLE_B[])
org.apache.commons.math.util.FastMath.RECIP_2PI == orig(org.apache.commons.math.util.FastMath.RECIP_2PI)
org.apache.commons.math.util.FastMath.RECIP_2PI[] == orig(org.apache.commons.math.util.FastMath.RECIP_2PI[])
org.apache.commons.math.util.FastMath.PI_O_4_BITS == orig(org.apache.commons.math.util.FastMath.PI_O_4_BITS)
org.apache.commons.math.util.FastMath.PI_O_4_BITS[] == orig(org.apache.commons.math.util.FastMath.PI_O_4_BITS[])
org.apache.commons.math.util.FastMath.EIGHTHS == orig(org.apache.commons.math.util.FastMath.EIGHTHS)
org.apache.commons.math.util.FastMath.EIGHTHS[] == orig(org.apache.commons.math.util.FastMath.EIGHTHS[])
org.apache.commons.math.util.FastMath.CBRTTWO == orig(org.apache.commons.math.util.FastMath.CBRTTWO)
org.apache.commons.math.util.FastMath.CBRTTWO[] == orig(org.apache.commons.math.util.FastMath.CBRTTWO[])
size(org.apache.commons.math.util.FastMath.EXP_INT_TABLE_A[]) == orig(size(org.apache.commons.math.util.FastMath.EXP_INT_TABLE_B[]))
size(org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A[]) == orig(size(org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B[]))
size(org.apache.commons.math.util.FastMath.LN_MANT[]) == orig(size(org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A[]))-1
size(org.apache.commons.math.util.FastMath.LN_MANT[]) == orig(size(org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B[]))-1
size(org.apache.commons.math.util.FastMath.SINE_TABLE_A[]) == orig(size(org.apache.commons.math.util.FastMath.SINE_TABLE_B[]))
size(org.apache.commons.math.util.FastMath.SINE_TABLE_A[]) == orig(size(org.apache.commons.math.util.FastMath.COSINE_TABLE_A[]))
size(org.apache.commons.math.util.FastMath.SINE_TABLE_A[]) == orig(size(org.apache.commons.math.util.FastMath.COSINE_TABLE_B[]))
size(org.apache.commons.math.util.FastMath.SINE_TABLE_A[]) == orig(size(org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[]))
size(org.apache.commons.math.util.FastMath.SINE_TABLE_A[]) == orig(size(org.apache.commons.math.util.FastMath.TANGENT_TABLE_B[]))
size(org.apache.commons.math.util.FastMath.SINE_TABLE_A[]) == orig(size(org.apache.commons.math.util.FastMath.EIGHTHS[]))
size(org.apache.commons.math.util.FastMath.PI_O_4_BITS[]) == orig(size(hiPrec[]))
size(org.apache.commons.math.util.FastMath.CBRTTWO[]) == orig(size(org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[]))-1
hiPrec[] elements one of { 0.0, Double.NaN }
hiPrec[] one of { [0.0, 0.0], [NaN, 0.0] }
return one of { -Infinity, Double.NaN }
org.apache.commons.math.util.FastMath.LN_MANT.getClass().getName() == orig(org.apache.commons.math.util.FastMath.LN_MANT.getClass().getName())
org.apache.commons.math.util.FastMath.LN_MANT.getClass().getName() == orig(org.apache.commons.math.util.FastMath.LN_SPLIT_COEF.getClass().getName())
org.apache.commons.math.util.FastMath.LN_MANT.getClass().getName() == orig(org.apache.commons.math.util.FastMath.LN_QUICK_COEF.getClass().getName())
org.apache.commons.math.util.FastMath.LN_MANT.getClass().getName() == orig(org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF.getClass().getName())
===========================================================================
org.apache.commons.math.util.FastMath.log10(double):::ENTER
x one of { -1.0, 0.0 }
===========================================================================
org.apache.commons.math.util.FastMath.log10(double):::EXIT1513
return == -Infinity
orig(x) == 0.0
orig(x) in org.apache.commons.math.util.FastMath.EXP_INT_TABLE_A[]
orig(x) in org.apache.commons.math.util.FastMath.EXP_INT_TABLE_B[]
orig(x) in org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B[]
orig(x) in org.apache.commons.math.util.FastMath.SINE_TABLE_A[]
orig(x) in org.apache.commons.math.util.FastMath.SINE_TABLE_B[]
orig(x) in org.apache.commons.math.util.FastMath.COSINE_TABLE_B[]
orig(x) in org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[]
orig(x) in org.apache.commons.math.util.FastMath.TANGENT_TABLE_B[]
orig(x) in org.apache.commons.math.util.FastMath.EIGHTHS[]
===========================================================================
org.apache.commons.math.util.FastMath.log10(double):::EXIT1523
return == Double.NaN
orig(x) == -1.0
===========================================================================
org.apache.commons.math.util.FastMath.log10(double):::EXIT
org.apache.commons.math.util.FastMath.EXP_INT_TABLE_A == orig(org.apache.commons.math.util.FastMath.EXP_INT_TABLE_A)
org.apache.commons.math.util.FastMath.EXP_INT_TABLE_A[] == orig(org.apache.commons.math.util.FastMath.EXP_INT_TABLE_A[])
org.apache.commons.math.util.FastMath.EXP_INT_TABLE_B == orig(org.apache.commons.math.util.FastMath.EXP_INT_TABLE_B)
org.apache.commons.math.util.FastMath.EXP_INT_TABLE_B[] == orig(org.apache.commons.math.util.FastMath.EXP_INT_TABLE_B[])
org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A == orig(org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A)
org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A[] == orig(org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A[])
org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B == orig(org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B)
org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B[] == orig(org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B[])
org.apache.commons.math.util.FastMath.FACT == orig(org.apache.commons.math.util.FastMath.FACT)
org.apache.commons.math.util.FastMath.FACT[] == orig(org.apache.commons.math.util.FastMath.FACT[])
org.apache.commons.math.util.FastMath.LN_MANT == orig(org.apache.commons.math.util.FastMath.LN_MANT)
org.apache.commons.math.util.FastMath.LN_MANT[] == orig(org.apache.commons.math.util.FastMath.LN_MANT[])
org.apache.commons.math.util.FastMath.LN_SPLIT_COEF == orig(org.apache.commons.math.util.FastMath.LN_SPLIT_COEF)
org.apache.commons.math.util.FastMath.LN_SPLIT_COEF[] == orig(org.apache.commons.math.util.FastMath.LN_SPLIT_COEF[])
org.apache.commons.math.util.FastMath.LN_QUICK_COEF == orig(org.apache.commons.math.util.FastMath.LN_QUICK_COEF)
org.apache.commons.math.util.FastMath.LN_QUICK_COEF[] == orig(org.apache.commons.math.util.FastMath.LN_QUICK_COEF[])
org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF == orig(org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF)
org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[] == orig(org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[])
org.apache.commons.math.util.FastMath.SINE_TABLE_A == orig(org.apache.commons.math.util.FastMath.SINE_TABLE_A)
org.apache.commons.math.util.FastMath.SINE_TABLE_A[] == orig(org.apache.commons.math.util.FastMath.SINE_TABLE_A[])
org.apache.commons.math.util.FastMath.SINE_TABLE_B == orig(org.apache.commons.math.util.FastMath.SINE_TABLE_B)
org.apache.commons.math.util.FastMath.SINE_TABLE_B[] == orig(org.apache.commons.math.util.FastMath.SINE_TABLE_B[])
org.apache.commons.math.util.FastMath.COSINE_TABLE_A == orig(org.apache.commons.math.util.FastMath.COSINE_TABLE_A)
org.apache.commons.math.util.FastMath.COSINE_TABLE_A[] == orig(org.apache.commons.math.util.FastMath.COSINE_TABLE_A[])
org.apache.commons.math.util.FastMath.COSINE_TABLE_B == orig(org.apache.commons.math.util.FastMath.COSINE_TABLE_B)
org.apache.commons.math.util.FastMath.COSINE_TABLE_B[] == orig(org.apache.commons.math.util.FastMath.COSINE_TABLE_B[])
org.apache.commons.math.util.FastMath.TANGENT_TABLE_A == orig(org.apache.commons.math.util.FastMath.TANGENT_TABLE_A)
org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[] == orig(org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[])
org.apache.commons.math.util.FastMath.TANGENT_TABLE_B == orig(org.apache.commons.math.util.FastMath.TANGENT_TABLE_B)
org.apache.commons.math.util.FastMath.TANGENT_TABLE_B[] == orig(org.apache.commons.math.util.FastMath.TANGENT_TABLE_B[])
org.apache.commons.math.util.FastMath.RECIP_2PI == orig(org.apache.commons.math.util.FastMath.RECIP_2PI)
org.apache.commons.math.util.FastMath.RECIP_2PI[] == orig(org.apache.commons.math.util.FastMath.RECIP_2PI[])
org.apache.commons.math.util.FastMath.PI_O_4_BITS == orig(org.apache.commons.math.util.FastMath.PI_O_4_BITS)
org.apache.commons.math.util.FastMath.PI_O_4_BITS[] == orig(org.apache.commons.math.util.FastMath.PI_O_4_BITS[])
org.apache.commons.math.util.FastMath.EIGHTHS == orig(org.apache.commons.math.util.FastMath.EIGHTHS)
org.apache.commons.math.util.FastMath.EIGHTHS[] == orig(org.apache.commons.math.util.FastMath.EIGHTHS[])
org.apache.commons.math.util.FastMath.CBRTTWO == orig(org.apache.commons.math.util.FastMath.CBRTTWO)
org.apache.commons.math.util.FastMath.CBRTTWO[] == orig(org.apache.commons.math.util.FastMath.CBRTTWO[])
size(org.apache.commons.math.util.FastMath.EXP_INT_TABLE_A[]) == orig(size(org.apache.commons.math.util.FastMath.EXP_INT_TABLE_B[]))
size(org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A[]) == orig(size(org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B[]))
size(org.apache.commons.math.util.FastMath.LN_MANT[]) == orig(size(org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A[]))-1
size(org.apache.commons.math.util.FastMath.LN_MANT[]) == orig(size(org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B[]))-1
size(org.apache.commons.math.util.FastMath.SINE_TABLE_A[]) == orig(size(org.apache.commons.math.util.FastMath.SINE_TABLE_B[]))
size(org.apache.commons.math.util.FastMath.SINE_TABLE_A[]) == orig(size(org.apache.commons.math.util.FastMath.COSINE_TABLE_A[]))
size(org.apache.commons.math.util.FastMath.SINE_TABLE_A[]) == orig(size(org.apache.commons.math.util.FastMath.COSINE_TABLE_B[]))
size(org.apache.commons.math.util.FastMath.SINE_TABLE_A[]) == orig(size(org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[]))
size(org.apache.commons.math.util.FastMath.SINE_TABLE_A[]) == orig(size(org.apache.commons.math.util.FastMath.TANGENT_TABLE_B[]))
size(org.apache.commons.math.util.FastMath.SINE_TABLE_A[]) == orig(size(org.apache.commons.math.util.FastMath.EIGHTHS[]))
size(org.apache.commons.math.util.FastMath.CBRTTWO[]) == orig(size(org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[]))-1
(return == -Infinity)  <==>  (orig(x) == 0.0)
(return == -Infinity)  ==>  (orig(x) in org.apache.commons.math.util.FastMath.COSINE_TABLE_B[])
(return == -Infinity)  ==>  (orig(x) in org.apache.commons.math.util.FastMath.EIGHTHS[])
(return == -Infinity)  ==>  (orig(x) in org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B[])
(return == -Infinity)  ==>  (orig(x) in org.apache.commons.math.util.FastMath.EXP_INT_TABLE_A[])
(return == -Infinity)  ==>  (orig(x) in org.apache.commons.math.util.FastMath.EXP_INT_TABLE_B[])
(return == -Infinity)  ==>  (orig(x) in org.apache.commons.math.util.FastMath.SINE_TABLE_A[])
(return == -Infinity)  ==>  (orig(x) in org.apache.commons.math.util.FastMath.SINE_TABLE_B[])
(return == -Infinity)  ==>  (orig(x) in org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[])
(return == -Infinity)  ==>  (orig(x) in org.apache.commons.math.util.FastMath.TANGENT_TABLE_B[])
(return == Double.NaN)  <==>  (orig(x) == -1.0)
return one of { -Infinity, Double.NaN }
org.apache.commons.math.util.FastMath.LN_MANT.getClass().getName() == orig(org.apache.commons.math.util.FastMath.LN_MANT.getClass().getName())
org.apache.commons.math.util.FastMath.LN_MANT.getClass().getName() == orig(org.apache.commons.math.util.FastMath.LN_SPLIT_COEF.getClass().getName())
org.apache.commons.math.util.FastMath.LN_MANT.getClass().getName() == orig(org.apache.commons.math.util.FastMath.LN_QUICK_COEF.getClass().getName())
org.apache.commons.math.util.FastMath.LN_MANT.getClass().getName() == orig(org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF.getClass().getName())
===========================================================================
org.apache.commons.math.util.FastMath.quadMult(double[], double[], double[]):::ENTER
a[] <= b[] (lexically)
size(a[]) == size(b[])
size(a[]) == size(result[])
a != null
a[] sorted by >
b != null
b[] sorted by >
result != null
size(a[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.quadMult(double[], double[], double[]):::EXIT
a[] <= b[] (lexically)
a[] < result[] (lexically)
a[] <= result[] (lexically)
a[] == orig(a[])
b[] == orig(b[])
a[] sorted by >
b[] sorted by >
===========================================================================
org.apache.commons.math.util.FastMath.resplit(double[]):::ENTER
a != null
size(a[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.resplit(double[]):::EXIT
===========================================================================
org.apache.commons.math.util.FastMath.slowCos(double, double[]):::ENTER
result has only one value
result[] sorted by >=
size(result[]) == 2
org.apache.commons.math.util.FastMath.PI > x
result[] elements < org.apache.commons.math.util.FastMath.PI
org.apache.commons.math.util.FastMath.E > x
result[] elements < org.apache.commons.math.util.FastMath.E
org.apache.commons.math.util.FastMath.LN_2_A != x
result[] elements < org.apache.commons.math.util.FastMath.LN_2_A
org.apache.commons.math.util.FastMath.LN_2_B != x
org.apache.commons.math.util.FastMath.TWO_POWER_52 > x
result[] elements < org.apache.commons.math.util.FastMath.TWO_POWER_52
result[] elements <= x
===========================================================================
org.apache.commons.math.util.FastMath.slowCos(double, double[]):::EXIT
result[] > orig(result[]) (lexically)
result[] >= orig(result[]) (lexically)
result[] sorted by >
result[] elements < org.apache.commons.math.util.FastMath.PI
org.apache.commons.math.util.FastMath.PI > return
result[] elements < org.apache.commons.math.util.FastMath.E
org.apache.commons.math.util.FastMath.E > return
org.apache.commons.math.util.FastMath.LN_2_A < return
org.apache.commons.math.util.FastMath.LN_2_B < return
result[] elements < org.apache.commons.math.util.FastMath.TWO_POWER_52
org.apache.commons.math.util.FastMath.TWO_POWER_52 > return
result[] elements <= return
return in result[]
return != orig(x)
orig(result[]) elements < return
===========================================================================
org.apache.commons.math.util.FastMath.slowLog(double):::ENTER
org.apache.commons.math.util.FastMath.PI > xi
org.apache.commons.math.util.FastMath.E > xi
org.apache.commons.math.util.FastMath.LN_2_A < xi
org.apache.commons.math.util.FastMath.LN_2_B < xi
org.apache.commons.math.util.FastMath.TWO_POWER_52 > xi
===========================================================================
org.apache.commons.math.util.FastMath.slowLog(double):::EXIT
return != null
return[] sorted by >=
size(return[]) == 2
return[] elements < org.apache.commons.math.util.FastMath.PI
return[] elements < org.apache.commons.math.util.FastMath.E
return[] elements < org.apache.commons.math.util.FastMath.LN_2_A
return[] elements < org.apache.commons.math.util.FastMath.TWO_POWER_52
return[] elements < orig(xi)
===========================================================================
org.apache.commons.math.util.FastMath.slowSin(double, double[]):::ENTER
result has only one value
result[] sorted by >=
size(result[]) == 2
org.apache.commons.math.util.FastMath.PI > x
result[] elements < org.apache.commons.math.util.FastMath.PI
org.apache.commons.math.util.FastMath.E > x
result[] elements < org.apache.commons.math.util.FastMath.E
org.apache.commons.math.util.FastMath.LN_2_A != x
org.apache.commons.math.util.FastMath.LN_2_B != x
org.apache.commons.math.util.FastMath.TWO_POWER_52 > x
result[] elements < org.apache.commons.math.util.FastMath.TWO_POWER_52
===========================================================================
org.apache.commons.math.util.FastMath.slowSin(double, double[]):::EXIT
result[] <= orig(result[]) (lexically)
result[] sorted by >=
result[] elements < org.apache.commons.math.util.FastMath.PI
org.apache.commons.math.util.FastMath.PI > return
result[] elements < org.apache.commons.math.util.FastMath.E
org.apache.commons.math.util.FastMath.E > return
result[] elements < org.apache.commons.math.util.FastMath.LN_2_A
org.apache.commons.math.util.FastMath.LN_2_A > return
org.apache.commons.math.util.FastMath.LN_2_B != return
result[] elements < org.apache.commons.math.util.FastMath.TWO_POWER_52
org.apache.commons.math.util.FastMath.TWO_POWER_52 > return
result[] elements <= return
return in result[]
result[] elements <= orig(x)
return <= orig(x)
===========================================================================
org.apache.commons.math.util.FastMath.slowexp(double, double[]):::ENTER
result has only one value
result != null
size(result[]) == 2
org.apache.commons.math.util.FastMath.PI > x
org.apache.commons.math.util.FastMath.E > x
org.apache.commons.math.util.FastMath.LN_2_A != x
org.apache.commons.math.util.FastMath.LN_2_B != x
org.apache.commons.math.util.FastMath.TWO_POWER_52 > x
===========================================================================
org.apache.commons.math.util.FastMath.slowexp(double, double[]):::EXIT
result[] sorted by >
result[] elements < org.apache.commons.math.util.FastMath.PI
org.apache.commons.math.util.FastMath.PI > return
result[] elements <= org.apache.commons.math.util.FastMath.E
org.apache.commons.math.util.FastMath.E >= return
org.apache.commons.math.util.FastMath.LN_2_A < return
org.apache.commons.math.util.FastMath.LN_2_B < return
result[] elements < org.apache.commons.math.util.FastMath.TWO_POWER_52
org.apache.commons.math.util.FastMath.TWO_POWER_52 > return
result[] elements <= return
return in result[]
return > orig(x)
===========================================================================
org.apache.commons.math.util.FastMath.split(double, double[]):::ENTER
split != null
size(split[]) == 2
org.apache.commons.math.util.FastMath.PI != d
org.apache.commons.math.util.FastMath.LN_2_A != d
org.apache.commons.math.util.FastMath.LN_2_B != d
org.apache.commons.math.util.FastMath.TWO_POWER_52 != d
===========================================================================
org.apache.commons.math.util.FastMath.split(double, double[]):::EXIT
orig(d) in split[]
===========================================================================
org.apache.commons.math.util.FastMath.splitAdd(double[], double[], double[]):::ENTER
size(a[]) == size(b[])
size(a[]) == size(ans[])
a != null
b != null
b[] elements <= 2.0
ans != null
ans[] sorted by >=
size(a[]) == 2
a[] elements < org.apache.commons.math.util.FastMath.PI
b[] elements < org.apache.commons.math.util.FastMath.PI
a[] elements < org.apache.commons.math.util.FastMath.E
b[] elements < org.apache.commons.math.util.FastMath.E
a[] elements < org.apache.commons.math.util.FastMath.TWO_POWER_52
b[] elements < org.apache.commons.math.util.FastMath.TWO_POWER_52
===========================================================================
org.apache.commons.math.util.FastMath.splitAdd(double[], double[], double[]):::EXIT
b[] == orig(b[])
b[] elements <= 2.0
a[] elements < org.apache.commons.math.util.FastMath.PI
b[] elements < org.apache.commons.math.util.FastMath.PI
ans[] elements < org.apache.commons.math.util.FastMath.PI
a[] elements < org.apache.commons.math.util.FastMath.E
b[] elements < org.apache.commons.math.util.FastMath.E
ans[] elements <= org.apache.commons.math.util.FastMath.E
a[] elements < org.apache.commons.math.util.FastMath.TWO_POWER_52
b[] elements < org.apache.commons.math.util.FastMath.TWO_POWER_52
ans[] elements < org.apache.commons.math.util.FastMath.TWO_POWER_52
===========================================================================
org.apache.commons.math.util.FastMath.splitMult(double[], double[], double[]):::ENTER
size(a[]) == size(b[])
size(a[]) == size(ans[])
a != null
b != null
ans != null
size(a[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.splitMult(double[], double[], double[]):::EXIT
a[] == orig(a[])
b[] == orig(b[])
===========================================================================
org.apache.commons.math.util.FastMath.splitReciprocal(double[], double[]):::ENTER
size(in[]) == size(result[])
in != null
result != null
result[] elements <= 1.0
size(in[]) == 2
===========================================================================
org.apache.commons.math.util.FastMath.splitReciprocal(double[], double[]):::EXIT
in[] == orig(in[])
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator:::OBJECT
this.referenceCount == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.referenceCount]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.referenceCount-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.referenceCount]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.referenceCount-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask == size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[])-1
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask == size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[])-1
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask == size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[])-1
size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[]) == size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[])
size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[]) == size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[])
this.referenceCount == 4
this.current one of { -1, 0, 2 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this has only one value
org.apache.commons.math.util.OpenIntToDoubleHashMap.this != null
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys has only one value
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys != null
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] == [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] elements one of { 0, 2 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values has only one value
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values != null
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[] == [-1.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[] elements one of { -1.0, 0.0 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states has only one value
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states != null
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] == [1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] elements one of { 0, 1, 2 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.missingEntries == 0.0
size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[]) == 32
this.referenceCount > this.current
this.referenceCount > this.next
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] elements < this.referenceCount
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] elements < this.referenceCount
this.current != this.next
this.current != org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL
this.current <= org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED
this.current > org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID
this.current < org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE
this.current < org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT
this.current < org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask
this.next != org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL
this.next <= org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED
this.next > org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID
this.next < org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE
this.next < org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT
this.next < org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] elements >= org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] elements >= org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] elements <= org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] elements <= org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] elements > org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] elements > org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] elements < org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] elements < org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] elements < org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] elements < org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] elements < org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.missingEntries in org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[]
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[] elements <= org.apache.commons.math.util.OpenIntToDoubleHashMap.this.missingEntries
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] elements < org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator.OpenIntToDoubleHashMap$Iterator(org.apache.commons.math.util.OpenIntToDoubleHashMap):::ENTER
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask == size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[])-1
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask == size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[])-1
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask == size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[])-1
size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[]) == size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[])
size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[]) == size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[])
org.apache.commons.math.util.OpenIntToDoubleHashMap.this has only one value
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys has only one value
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] == [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] elements one of { 0, 2 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values has only one value
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[] == [-1.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[] elements one of { -1.0, 0.0 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states has only one value
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] == [1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] elements one of { 0, 1, 2 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.missingEntries == 0.0
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count == 4
size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[]) == 32
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.missingEntries in org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[]
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator.OpenIntToDoubleHashMap$Iterator(org.apache.commons.math.util.OpenIntToDoubleHashMap):::EXIT
this.referenceCount == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)
this.next == org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE
org.apache.commons.math.util.OpenIntToDoubleHashMap.this == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this)
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(this.referenceCount)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(this.referenceCount)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(this.referenceCount)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(this.referenceCount)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.next]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(this.next)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.next]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(this.next)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[])
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[] == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[])
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[])
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.missingEntries == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.missingEntries)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask == orig(size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[]))-1
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask == orig(size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[]))-1
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask == orig(size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[]))-1
size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[]) == orig(size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[]))
size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[]) == orig(size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[]))
this.current == -1
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator.advance():::ENTER
this.current one of { -1, 0 }
this.next one of { -1, 0, 2 }
this.current <= org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE
this.current < org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL
this.current < org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] elements >= this.current
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] elements >= this.current
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator.advance():::EXIT
this.referenceCount == orig(this.referenceCount)
this.referenceCount == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)
this.current == orig(this.next)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this)
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(this.referenceCount)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(this.referenceCount)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(this.referenceCount)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(this.referenceCount)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(this.referenceCount)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(this.referenceCount)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(this.referenceCount)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(this.referenceCount)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[])
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[] == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[])
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[])
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.missingEntries == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.missingEntries)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask == orig(size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[]))-1
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask == orig(size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[]))-1
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask == orig(size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[]))-1
size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[]) == orig(size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[]))
size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[]) == orig(size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[]))
this.next one of { -2, 0, 2 }
this.referenceCount > orig(this.current)
this.current != orig(this.current)
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE >= orig(this.current)
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL > orig(this.current)
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED > orig(this.current)
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < orig(this.current)
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > orig(this.current)
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > orig(this.current)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] elements >= orig(this.current)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] elements >= orig(this.current)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask > orig(this.current)
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator.hasNext():::ENTER
this.next one of { -2, 0, 2 }
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator.hasNext():::EXIT518
this.next == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.next]
this.next == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(this.next)])
this.next == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(this.next)]
this.next == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.next])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.next]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(this.next)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(this.next)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.next])
this.current one of { -1, 0 }
this.next one of { 0, 2 }
return == true
this.current < this.next
this.current <= org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE
this.current < org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL
this.current < org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] elements >= this.current
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] elements >= this.current
this.next >= org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE
this.next in org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[]
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator.hasNext():::EXIT518;condition="return == true"
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator.hasNext():::EXIT519
this.current == org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.current-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(this.current)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(this.current)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.current-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.current]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(this.current)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(this.current)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.current])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(this.current)
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.current]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.current-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(this.current)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(this.current)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(this.current)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(this.current)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.current])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.current-1])
this.next == -2
return == false
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator.hasNext():::EXIT519;condition="not(return == true)"
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator.hasNext():::EXIT
this.referenceCount == orig(this.referenceCount)
this.referenceCount == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)
this.current == orig(this.current)
this.next == orig(this.next)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this)
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(this.referenceCount)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(this.referenceCount)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(this.referenceCount)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(this.referenceCount)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(this.referenceCount)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(this.referenceCount)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(this.referenceCount)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(this.referenceCount)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[])
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[] == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[])
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[])
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.missingEntries == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.missingEntries)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask == orig(size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[]))-1
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask == orig(size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[]))-1
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask == orig(size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[]))-1
size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[]) == orig(size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[]))
size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[]) == orig(size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[]))
(this.current one of { -1, 0 })  <==>  (return == true)
(this.current one of { -1, 0 })  <==>  (this.current < org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL)
(this.current one of { -1, 0 })  <==>  (this.current < org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED)
(this.current one of { -1, 0 })  <==>  (this.current < this.next)
(this.current one of { -1, 0 })  <==>  (this.current <= org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE)
(this.current one of { -1, 0 })  <==>  (this.next >= org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE)
(this.current one of { -1, 0 })  <==>  (this.next one of { 0, 2 })
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(this.next)])
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.next])
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(this.next)])
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.next])
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(this.next)]))
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.next]))
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(this.next)]))
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.next]))
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE < org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(this.next)])
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE < org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.next])
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE < orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(this.next)]))
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE < orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.next]))
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(this.next)])
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.next])
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(this.next)]))
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.next]))
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL != org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(this.next)])
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL != org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.next])
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL != orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(this.next)]))
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL != orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.next]))
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(this.next)])
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.next])
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(this.next)]))
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.next]))
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(this.next)])
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.next])
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(this.next)])
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.next])
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(this.next)]))
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.next]))
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(this.next)]))
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.next]))
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED > org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(this.next)])
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED > org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.next])
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED > orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(this.next)]))
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED > orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.next]))
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(this.next)])
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.next])
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(this.next)]))
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.next]))
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(this.next)])
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.next])
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(this.next)])
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.next])
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(this.next)]))
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.next]))
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(this.next)]))
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.next]))
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] elements >= this.current)
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(this.next)] != org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(this.next)])
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(this.next)] != orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.next]))
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(this.next)] in org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[])
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(this.next)] one of { 0, 2 })
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.next] != org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(this.next)])
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.next] != org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.next])
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.next] != orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(this.next)]))
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.next] != orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.next]))
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.next] in org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[])
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.next] one of { 0, 2 })
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask > org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(this.next)])
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask > org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.next])
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask > org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(this.next)])
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask > org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.next])
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask > orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(this.next)]))
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask > orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.next]))
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask > orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(this.next)]))
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask > orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.next]))
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] elements >= this.current)
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(this.next)] != orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.next]))
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.next] != org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(this.next)])
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.next] != orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(this.next)]))
(this.current one of { -1, 0 })  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.next] != orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.next]))
(this.current one of { -1, 0 })  ==>  (orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(this.next)]) != org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(this.next)])
(this.current one of { -1, 0 })  ==>  (orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(this.next)]) != orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(this.next)]))
(this.current one of { -1, 0 })  ==>  (orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(this.next)]) != orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.next]))
(this.current one of { -1, 0 })  ==>  (orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(this.next)]) in org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[])
(this.current one of { -1, 0 })  ==>  (orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(this.next)]) one of { 0, 2 })
(this.current one of { -1, 0 })  ==>  (orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.next]) != orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.next]))
(this.current one of { -1, 0 })  ==>  (orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.next]) in org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[])
(this.current one of { -1, 0 })  ==>  (orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.next]) one of { 0, 2 })
(this.current one of { -1, 0 })  ==>  (orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(this.next)]) != org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(this.next)])
(this.current one of { -1, 0 })  ==>  (orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(this.next)]) != orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.next]))
(this.current one of { -1, 0 })  ==>  (this.current < org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(this.next)])
(this.current one of { -1, 0 })  ==>  (this.current < org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.next])
(this.current one of { -1, 0 })  ==>  (this.current < org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(this.next)])
(this.current one of { -1, 0 })  ==>  (this.current < org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.next])
(this.current one of { -1, 0 })  ==>  (this.current < orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(this.next)]))
(this.current one of { -1, 0 })  ==>  (this.current < orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.next]))
(this.current one of { -1, 0 })  ==>  (this.current < orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(this.next)]))
(this.current one of { -1, 0 })  ==>  (this.current < orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.next]))
(this.current one of { -1, 0 })  ==>  (this.next != org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(this.next)])
(this.current one of { -1, 0 })  ==>  (this.next != org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.next])
(this.current one of { -1, 0 })  ==>  (this.next != orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(this.next)]))
(this.current one of { -1, 0 })  ==>  (this.next != orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.next]))
(this.current one of { -1, 0 })  ==>  (this.next == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(this.next)])
(this.current one of { -1, 0 })  ==>  (this.next == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.next])
(this.current one of { -1, 0 })  ==>  (this.next == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(this.next)]))
(this.current one of { -1, 0 })  ==>  (this.next == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.next]))
(this.current one of { -1, 0 })  ==>  (this.next in org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[])
(this.current one of { -1, 0 })  ==>  (this.referenceCount > org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(this.next)])
(this.current one of { -1, 0 })  ==>  (this.referenceCount > org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.next])
(this.current one of { -1, 0 })  ==>  (this.referenceCount > org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(this.next)])
(this.current one of { -1, 0 })  ==>  (this.referenceCount > org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.next])
(this.current one of { -1, 0 })  ==>  (this.referenceCount > orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(this.next)]))
(this.current one of { -1, 0 })  ==>  (this.referenceCount > orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.next]))
(this.current one of { -1, 0 })  ==>  (this.referenceCount > orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(this.next)]))
(this.current one of { -1, 0 })  ==>  (this.referenceCount > orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.next]))
(this.next == -2)  <==>  (return == false)
(this.next == -2)  <==>  (this.current == org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED)
(this.next == -2)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(this.current)-1])
(this.next == -2)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.current-1])
(this.next == -2)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(this.current)-1]))
(this.next == -2)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.current-1]))
(this.next == -2)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(this.current)])
(this.next == -2)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.current])
(this.next == -2)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(this.current)]))
(this.next == -2)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.current]))
(this.next == -2)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(this.current)])
(this.next == -2)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.current])
(this.next == -2)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(this.current)-1])
(this.next == -2)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.current-1])
(this.next == -2)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(this.current)]))
(this.next == -2)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.current]))
(this.next == -2)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(this.current)-1]))
(this.next == -2)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.current-1]))
this.next one of { -2, 0, 2 }
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator.hasNext():::EXIT;condition="return == true"
this.next == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.next]
this.next == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(this.next)])
this.next == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(this.next)]
this.next == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.next])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.next]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(this.next)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(this.next)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.next])
this.current one of { -1, 0 }
this.next one of { 0, 2 }
return == true
this.current < this.next
this.current <= org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE
this.current < org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL
this.current < org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] elements >= this.current
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] elements >= this.current
this.next >= org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE
this.next in org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[]
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator.hasNext():::EXIT;condition="not(return == true)"
this.current == org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.current-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(this.current)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(this.current)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.current-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.current]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(this.current)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(this.current)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.current])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(this.current)
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.current]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.current-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(this.current)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(this.current)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(this.current)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(this.current)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.current])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.current-1])
this.next == -2
return == false
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator.value():::ENTER
this.current == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.current]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.current]
this.current one of { 0, 2 }
this.next one of { -2, 2 }
this.current >= org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE
this.current in org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[]
this.next != org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator.value():::EXIT
this.referenceCount == orig(this.referenceCount)
this.referenceCount == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)
this.current == orig(this.current)
this.current == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.current]
this.current == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(this.current)])
this.current == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(this.current)]
this.current == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.current])
this.next == orig(this.next)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this)
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(this.referenceCount)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(this.referenceCount)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(this.referenceCount)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(this.referenceCount)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(this.referenceCount)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(this.referenceCount)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(this.referenceCount)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(this.referenceCount)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.current]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(this.current)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(this.current)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[] == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[])
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[] == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[])
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[] == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[])
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.missingEntries == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.missingEntries)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask == orig(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask == orig(size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[]))-1
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask == orig(size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[]))-1
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask == orig(size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[]))-1
size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[]) == orig(size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[]))
size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[]) == orig(size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[]))
this.current one of { 0, 2 }
this.next one of { -2, 2 }
return == -1.0
this.current >= org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE
this.current in org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[]
this.next != org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE
org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[] elements >= return
return in org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[]
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap:::CLASS
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap:::OBJECT
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[this.mask]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[this.mask-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[this.mask]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[this.mask-1]
this.keys[] <= this.states[] (lexically)
this.mask == size(this.keys[])-1
this.mask == size(this.values[])-1
this.mask == size(this.states[])-1
size(this.keys[]) == size(this.values[])
size(this.keys[]) == size(this.states[])
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE] == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL-1]
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED-1]
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER-1]
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED-1]
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER-1]
this.keys != null
this.keys[] elements one of { 0, 1, 2 }
this.values != null
this.values[] elements >= -1.0
this.states != null
this.states[] elements one of { 0, 1, 2 }
this.missingEntries == 0.0
this.size >= 0
this.count >= 0
size(this.keys[]) == 32
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE] one of { 0, 1 }
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] one of { 0, 1 }
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] one of { 0, 2 }
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] one of { 0, 1 }
this.keys[this.size] one of { 0, 2 }
this.states[this.size] one of { 0, 1 }
this.states[this.count] one of { 0, 1 }
this.keys[] elements >= org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE
this.states[] elements >= org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= this.size
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= this.count
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= this.keys[this.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= this.keys[this.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= this.states[this.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= this.states[this.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL >= this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL >= this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL != this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL >= this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL != this.keys[this.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL >= this.states[this.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL >= this.states[this.count]
this.keys[] elements <= org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED
this.states[] elements <= org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED > this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED > this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED > this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= this.keys[this.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= this.keys[this.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED > this.states[this.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED > this.states[this.count]
this.keys[] elements > org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID
this.states[] elements > org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.size
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.count
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.keys[this.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.keys[this.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.states[this.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.states[this.count]
this.keys[] elements < org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE
this.states[] elements < org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.size
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.count
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.keys[this.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.keys[this.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.states[this.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.states[this.count]
this.keys[] elements < org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT
this.states[] elements < org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.size
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.count
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.keys[this.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.keys[this.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.states[this.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.states[this.count]
this.keys[] elements <= this.size
this.keys[] elements < this.mask
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] in this.keys[]
this.missingEntries in this.values[]
this.states[] elements <= this.size
this.states[] elements < this.mask
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] in this.states[]
this.size < this.mask
this.size >= this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
this.size >= this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.size >= this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.size >= this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
this.size >= this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
this.size >= this.keys[this.size]
this.size >= this.keys[this.count]
this.size >= this.states[this.size]
this.size >= this.states[this.count]
this.mask > this.count
this.mask > this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
this.mask > this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.mask > this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.mask > this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
this.mask > this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
this.mask > this.keys[this.size]
this.mask > this.keys[this.count]
this.mask > this.states[this.size]
this.mask > this.states[this.count]
this.count >= this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.count >= this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.count >= this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
this.count >= this.keys[this.count]
this.count >= this.states[this.size]
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE] >= this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE] >= this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE] >= this.states[this.size]
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE] >= this.states[this.count]
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] <= this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] >= this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] >= this.keys[this.size]
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] >= this.states[this.size]
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] >= this.states[this.size]
this.keys[this.size] >= this.states[this.size]
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.OpenIntToDoubleHashMap(double):::ENTER
missingEntries == 0.0
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.OpenIntToDoubleHashMap(double):::EXIT
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.size
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.count
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[this.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[this.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[this.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[this.count]
this.keys[] == this.states[]
this.missingEntries == orig(missingEntries)
this.keys[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.keys[] elements == 0
this.values[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.values[] elements == 0.0
this.keys[] elements == org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE
this.values[] elements == this.missingEntries
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.OpenIntToDoubleHashMap(int, double):::ENTER
expectedSize == 16
missingEntries == 0.0
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.OpenIntToDoubleHashMap(int, double):::EXIT
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.size
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.count
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[this.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[this.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(expectedSize)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(expectedSize)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[this.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[this.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[orig(expectedSize)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[orig(expectedSize)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE == orig(expectedSize)
this.keys[] == this.states[]
this.missingEntries == orig(missingEntries)
this.keys[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.keys[] elements == 0
this.values[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.values[] elements == 0.0
this.keys[] elements == org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE
this.values[] elements == this.missingEntries
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.changeIndexSign(int):::ENTER
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.changeIndexSign(int):::EXIT
return + orig(index) + 1 == 0
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.computeCapacity(int):::ENTER
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE == expectedSize
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.computeCapacity(int):::EXIT159
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.computeCapacity(int):::EXIT
return == 32
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.containsKey(int):::ENTER
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[this.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[this.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[key-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[this.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[this.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == key
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.keys[key]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[this.count-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[key]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[key-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[this.count-1]
this.size == this.count
this has only one value
this.keys has only one value
this.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.values has only one value
this.values[] == [-1.0, Infinity, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.values[] elements one of { -1.0, 0.0, Infinity }
this.states has only one value
this.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.states[] elements one of { 0, 1 }
this.size == 3
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.containsKey(int):::EXIT213
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.containsKey(int):::EXIT213;condition="return == true"
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.containsKey(int):::EXIT
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[this.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[this.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(this.size)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(this.mask)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(this.mask)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(this.count)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(key)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[this.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[this.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[orig(this.size)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[orig(this.mask)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[orig(this.mask)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[orig(this.count)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(this.size)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.states[post(this.size)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(this.mask)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(this.mask)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.states[post(this.mask)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.states[post(this.mask)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(this.count)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.states[post(this.count)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(key)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.keys[orig(key)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[this.count-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[orig(this.size)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[orig(this.count)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[orig(key)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[orig(key)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.states[post(this.size)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.states[post(this.count)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.keys[post(key)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.states[post(key)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.states[post(key)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[this.count-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[orig(this.size)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[orig(this.count)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(this.keys[post(this.size)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(this.keys[post(this.count)-1])
this.keys == orig(this.keys)
this.keys[] == orig(this.keys[])
this.values == orig(this.values)
this.values[] == orig(this.values[])
this.states == orig(this.states)
this.states[] == orig(this.states[])
this.missingEntries == orig(this.missingEntries)
this.size == this.count
this.size == orig(this.size)
this.size == orig(this.count)
this.mask == orig(this.mask)
this.mask == orig(size(this.keys[]))-1
this.mask == orig(size(this.values[]))-1
this.mask == orig(size(this.states[]))-1
size(this.keys[]) == orig(size(this.values[]))
size(this.keys[]) == orig(size(this.states[]))
this.keys has only one value
this.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.values has only one value
this.values[] == [-1.0, Infinity, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.values[] elements one of { -1.0, 0.0, Infinity }
this.states has only one value
this.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.states[] elements one of { 0, 1 }
this.size == 3
return == true
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.containsKey(int):::EXIT;condition="return == true"
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.containsKey(int, int):::ENTER
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[this.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[this.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.states[this.count-1]
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.states[this.size-1]
this.keys[this.size-1] == this.keys[this.count-1]
this.keys[key] == this.keys[index]
this has only one value
this.keys has only one value
this.keys[] one of { [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.values has only one value
this.values[] elements one of { -1.0, 0.0, Infinity }
this.values[] one of { [-1.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [-1.0, Infinity, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.states has only one value
this.states[] one of { [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 2, 3 }
this.count one of { 3, 4 }
key one of { 0, 1, 2 }
index >= 0
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] one of { 1, 2 }
this.keys[this.size-1] one of { 0, 2 }
this.states[key] one of { 1, 2 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE < this.size
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE < this.count
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= key
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= index
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE < this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= this.keys[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= this.keys[key]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE < this.states[key]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= this.states[index]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL < this.size
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL < this.count
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL <= this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL != this.keys[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL <= this.states[key]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED <= this.size
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED < this.count
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= key
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= this.keys[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= this.keys[key]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= this.states[key]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= this.states[index]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < key
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < index
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.keys[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.keys[key]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.states[key]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.states[index]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > key
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > index
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.keys[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.keys[key]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.states[key]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.states[index]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > key
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT != index
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.keys[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.keys[key]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.states[key]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.states[index]
this.keys[] elements < this.count
this.states[] elements < this.count
key in this.states[]
this.states[] elements <= this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.keys[this.size] in this.states[]
this.keys[key] in this.states[]
this.size <= this.count
this.size >= key
this.size > this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.size > this.keys[this.size-1]
this.size >= this.keys[key]
this.size > this.states[this.size]
this.size >= this.states[key]
this.size >= this.states[index]
this.mask > key
this.mask > index
this.mask > this.keys[this.size-1]
this.mask > this.keys[key]
this.mask > this.states[key]
this.mask > this.states[index]
this.count > key
this.count != index
this.count > this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.count > this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.count > this.keys[this.size]
this.count > this.keys[this.size-1]
this.count > this.keys[key]
this.count > this.states[this.size]
this.count > this.states[key]
this.count > this.states[index]
key <= index
key <= this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
key >= this.keys[key]
index >= this.keys[key]
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] != this.keys[this.size]
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] <= this.keys[this.size-1]
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] != this.states[this.size]
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] <= this.states[key]
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] <= this.states[index]
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] >= this.keys[this.size]
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] != this.keys[this.size-1]
this.keys[key] % this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == 0
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] >= this.keys[key]
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] > this.states[this.size]
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] >= this.states[key]
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] >= this.states[index]
this.keys[this.size] != this.keys[this.size-1]
this.keys[this.size-1] != this.states[this.size]
this.keys[this.size-1] != this.states[key]
this.keys[key] % this.states[key] == 0
this.states[this.size] <= this.states[key]
this.states[index] % this.states[key] == 0
this.states[key] >= this.states[index]
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.containsKey(int, int):::EXIT385
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[orig(key)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[orig(index)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.states[post(key)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.states[post(index)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.states[key])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.states[index])
orig(key) == orig(index)
orig(key) == this.keys[orig(key)]
orig(key) == this.keys[orig(index)]
orig(key) == orig(this.keys[post(key)])
orig(key) == orig(this.keys[post(index)])
orig(key) == orig(this.keys[key])
orig(key) == orig(this.keys[index])
return == true
orig(key) % this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == 0
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.containsKey(int, int):::EXIT385;condition="return == true"
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.containsKey(int, int):::EXIT386
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[this.count-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(this.size)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(this.count)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(key)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(key)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(index)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(index)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[this.count-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[orig(this.count)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(this.size)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(this.count)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.states[post(this.count)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(key)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(key)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(index)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(index)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[this.size-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[this.count-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[key])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[key-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[index])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[index-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.states[this.count-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(key)
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[this.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[orig(this.size)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[orig(key)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.states[post(this.size)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.states[post(key)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.states[this.size])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.states[key-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.size
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(this.size)
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[this.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[orig(this.size)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.states[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.states[orig(this.size)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.states[orig(key)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(this.keys[post(this.size)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(this.states[post(this.size)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(this.states[post(key)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(this.keys[this.size])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(this.states[this.size-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(this.states[key])
this.keys[] == [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.keys[] elements one of { 0, 2 }
this.values[] == [-1.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.values[] elements one of { -1.0, 0.0 }
this.states[] == [1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.count == 4
return == false
orig(index) one of { 1, 7 }
this.states[orig(index)] one of { 0, 2 }
this.states[orig(index)-1] one of { 0, 1 }
this.states[orig(index)] in this.keys[]
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.containsKey(int, int):::EXIT386;condition="not(return == true)"
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.containsKey(int, int):::EXIT
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[this.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(this.mask)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(this.mask)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(this.count)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[this.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[orig(this.mask)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[orig(this.mask)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[orig(this.count)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(this.mask)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(this.mask)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.states[post(this.mask)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.states[post(this.mask)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(this.count)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.states[post(this.count)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
this.keys == orig(this.keys)
this.keys[] == orig(this.keys[])
this.values == orig(this.values)
this.values[] == orig(this.values[])
this.states == orig(this.states)
this.states[] == orig(this.states[])
this.missingEntries == orig(this.missingEntries)
this.size == orig(this.size)
this.mask == orig(this.mask)
this.mask == orig(size(this.keys[]))-1
this.mask == orig(size(this.values[]))-1
this.mask == orig(size(this.states[]))-1
this.count == orig(this.count)
size(this.keys[]) == orig(size(this.values[]))
size(this.keys[]) == orig(size(this.states[]))
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED)-1])
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER)-1])
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.states[this.count-1]
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.states[orig(this.count)-1]
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.states[post(this.count)-1])
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.states[this.count-1])
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED)-1])
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER)-1])
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.states[this.size-1]
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.states[orig(this.size)-1]
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.states[post(this.size)-1])
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.states[this.size-1])
this.keys[this.size-1] == this.keys[this.count-1]
this.keys[this.size-1] == this.keys[orig(this.count)-1]
this.keys[this.size-1] == orig(this.keys[post(this.count)-1])
this.keys[this.size-1] == orig(this.keys[this.count-1])
this.keys[orig(key)] == this.keys[orig(index)]
this.keys[orig(key)] == orig(this.keys[post(index)])
this.keys[orig(key)] == orig(this.keys[index])
(return == false)  <==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.states[orig(key)])
(return == false)  <==>  (this.states[orig(index)] one of { 0, 2 })
(return == false)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[index-1]))
(return == false)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[key-1]))
(return == false)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(index)-1]))
(return == false)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(key)-1]))
(return == false)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[index-1])
(return == false)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[key-1])
(return == false)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL])
(return == false)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(index)-1])
(return == false)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(key)-1])
(return == false)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(key)])
(return == false)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[this.size-1])
(return == false)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(key))
(return == false)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.states[key-1]))
(return == false)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.states[post(key)-1]))
(return == false)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[key-1])
(return == false)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[orig(key)-1])
(return == false)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[this.size])
(return == false)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[this.size])
(return == false)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.size)
(return == false)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL])
(return == false)  ==>  (orig(index) one of { 1, 7 })
(return == false)  ==>  (orig(this.states[index-1]) one of { 0, 1 })
(return == false)  ==>  (orig(this.states[post(index)-1]) one of { 0, 1 })
(return == false)  ==>  (this.count == 4)
(return == false)  ==>  (this.keys[] == [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
(return == false)  ==>  (this.keys[] elements one of { 0, 2 })
(return == false)  ==>  (this.states[] == [1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
(return == false)  ==>  (this.states[index-1] one of { 0, 1 })
(return == false)  ==>  (this.states[orig(index)-1] one of { 0, 1 })
(return == false)  ==>  (this.states[orig(index)] in this.keys[])
(return == false)  ==>  (this.values[] == [-1.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
(return == false)  ==>  (this.values[] elements one of { -1.0, 0.0 })
(return == true)  <==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[orig(index)])
(return == true)  <==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[orig(key)])
(return == true)  <==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED > this.states[orig(key)])
(return == true)  <==>  (orig(key) == this.keys[orig(key)])
(return == true)  <==>  (this.keys[this.size] != this.states[orig(key)])
(return == true)  <==>  (this.size > this.states[orig(key)])
(return == true)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE < this.states[orig(index)])
(return == true)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > orig(index))
(return == true)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED > this.states[orig(index)])
(return == true)  ==>  (org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= orig(index))
(return == true)  ==>  (orig(index) % this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == 0)
(return == true)  ==>  (orig(index) <= this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL])
(return == true)  ==>  (orig(index) in this.states[])
(return == true)  ==>  (orig(index) one of { 0, 1, 2 })
(return == true)  ==>  (orig(key) % this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == 0)
(return == true)  ==>  (orig(key) == orig(index))
(return == true)  ==>  (orig(key) one of { 0, 1, 2 })
(return == true)  ==>  (this.count > orig(index))
(return == true)  ==>  (this.count one of { 3, 4 })
(return == true)  ==>  (this.keys[] elements one of { 0, 1, 2 })
(return == true)  ==>  (this.keys[] one of { [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(return == true)  ==>  (this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] one of { 0, 1 })
(return == true)  ==>  (this.keys[orig(key)] one of { 0, 1, 2 })
(return == true)  ==>  (this.keys[this.size-1] != this.states[orig(index)])
(return == true)  ==>  (this.keys[this.size-1] one of { 0, 2 })
(return == true)  ==>  (this.keys[this.size] != this.states[orig(index)])
(return == true)  ==>  (this.keys[this.size] one of { 0, 2 })
(return == true)  ==>  (this.size > this.states[orig(index)])
(return == true)  ==>  (this.size >= orig(index))
(return == true)  ==>  (this.size one of { 2, 3 })
(return == true)  ==>  (this.states[] one of { [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(return == true)  ==>  (this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] one of { 1, 2 })
(return == true)  ==>  (this.states[this.size] <= this.states[orig(index)])
(return == true)  ==>  (this.states[this.size] one of { 0, 1 })
(return == true)  ==>  (this.values[] elements one of { -1.0, 0.0, Infinity })
(return == true)  ==>  (this.values[] one of { [-1.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [-1.0, Infinity, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] })
this.keys has only one value
this.keys[] one of { [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.values has only one value
this.values[] elements one of { -1.0, 0.0, Infinity }
this.values[] one of { [-1.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [-1.0, Infinity, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.states has only one value
this.states[] one of { [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 2, 3 }
this.count one of { 3, 4 }
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] one of { 1, 2 }
this.keys[this.size-1] one of { 0, 2 }
this.states[orig(key)] one of { 1, 2 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE < this.size
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE < this.count
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE < this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= this.keys[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= this.keys[orig(key)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE < this.states[orig(key)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= this.states[orig(index)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL < this.size
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL < this.count
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL <= this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL != this.keys[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL <= this.states[orig(key)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED <= this.size
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED < this.count
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= this.keys[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= this.keys[orig(key)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= this.states[orig(key)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= this.states[orig(index)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.keys[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.keys[orig(key)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.states[orig(key)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.states[orig(index)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.keys[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.keys[orig(key)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.states[orig(key)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.states[orig(index)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.keys[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.keys[orig(key)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.states[orig(key)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.states[orig(index)]
this.keys[] elements < this.count
this.states[] elements < this.count
orig(key) in this.states[]
this.states[] elements <= this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.keys[this.size] in this.states[]
this.keys[orig(key)] in this.states[]
this.size <= this.count
this.size >= orig(key)
this.size > this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.size > this.keys[this.size-1]
this.size >= this.keys[orig(key)]
this.size > this.states[this.size]
this.size >= this.states[orig(key)]
this.size >= this.states[orig(index)]
this.mask > orig(key)
this.mask > orig(index)
this.mask > this.keys[this.size-1]
this.mask > this.keys[orig(key)]
this.mask > this.states[orig(key)]
this.mask > this.states[orig(index)]
this.count > orig(key)
this.count != orig(index)
this.count > this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.count > this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.count > this.keys[this.size]
this.count > this.keys[this.size-1]
this.count > this.keys[orig(key)]
this.count > this.states[this.size]
this.count > this.states[orig(key)]
this.count > this.states[orig(index)]
orig(key) <= this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
orig(key) >= this.keys[orig(key)]
orig(index) >= this.keys[orig(key)]
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] != this.keys[this.size]
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] <= this.keys[this.size-1]
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] != this.states[this.size]
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] <= this.states[orig(key)]
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] <= this.states[orig(index)]
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] >= this.keys[this.size]
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] != this.keys[this.size-1]
this.keys[orig(key)] % this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == 0
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] >= this.keys[orig(key)]
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] > this.states[this.size]
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] >= this.states[orig(key)]
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] >= this.states[orig(index)]
this.keys[this.size] != this.keys[this.size-1]
this.keys[this.size-1] != this.states[this.size]
this.keys[this.size-1] != this.states[orig(key)]
this.keys[orig(key)] % this.states[orig(key)] == 0
this.states[this.size] <= this.states[orig(key)]
this.states[orig(index)] % this.states[orig(key)] == 0
this.states[orig(key)] >= this.states[orig(index)]
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.containsKey(int, int):::EXIT;condition="return == true"
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[orig(key)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[orig(index)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.states[post(key)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.states[post(index)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.states[key])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.states[index])
orig(key) == orig(index)
orig(key) == this.keys[orig(key)]
orig(key) == this.keys[orig(index)]
orig(key) == orig(this.keys[post(key)])
orig(key) == orig(this.keys[post(index)])
orig(key) == orig(this.keys[key])
orig(key) == orig(this.keys[index])
return == true
orig(key) % this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == 0
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.containsKey(int, int):::EXIT;condition="not(return == true)"
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[this.count-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(this.size)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(this.count)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(key)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(key)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(index)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(index)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[this.count-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[orig(this.count)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(this.size)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(this.count)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.states[post(this.count)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(key)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(key)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(index)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(index)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[this.size-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[this.count-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[key])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[key-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[index])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[index-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.states[this.count-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(key)
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[this.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[orig(this.size)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[orig(key)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.states[post(this.size)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.states[post(key)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.states[this.size])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.states[key-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.size
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(this.size)
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[this.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[orig(this.size)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.states[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.states[orig(this.size)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.states[orig(key)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(this.keys[post(this.size)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(this.states[post(this.size)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(this.states[post(key)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(this.keys[this.size])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(this.states[this.size-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(this.states[key])
this.keys[] == [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.keys[] elements one of { 0, 2 }
this.values[] == [-1.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.values[] elements one of { -1.0, 0.0 }
this.states[] == [1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.count == 4
return == false
orig(index) one of { 1, 7 }
this.states[orig(index)] one of { 0, 2 }
this.states[orig(index)-1] one of { 0, 1 }
this.states[orig(index)] in this.keys[]
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.doRemove(int):::ENTER
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[this.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[this.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[index-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[this.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[this.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == index
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.keys[index]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[this.count-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[index]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[index-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[this.count-1]
this.size == this.count
this has only one value
this.keys has only one value
this.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.values has only one value
this.values[] == [-1.0, Infinity, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.values[] elements one of { -1.0, 0.0, Infinity }
this.states has only one value
this.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.states[] elements one of { 0, 1 }
this.size == 3
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.doRemove(int):::EXIT
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[this.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[this.count-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(this.size)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(this.mask)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(this.mask)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(this.count)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(index)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(index)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[this.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[this.count-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[orig(this.size)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[orig(this.mask)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[orig(this.mask)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[orig(this.count)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(this.mask)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(this.mask)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.states[post(this.mask)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.states[post(this.mask)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(this.count)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(this.count)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.states[post(this.count)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.states[post(this.count)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(index)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[this.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[orig(this.size)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[orig(this.count)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[orig(index)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.keys[post(this.size)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.states[post(this.size)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.states[post(this.size)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.keys[post(index)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.states[post(index)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.states[post(index)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.size
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[this.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[orig(this.size)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[orig(this.count)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.states[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.states[orig(index)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(this.keys[post(this.size)])
this.keys == orig(this.keys)
this.values == orig(this.values)
this.states == orig(this.states)
this.missingEntries == orig(this.missingEntries)
this.mask == orig(this.mask)
this.mask == orig(size(this.keys[]))-1
this.mask == orig(size(this.values[]))-1
this.mask == orig(size(this.states[]))-1
size(this.keys[]) == orig(size(this.keys[]))
size(this.keys[]) == orig(size(this.values[]))
size(this.keys[]) == orig(size(this.states[]))
this.keys has only one value
this.keys[] == [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.keys[] elements one of { 0, 2 }
this.values has only one value
this.values[] == [-1.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.values[] elements one of { -1.0, 0.0 }
this.states has only one value
this.states[] == [1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.count == 4
return == Infinity
this.missingEntries in orig(this.values[])
return in orig(this.values[])
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.findInsertionIndex(int):::ENTER
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[this.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[this.count]
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] == this.states[key]
this.keys[this.size] == this.keys[key]
key one of { 0, 1, 2 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= key
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= key
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < key
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > key
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > key
this.keys[] elements <= this.count
this.states[] elements <= this.count
this.keys[this.size] in this.states[]
this.size <= this.count
this.mask > key
this.count >= this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
this.count >= this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
this.count >= this.keys[this.size]
key >= this.keys[this.size]
key >= this.states[this.size]
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] >= this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] >= this.keys[this.size]
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] >= this.states[this.size]
this.size - this.count + this.keys[this.size] == 0
this.size - this.count + 2 * this.states[this.size] == 0
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.findInsertionIndex(int):::EXIT
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[this.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(this.mask)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(this.mask)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(this.count)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[this.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[orig(this.mask)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[orig(this.mask)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[orig(this.count)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(this.mask)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(this.mask)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.states[post(this.mask)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.states[post(this.mask)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(this.count)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.states[post(this.count)])
this.keys == orig(this.keys)
this.keys[] == orig(this.keys[])
this.values == orig(this.values)
this.values[] == orig(this.values[])
this.states == orig(this.states)
this.states[] == orig(this.states[])
this.missingEntries == orig(this.missingEntries)
this.size == orig(this.size)
this.mask == orig(this.mask)
this.mask == orig(size(this.keys[]))-1
this.mask == orig(size(this.values[]))-1
this.mask == orig(size(this.states[]))-1
this.count == orig(this.count)
size(this.keys[]) == orig(size(this.values[]))
size(this.keys[]) == orig(size(this.states[]))
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE] == orig(this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL)-1])
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED)-1])
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER)-1])
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED)-1])
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER)-1])
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] == this.states[orig(key)]
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] == orig(this.states[post(key)])
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] == orig(this.states[key])
this.keys[this.size] == this.keys[orig(key)]
this.keys[this.size] == orig(this.keys[post(key)])
this.keys[this.size] == orig(this.keys[key])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= return
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < return
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > return
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > return
this.keys[] elements <= this.count
this.states[] elements <= this.count
this.keys[this.size] in this.states[]
this.size <= this.count
this.mask > return
this.mask > orig(key)
this.count >= this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
this.count >= this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
this.count >= this.keys[this.size]
return <= orig(key)
orig(key) >= this.keys[this.size]
orig(key) >= this.states[this.size]
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] >= this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] >= this.keys[this.size]
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] >= this.states[this.size]
this.size - this.count + this.keys[this.size] == 0
this.size - this.count + 2 * this.states[this.size] == 0
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.findInsertionIndex(int[], byte[], int, int):::ENTER
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == states[org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == states[org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == states[org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == states[org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == keys[mask]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == keys[mask-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == states[mask]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == states[mask-1]
keys[] <= states[] (lexically)
mask == size(keys[])-1
mask == size(states[])-1
size(keys[]) == size(states[])
states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE] == states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL-1]
keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED-1]
keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER-1]
states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED-1]
states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER-1]
states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] == states[key]
keys[] elements one of { 0, 1, 2 }
states[] elements one of { 0, 1, 2 }
key one of { 0, 1, 2 }
size(keys[]) == 32
states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE] one of { 0, 1 }
keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] one of { 0, 1 }
keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] one of { 0, 2 }
states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] one of { 0, 1 }
keys[key] one of { 0, 2 }
keys[] elements >= org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE
states[] elements >= org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= key
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= keys[key]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL >= states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL >= keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL != keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL >= states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL != keys[key]
keys[] elements <= org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED
states[] elements <= org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= key
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED > states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED > keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED > states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= keys[key]
keys[] elements > org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID
states[] elements > org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < key
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < keys[key]
keys[] elements < org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE
states[] elements < org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > key
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > keys[key]
keys[] elements < org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT
states[] elements < org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > key
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > keys[key]
keys[] elements < mask
states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] in keys[]
states[] elements < mask
keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] in states[]
keys[key] in states[]
key < mask
key >= keys[key]
mask > states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
mask > keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
mask > states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
mask > keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
mask > states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
mask > keys[key]
states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE] >= keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE] >= states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] <= states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] >= states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] >= keys[key]
keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] >= states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] >= keys[key]
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.findInsertionIndex(int[], byte[], int, int):::EXIT275
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == keys[return]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == keys[orig(key)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == states[return]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == states[orig(key)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(keys[post(key)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(states[post(key)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(keys[post(return)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(states[post(return)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(keys[key])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(states[key])
return == orig(key)
keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL)])
keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED-1]
keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED)-1])
keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER-1]
keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER)-1])
keys[] elements one of { 0, 1 }
keys[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
states[] elements one of { 0, 1 }
states[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
return one of { 0, 1, 2 }
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.findInsertionIndex(int[], byte[], int, int):::EXIT277
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == states[orig(key)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(states[post(key)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(states[key])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER)])
orig(key) == keys[orig(key)]
orig(key) == orig(keys[post(key)])
orig(key) == orig(keys[key])
keys[] one of { [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
states[] one of { [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
return one of { -3, -1 }
orig(keys) has only one value
orig(states) has only one value
orig(key) one of { 0, 2 }
states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] one of { 1, 2 }
orig(key) in states[]
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.findInsertionIndex(int[], byte[], int, int):::EXIT
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == states[org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == states[org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == states[org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == states[org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == keys[orig(mask)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == keys[orig(mask)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == states[orig(mask)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == states[orig(mask)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(keys[post(mask)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(keys[post(mask)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(states[post(mask)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(states[post(mask)-1])
keys[] <= states[] (lexically)
keys[] == orig(keys[])
states[] == orig(states[])
orig(mask) == size(keys[])-1
orig(mask) == size(states[])-1
states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE] == states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL-1]
states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE] == orig(states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL)-1])
keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED-1]
keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED)-1])
keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER-1]
keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER)-1])
states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED-1]
states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED)-1])
states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER-1]
states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER)-1])
states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] == states[orig(key)]
states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] == orig(states[post(key)])
states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] == orig(states[key])
keys[] elements one of { 0, 1, 2 }
states[] elements one of { 0, 1, 2 }
states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE] one of { 0, 1 }
keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] one of { 0, 1 }
keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] one of { 0, 2 }
states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] one of { 0, 1 }
keys[orig(key)] one of { 0, 2 }
keys[] elements >= org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE
states[] elements >= org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= keys[orig(key)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL >= states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL >= keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL != keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL >= states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL != keys[orig(key)]
keys[] elements <= org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED
states[] elements <= org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= return
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED > states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED > keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED > states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= keys[orig(key)]
keys[] elements > org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID
states[] elements > org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < return
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < keys[orig(key)]
keys[] elements < org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE
states[] elements < org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > return
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > keys[orig(key)]
keys[] elements < org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT
states[] elements < org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > return
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > keys[orig(key)]
keys[] elements < orig(mask)
states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] in keys[]
states[] elements < orig(mask)
keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] in states[]
keys[orig(key)] in states[]
return <= orig(key)
return < orig(mask)
orig(key) >= keys[orig(key)]
orig(mask) > states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
orig(mask) > keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
orig(mask) > states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
orig(mask) > keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
orig(mask) > states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
orig(mask) > keys[orig(key)]
states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE] >= keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE] >= states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] <= states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] >= states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] >= keys[orig(key)]
keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] >= states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] >= keys[orig(key)]
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.get(int):::ENTER
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[this.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[this.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.states[this.count-1]
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.states[this.size-1]
this.keys[this.size-1] == this.keys[this.count-1]
this has only one value
this.keys has only one value
this.keys[] one of { [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.values has only one value
this.values[] elements one of { -1.0, 0.0, Infinity }
this.values[] one of { [-1.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [-1.0, Infinity, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.states has only one value
this.states[] one of { [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 2, 3 }
this.count one of { 3, 4 }
key one of { 0, 1, 2 }
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] one of { 1, 2 }
this.keys[this.size-1] one of { 0, 2 }
this.states[key] one of { 1, 2 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE < this.size
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE < this.count
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= key
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE < this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= this.keys[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= this.keys[key]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE < this.states[key]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL < this.size
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL < this.count
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL <= this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL != this.keys[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL <= this.states[key]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED <= this.size
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED < this.count
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= key
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= this.keys[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= this.keys[key]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= this.states[key]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < key
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.keys[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.keys[key]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.states[key]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > key
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.keys[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.keys[key]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.states[key]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > key
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.keys[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.keys[key]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.states[key]
this.keys[] elements < this.count
this.states[] elements < this.count
key in this.states[]
this.states[] elements <= this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.keys[this.size] in this.states[]
this.keys[key] in this.states[]
this.size <= this.count
this.size >= key
this.size > this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.size > this.keys[this.size-1]
this.size >= this.keys[key]
this.size > this.states[this.size]
this.size >= this.states[key]
this.mask > key
this.mask > this.keys[this.size-1]
this.mask > this.keys[key]
this.mask > this.states[key]
this.count > key
this.count > this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.count > this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.count > this.keys[this.size]
this.count > this.keys[this.size-1]
this.count > this.keys[key]
this.count > this.states[this.size]
this.count > this.states[key]
key <= this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
key >= this.keys[key]
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] != this.keys[this.size]
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] <= this.keys[this.size-1]
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] != this.states[this.size]
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] <= this.states[key]
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] >= this.keys[this.size]
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] != this.keys[this.size-1]
this.keys[key] % this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == 0
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] >= this.keys[key]
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] > this.states[this.size]
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] >= this.states[key]
this.keys[this.size] != this.keys[this.size-1]
this.keys[this.size-1] != this.states[this.size]
this.keys[this.size-1] != this.states[key]
this.keys[key] % this.states[key] == 0
this.states[this.size] <= this.states[key]
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.get(int):::EXIT183
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[orig(key)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.states[post(key)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.states[key])
orig(key) == this.keys[orig(key)]
orig(key) == orig(this.keys[post(key)])
orig(key) == orig(this.keys[key])
return one of { -1.0, Infinity }
this.missingEntries != return
orig(key) % this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == 0
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.get(int):::EXIT199
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[this.count-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(this.size)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(this.count)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(key)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(key)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[this.count-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[orig(this.count)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(this.size)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(this.count)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.states[post(this.count)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(key)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(key)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[this.size-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[this.count-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[key])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[key-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.states[this.count-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(key)
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[this.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[orig(this.size)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[orig(key)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.states[post(this.size)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.states[post(key)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.states[this.size])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.states[key-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.size
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(this.size)
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[this.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[orig(this.size)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.states[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.states[orig(this.size)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.states[orig(key)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(this.keys[post(this.size)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(this.states[post(this.size)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(this.states[post(key)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(this.keys[this.size])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(this.states[this.size-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(this.states[key])
this.missingEntries == return
return == orig(this.missingEntries)
this.keys[] == [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.keys[] elements one of { 0, 2 }
this.values[] == [-1.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.values[] elements one of { -1.0, 0.0 }
this.states[] == [1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.count == 4
return == 0.0
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.get(int):::EXIT
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[this.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(this.mask)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(this.mask)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(this.count)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[this.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[orig(this.mask)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[orig(this.mask)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[orig(this.count)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(this.mask)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(this.mask)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.states[post(this.mask)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.states[post(this.mask)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(this.count)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.states[post(this.count)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
this.keys == orig(this.keys)
this.keys[] == orig(this.keys[])
this.values == orig(this.values)
this.values[] == orig(this.values[])
this.states == orig(this.states)
this.states[] == orig(this.states[])
this.missingEntries == orig(this.missingEntries)
this.size == orig(this.size)
this.mask == orig(this.mask)
this.mask == orig(size(this.keys[]))-1
this.mask == orig(size(this.values[]))-1
this.mask == orig(size(this.states[]))-1
this.count == orig(this.count)
size(this.keys[]) == orig(size(this.values[]))
size(this.keys[]) == orig(size(this.states[]))
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED)-1])
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER)-1])
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.states[this.count-1]
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.states[orig(this.count)-1]
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.states[post(this.count)-1])
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.states[this.count-1])
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED)-1])
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER)-1])
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.states[this.size-1]
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.states[orig(this.size)-1]
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.states[post(this.size)-1])
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.states[this.size-1])
this.keys[this.size-1] == this.keys[this.count-1]
this.keys[this.size-1] == this.keys[orig(this.count)-1]
this.keys[this.size-1] == orig(this.keys[post(this.count)-1])
this.keys[this.size-1] == orig(this.keys[this.count-1])
this.keys has only one value
this.keys[] one of { [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.values has only one value
this.values[] elements one of { -1.0, 0.0, Infinity }
this.values[] one of { [-1.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [-1.0, Infinity, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.states has only one value
this.states[] one of { [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 2, 3 }
this.count one of { 3, 4 }
return one of { -1.0, 0.0, Infinity }
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] one of { 1, 2 }
this.keys[this.size-1] one of { 0, 2 }
this.states[orig(key)] one of { 1, 2 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE < this.size
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE < this.count
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE < this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= this.keys[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= this.keys[orig(key)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE < this.states[orig(key)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL < this.size
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL < this.count
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL <= this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL != this.keys[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL <= this.states[orig(key)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED <= this.size
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED < this.count
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= this.keys[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= this.keys[orig(key)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= this.states[orig(key)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.keys[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.keys[orig(key)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.states[orig(key)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.keys[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.keys[orig(key)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.states[orig(key)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.keys[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.keys[orig(key)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.states[orig(key)]
this.keys[] elements < this.count
return in this.values[]
this.states[] elements < this.count
orig(key) in this.states[]
this.states[] elements <= this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.keys[this.size] in this.states[]
this.keys[orig(key)] in this.states[]
this.size <= this.count
this.size >= orig(key)
this.size > this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.size > this.keys[this.size-1]
this.size >= this.keys[orig(key)]
this.size > this.states[this.size]
this.size >= this.states[orig(key)]
this.mask > orig(key)
this.mask > this.keys[this.size-1]
this.mask > this.keys[orig(key)]
this.mask > this.states[orig(key)]
this.count > orig(key)
this.count > this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.count > this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.count > this.keys[this.size]
this.count > this.keys[this.size-1]
this.count > this.keys[orig(key)]
this.count > this.states[this.size]
this.count > this.states[orig(key)]
orig(key) <= this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
orig(key) >= this.keys[orig(key)]
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] != this.keys[this.size]
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] <= this.keys[this.size-1]
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] != this.states[this.size]
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] <= this.states[orig(key)]
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] >= this.keys[this.size]
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] != this.keys[this.size-1]
this.keys[orig(key)] % this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == 0
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] >= this.keys[orig(key)]
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] > this.states[this.size]
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] >= this.states[orig(key)]
this.keys[this.size] != this.keys[this.size-1]
this.keys[this.size-1] != this.states[this.size]
this.keys[this.size-1] != this.states[orig(key)]
this.keys[orig(key)] % this.states[orig(key)] == 0
this.states[this.size] <= this.states[orig(key)]
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.hashOf(int):::ENTER
key one of { 0, 1, 2 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= key
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= key
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < key
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > key
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > key
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.hashOf(int):::EXIT
return == orig(key)
return one of { 0, 1, 2 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= return
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= return
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < return
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > return
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > return
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.iterator():::ENTER
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[this.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[this.count-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[this.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[this.count-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[this.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.size
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[this.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.states[this.size-1]
this has only one value
this.keys has only one value
this.keys[] == [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.keys[] elements one of { 0, 2 }
this.values has only one value
this.values[] == [-1.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.values[] elements one of { -1.0, 0.0 }
this.states has only one value
this.states[] == [1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.count == 4
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.iterator():::EXIT
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == return.next
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[this.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[this.count-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[return.referenceCount]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[return.referenceCount-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[return.next]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(this.size)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(this.mask)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(this.mask)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(this.count)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(this.count)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[this.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[this.count-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[return.referenceCount]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[return.referenceCount-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[orig(this.mask)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[orig(this.mask)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[orig(this.count)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[orig(this.count)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(this.size)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.mask]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.mask-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.mask]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.mask-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(this.mask)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(this.mask)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.states[post(this.mask)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.states[post(this.mask)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.count-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.count-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(this.count)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(this.count)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.states[post(this.count)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.states[post(this.count)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[return.referenceCount]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[return.referenceCount-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[return.referenceCount]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[return.referenceCount-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(return.referenceCount)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(return.referenceCount)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.states[post(return.referenceCount)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.states[post(return.referenceCount)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[return.next]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(return.next)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(this.size)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(this.mask)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(this.mask)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(this.count)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(this.count)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(this.mask)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(this.mask)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(this.count)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(this.count)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[this.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[return.next]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[orig(this.size)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.states[post(this.size)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[return.next]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.states[post(return.next)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(this.size)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.size
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[this.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[orig(this.size)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.states[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.states[orig(this.size)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[this.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(this.keys[post(this.size)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(this.states[post(this.size)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[orig(this.size)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[orig(this.size)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.size)-1])
this.keys == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys
this.keys == orig(this.keys)
this.keys[] == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[]
this.keys[] == orig(this.keys[])
this.values == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values
this.values == orig(this.values)
this.values[] == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[]
this.values[] == orig(this.values[])
this.states == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states
this.states == orig(this.states)
this.states[] == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[]
this.states[] == orig(this.states[])
this.missingEntries == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.missingEntries
this.missingEntries == orig(this.missingEntries)
this.mask == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.mask
this.mask == orig(this.mask)
this.mask == size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.keys[])-1
this.mask == size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[])-1
this.mask == size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[])-1
this.mask == orig(size(this.keys[]))-1
this.mask == orig(size(this.values[]))-1
this.mask == orig(size(this.states[]))-1
this.count == return.referenceCount
this.count == org.apache.commons.math.util.OpenIntToDoubleHashMap.this.count
this.count == orig(this.count)
org.apache.commons.math.util.OpenIntToDoubleHashMap.this == orig(this)
size(this.keys[]) == size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.values[])
size(this.keys[]) == size(org.apache.commons.math.util.OpenIntToDoubleHashMap.this.states[])
size(this.keys[]) == orig(size(this.values[]))
size(this.keys[]) == orig(size(this.states[]))
this.keys has only one value
this.keys[] == [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.keys[] elements one of { 0, 2 }
this.values has only one value
this.values[] == [-1.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.values[] elements one of { -1.0, 0.0 }
this.states has only one value
this.states[] == [1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.count == 4
return.current == -1
org.apache.commons.math.util.OpenIntToDoubleHashMap.this has only one value
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.perturb(int):::ENTER
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == hash
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.perturb(int):::EXIT
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == return
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.probe(int, int):::ENTER
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == perturb
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == j
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.probe(int, int):::EXIT
return == 7
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.put(int, double):::ENTER
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[this.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[this.count]
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] == this.states[key]
this.keys[this.size] == this.keys[key]
key one of { 0, 1, 2 }
value one of { -1.0, Infinity, Double.NaN }
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= key
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= key
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < key
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > key
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > key
this.keys[] elements <= this.count
this.states[] elements <= this.count
this.keys[this.size] in this.states[]
this.missingEntries != value
this.size <= this.count
this.mask > key
this.count >= this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
this.count >= this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
this.count >= this.keys[this.size]
key >= this.keys[this.size]
key >= this.states[this.size]
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] >= this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] >= this.keys[this.size]
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] >= this.states[this.size]
this.size - this.count + this.keys[this.size] == 0
this.size - this.count + 2 * this.states[this.size] == 0
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.put(int, double):::EXIT
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(this.mask)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(this.mask)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[orig(this.mask)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[orig(this.mask)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(this.mask)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(this.mask)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.states[post(this.mask)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.states[post(this.mask)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(this.count)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.states[post(this.count)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[orig(key)]
this.keys == orig(this.keys)
this.keys[] < this.states[] (lexically)
this.keys[] <= orig(this.states[]) (lexically)
this.values == orig(this.values)
this.states == orig(this.states)
this.states[] > orig(this.keys[]) (lexically)
this.states[] >= orig(this.keys[]) (lexically)
this.missingEntries == orig(this.missingEntries)
this.mask == orig(this.mask)
this.mask == orig(size(this.keys[]))-1
this.mask == orig(size(this.values[]))-1
this.mask == orig(size(this.states[]))-1
orig(key) == this.keys[orig(key)]
size(this.keys[]) == orig(size(this.keys[]))
size(this.keys[]) == orig(size(this.values[]))
size(this.keys[]) == orig(size(this.states[]))
orig(this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER)]) == orig(this.states[key])
this.keys[this.size-1] == this.keys[this.count-1]
orig(this.keys[post(this.size)]) == orig(this.keys[key])
orig(this.keys[post(this.size)-1]) == orig(this.keys[post(this.count)-1])
orig(this.states[post(this.size)]) == orig(this.states[this.size])
this.size one of { 1, 2, 3 }
return one of { -1.0, 0.0 }
this.keys[this.count] one of { 0, 2 }
this.states[this.count-1] one of { 0, 1 }
this.states[orig(this.size)] one of { 0, 1 }
this.states[orig(this.count)] one of { 0, 1 }
orig(this.keys[post(this.size)-1]) one of { 0, 2 }
orig(this.states[post(this.count)-1]) one of { 0, 1 }
orig(this.keys[key]) one of { 0, 2 }
orig(this.states[key]) one of { 0, 1 }
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE < this.size
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE < this.count
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= this.keys[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= this.keys[orig(this.size)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= this.states[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= this.states[this.count-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= this.states[orig(this.size)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= orig(this.keys[post(this.size)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= orig(this.states[post(this.size)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= orig(this.states[post(this.count)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= orig(this.keys[key])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE <= orig(this.states[key])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL <= this.size
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL <= this.count
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL != this.keys[this.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL >= this.states[this.count-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL >= this.states[orig(this.size)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL >= this.states[orig(this.count)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL != orig(this.keys[post(this.size)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL >= orig(this.states[post(this.count)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL != orig(this.keys[key])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= this.keys[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= this.keys[orig(this.size)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= this.keys[orig(this.count)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= this.states[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED > this.states[this.count-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED > this.states[orig(this.size)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED > this.states[orig(this.count)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= orig(this.keys[post(this.size)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= orig(this.states[post(this.size)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED > orig(this.states[post(this.count)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED >= orig(this.keys[key])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED > orig(this.states[key])
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.keys[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.keys[orig(this.size)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.keys[orig(this.count)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.states[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.states[this.count-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.states[orig(this.size)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < this.states[orig(this.count)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < orig(this.keys[post(this.size)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < orig(this.states[post(this.size)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < orig(this.states[post(this.count)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < orig(this.keys[key])
org.apache.commons.math.util.OpenIntToDoubleHashMap.serialVersionUID < orig(this.states[key])
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.keys[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.keys[orig(this.size)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.keys[orig(this.count)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.states[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.states[this.count-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.states[orig(this.size)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > this.states[orig(this.count)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > orig(this.keys[post(this.size)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > orig(this.states[post(this.size)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > orig(this.states[post(this.count)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > orig(this.keys[key])
org.apache.commons.math.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE > orig(this.states[key])
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.keys[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.keys[orig(this.size)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.keys[orig(this.count)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.states[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.states[this.count-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.states[orig(this.size)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > this.states[orig(this.count)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > orig(this.keys[post(this.size)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > orig(this.states[post(this.size)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > orig(this.states[post(this.count)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > orig(this.keys[key])
org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT > orig(this.states[key])
this.keys[] elements <= this.count
this.keys[] >= orig(this.keys[]) (elementwise)
orig(this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL)]) in this.keys[]
orig(this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL)]) in this.keys[]
orig(this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED)]) in this.keys[]
orig(this.keys[post(this.size)-1]) in this.keys[]
orig(this.states[post(this.size)-1]) in this.keys[]
orig(this.states[post(this.count)-1]) in this.keys[]
orig(this.keys[key]) in this.keys[]
return in this.values[]
this.states[] elements <= this.count
this.states[] >= orig(this.states[]) (elementwise)
orig(this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE)]) in this.states[]
orig(this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL)]) in this.states[]
orig(this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL)]) in this.states[]
orig(this.states[post(this.size)-1]) in this.states[]
orig(this.states[post(this.count)-1]) in this.states[]
orig(this.keys[key]) in this.states[]
orig(this.states[this.size]) in this.states[]
orig(this.states[key]) in this.states[]
this.missingEntries >= return
this.missingEntries in orig(this.values[])
this.missingEntries != orig(value)
this.count % this.size == 0
this.size <= this.count
orig(this.keys[]) elements <= this.size
orig(this.states[]) elements <= this.size
this.size >= orig(this.size)
this.size >= orig(key)
this.size > orig(this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE)])
this.size > this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.size > orig(this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL)])
this.size >= orig(this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL)])
this.size > this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
this.size >= orig(this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED)])
this.keys[this.size] % this.size == 0
this.size > this.keys[this.size-1]
this.keys[this.count] % this.size == 0
this.size >= this.keys[orig(this.size)]
this.size > this.keys[orig(this.count)]
this.size > this.states[this.size]
this.size >= this.states[this.size-1]
this.size > this.states[this.count]
this.size >= this.states[this.count-1]
this.size >= this.states[orig(this.size)]
this.size >= this.states[orig(this.count)]
this.size > orig(this.keys[post(this.size)-1])
this.size >= orig(this.states[post(this.size)-1])
this.size > orig(this.states[post(this.count)-1])
orig(this.keys[key]) % this.size == 0
this.size >= orig(this.keys[key])
this.size > orig(this.states[this.size])
this.size > orig(this.states[key])
orig(this.keys[]) elements < this.mask
orig(this.states[]) elements < this.mask
this.mask > orig(this.size)
this.mask > orig(this.count)
this.mask > orig(key)
this.mask > orig(this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE)])
this.mask > orig(this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL)])
this.mask > orig(this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL)])
this.mask > orig(this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED)])
this.mask > this.keys[this.size-1]
this.mask > this.keys[orig(this.size)]
this.mask > this.keys[orig(this.count)]
this.mask > this.states[this.size-1]
this.mask > this.states[this.count-1]
this.mask > this.states[orig(this.size)]
this.mask > this.states[orig(this.count)]
this.mask > orig(this.keys[post(this.size)-1])
this.mask > orig(this.states[post(this.size)-1])
this.mask > orig(this.states[post(this.count)-1])
this.mask > orig(this.keys[key])
this.mask > orig(this.states[this.size])
this.mask > orig(this.states[key])
orig(this.keys[]) elements < this.count
orig(this.states[]) elements < this.count
this.count >= orig(this.size)
this.count >= orig(this.count)
this.count >= orig(key)
this.count > orig(this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE)])
this.count > this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.count > this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.count > orig(this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL)])
this.count > orig(this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL)])
this.count >= this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
this.count > this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
this.count > orig(this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED)])
this.count >= this.keys[this.size]
this.count > this.keys[this.size-1]
this.keys[this.count] % this.count == 0
this.count > this.keys[orig(this.size)]
this.count > this.keys[orig(this.count)]
this.count > this.states[this.size]
this.count >= this.states[this.size-1]
this.count > this.states[this.count]
this.count >= this.states[this.count-1]
this.count >= this.states[orig(this.size)]
this.count >= this.states[orig(this.count)]
this.count > orig(this.keys[post(this.size)-1])
this.count > orig(this.states[post(this.size)-1])
this.count > orig(this.states[post(this.count)-1])
this.count > orig(this.keys[key])
this.count > orig(this.states[this.size])
this.count > orig(this.states[key])
return in orig(this.values[])
orig(this.keys[]) elements <= this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
orig(this.states[post(this.size)-1]) in orig(this.keys[])
orig(this.states[post(this.count)-1]) in orig(this.keys[])
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] in orig(this.states[])
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] in orig(this.states[])
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] in orig(this.states[])
this.states[this.size] in orig(this.states[])
this.states[this.count] in orig(this.states[])
orig(this.keys[key]) in orig(this.states[])
orig(this.size) >= this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
orig(this.size) >= this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
orig(this.size) >= this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
orig(this.size) >= this.keys[this.size-1]
orig(this.size) >= this.keys[orig(this.size)]
orig(this.size) >= this.keys[orig(this.count)]
orig(this.size) >= this.states[this.size]
orig(this.size) >= this.states[this.count]
orig(this.size) >= orig(this.keys[post(this.size)-1])
orig(this.size) >= orig(this.states[post(this.size)-1])
orig(this.size) >= orig(this.states[post(this.count)-1])
orig(this.size) >= orig(this.keys[key])
orig(this.size) >= orig(this.states[key])
orig(this.count) >= this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
orig(this.count) >= this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
orig(this.count) >= this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
orig(this.count) >= this.keys[this.size-1]
orig(this.count) >= this.keys[orig(this.size)]
orig(this.count) >= this.keys[orig(this.count)]
orig(this.count) >= this.states[this.size]
orig(this.count) >= this.states[this.count]
orig(this.count) >= orig(this.keys[post(this.size)-1])
orig(this.count) >= orig(this.states[post(this.size)-1])
orig(this.count) >= orig(this.states[post(this.count)-1])
orig(this.count) >= orig(this.keys[key])
orig(this.count) >= orig(this.states[key])
orig(key) >= this.keys[this.size]
orig(key) >= this.keys[this.count]
orig(key) >= this.keys[orig(this.size)]
orig(key) >= this.keys[orig(this.count)]
orig(key) >= this.states[this.size]
orig(key) >= this.states[this.count]
orig(this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE)]) >= this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
orig(this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE)]) >= this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
orig(this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE)]) >= this.states[this.size]
orig(this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE)]) >= this.states[this.count]
orig(this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE)]) >= orig(this.states[post(this.count)-1])
orig(this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE)]) >= orig(this.states[key])
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] <= this.keys[this.size-1]
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] <= this.states[this.size-1]
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] <= this.states[this.count-1]
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] >= orig(this.states[post(this.count)-1])
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] >= orig(this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL)])
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] <= this.states[this.size-1]
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] >= orig(this.states[post(this.size)-1])
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] >= orig(this.states[post(this.count)-1])
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] >= orig(this.keys[key])
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] >= orig(this.states[this.size])
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] >= orig(this.states[key])
orig(this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL)]) <= this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
orig(this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL)]) <= this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
orig(this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL)]) <= this.keys[this.size-1]
orig(this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL)]) <= this.states[this.size-1]
orig(this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL)]) <= this.states[this.count-1]
orig(this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL)]) >= orig(this.states[post(this.count)-1])
orig(this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL)]) <= this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
orig(this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL)]) <= this.states[this.size-1]
orig(this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL)]) >= orig(this.states[post(this.size)-1])
orig(this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL)]) >= orig(this.states[post(this.count)-1])
orig(this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL)]) >= orig(this.keys[key])
orig(this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL)]) >= orig(this.states[key])
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] >= this.keys[this.count]
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] >= this.states[this.count]
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] != this.states[this.count-1]
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] != this.states[orig(this.size)]
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] != this.states[orig(this.count)]
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] >= orig(this.keys[post(this.size)-1])
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] >= orig(this.states[post(this.size)-1])
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] >= orig(this.states[post(this.count)-1])
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] >= orig(this.keys[key])
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] >= orig(this.states[this.size])
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] >= orig(this.states[key])
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] >= this.states[this.count]
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] >= orig(this.states[post(this.count)-1])
this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] >= orig(this.states[this.size])
orig(this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED)]) >= orig(this.keys[post(this.size)-1])
orig(this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED)]) >= orig(this.states[post(this.size)-1])
orig(this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED)]) >= orig(this.states[post(this.count)-1])
orig(this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED)]) >= orig(this.keys[key])
orig(this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED)]) >= orig(this.states[key])
this.keys[this.size] >= this.keys[this.count]
this.keys[this.size] >= this.states[this.count]
this.keys[this.size] != this.states[this.count-1]
this.keys[this.size] >= orig(this.states[this.size])
this.keys[this.size-1] >= this.keys[orig(this.count)]
this.keys[this.size-1] >= orig(this.states[post(this.count)-1])
this.keys[this.count] != this.states[this.size-1]
this.keys[this.count] >= this.states[this.count]
this.keys[orig(this.size)] >= this.keys[orig(this.count)]
this.keys[orig(this.size)] >= orig(this.states[this.size])
this.states[this.size] != this.states[this.size-1]
this.states[this.size] >= this.states[this.count]
this.states[this.size] != this.states[this.count-1]
this.states[this.size-1] != this.states[this.count]
this.states[this.size-1] >= this.states[this.count-1]
this.states[this.size-1] >= this.states[orig(this.size)]
this.states[this.size-1] >= this.states[orig(this.count)]
this.states[this.size-1] >= orig(this.states[post(this.count)-1])
this.states[this.size-1] >= orig(this.keys[key])
this.states[this.size-1] >= orig(this.states[this.size])
this.states[this.size-1] >= orig(this.states[key])
this.states[this.count-1] >= this.states[orig(this.count)]
this.states[orig(this.size)] >= this.states[orig(this.count)]
orig(this.keys[post(this.size)-1]) >= orig(this.states[post(this.count)-1])
orig(this.states[post(this.size)-1]) >= orig(this.states[post(this.count)-1])
orig(this.states[post(this.size)-1]) >= orig(this.keys[key])
orig(this.states[post(this.size)-1]) >= orig(this.states[this.size])
orig(this.states[post(this.size)-1]) >= orig(this.states[key])
orig(this.states[post(this.count)-1]) <= orig(this.states[key])
orig(this.keys[key]) >= orig(this.states[this.size])
orig(this.states[this.size]) <= orig(this.states[key])
2 * this.size - 2 * orig(this.size) + orig(this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED)]) - 2 == 0
this.size - orig(this.size) + orig(this.states[key]) - 1 == 0
2 * this.count - 2 * orig(this.count) + orig(this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED)]) - 2 == 0
this.count - orig(this.count) + orig(this.states[key]) - 1 == 0
2 * this.count - 2 * this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] - this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] - 2 == 0
this.count - this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] - this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED] - 1 == 0
orig(this.size) - orig(this.count) + orig(this.keys[key]) == 0
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.remove(int):::ENTER
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[this.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[this.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[key-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[this.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[this.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == key
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.keys[key]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[this.count-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[key]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[key-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[this.count-1]
this.size == this.count
this has only one value
this.keys has only one value
this.keys[] == [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.values has only one value
this.values[] == [-1.0, Infinity, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.values[] elements one of { -1.0, 0.0, Infinity }
this.states has only one value
this.states[] == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.states[] elements one of { 0, 1 }
this.size == 3
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.remove(int):::EXIT357
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.remove(int):::EXIT
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[this.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[this.count-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(this.size)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(this.mask)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(this.mask)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(this.count)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(key)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(key)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[this.count]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[this.count-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[orig(this.size)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[orig(this.mask)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[orig(this.mask)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[orig(this.count)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(this.mask)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(this.mask)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.states[post(this.mask)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.states[post(this.mask)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(this.count)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(this.count)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.states[post(this.count)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.states[post(this.count)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(key)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[this.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[orig(this.size)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[orig(this.count)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[orig(key)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.keys[post(this.size)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.states[post(this.size)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.states[post(this.size)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.keys[post(key)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.states[post(key)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == orig(this.states[post(key)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.size
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[this.size]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[orig(this.size)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.keys[orig(this.count)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.states[this.size-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == this.states[orig(key)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED == orig(this.keys[post(this.size)])
this.keys == orig(this.keys)
this.values == orig(this.values)
this.states == orig(this.states)
this.missingEntries == orig(this.missingEntries)
this.mask == orig(this.mask)
this.mask == orig(size(this.keys[]))-1
this.mask == orig(size(this.values[]))-1
this.mask == orig(size(this.states[]))-1
size(this.keys[]) == orig(size(this.keys[]))
size(this.keys[]) == orig(size(this.values[]))
size(this.keys[]) == orig(size(this.states[]))
this.keys has only one value
this.keys[] == [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.keys[] elements one of { 0, 2 }
this.values has only one value
this.values[] == [-1.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.values[] elements one of { -1.0, 0.0 }
this.states has only one value
this.states[] == [1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.count == 4
return == Infinity
this.missingEntries in orig(this.values[])
return in orig(this.values[])
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.shouldGrowTable():::ENTER
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL-1]
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED-1]
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER-1]
this.keys[this.size-1] == this.keys[this.count]
this.states[this.size-1] == this.states[this.count]
this.states[] elements one of { 0, 1 }
this.size one of { 1, 2, 3 }
this.count one of { 0, 1, 2 }
this.keys[this.size] % this.size == 0
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.shouldGrowTable():::EXIT470
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.shouldGrowTable():::EXIT470;condition="not(return == true)"
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.shouldGrowTable():::EXIT
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(this.mask)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.keys[orig(this.mask)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[orig(this.mask)]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == this.states[orig(this.mask)-1]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(this.mask)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.keys[post(this.mask)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.states[post(this.mask)])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE == orig(this.states[post(this.mask)-1])
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE]
org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL-1]
this.keys == orig(this.keys)
this.keys[] == orig(this.keys[])
this.values == orig(this.values)
this.values[] == orig(this.values[])
this.states == orig(this.states)
this.states[] == orig(this.states[])
this.missingEntries == orig(this.missingEntries)
this.size == orig(this.size)
this.mask == orig(this.mask)
this.mask == orig(size(this.keys[]))-1
this.mask == orig(size(this.values[]))-1
this.mask == orig(size(this.states[]))-1
this.count == orig(this.count)
size(this.keys[]) == orig(size(this.values[]))
size(this.keys[]) == orig(size(this.states[]))
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL]
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL)])
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED-1]
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED)-1])
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.REMOVED)-1])
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == this.states[org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER-1]
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.keys[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER)-1])
this.keys[org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL] == orig(this.states[post(org.apache.commons.math.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER)-1])
this.keys[this.size-1] == this.keys[this.count]
this.keys[this.count] == this.keys[orig(this.size)-1]
this.keys[this.count] == orig(this.keys[post(this.size)-1])
this.keys[this.count] == orig(this.keys[this.size-1])
this.states[this.size-1] == this.states[this.count]
this.states[this.count] == this.states[orig(this.size)-1]
this.states[this.count] == orig(this.states[post(this.size)-1])
this.states[this.count] == orig(this.states[this.size-1])
this.states[] elements one of { 0, 1 }
this.size one of { 1, 2, 3 }
this.count one of { 0, 1, 2 }
return == false
this.keys[this.size] % this.size == 0
===========================================================================
org.apache.commons.math.util.OpenIntToDoubleHashMap.shouldGrowTable():::EXIT;condition="not(return == true)"
Exiting Daikon.
