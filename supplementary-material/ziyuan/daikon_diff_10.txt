
Executing target program: java -cp ../../daikon.jar:../../junit-4.12.jar:../../hamcrest-core-1.3.jar:./target/classes:./target/test-classes -ea -Xmx1000m -javaagent:../../daikon.jar=--daikon --dtrace-file=DaikonTestIssue10.dtrace.gz diffutills.DaikonTestIssue10
entered daikon.chicory.Runtime.setDtrace(./DaikonTestIssue10.dtrace.gz, false)...

Executing daikon: java -Xmx1000m -cp ../../daikon.jar:../../junit-4.12.jar:../../hamcrest-core-1.3.jar:./target/classes:./target/test-classes -ea daikon.Daikon  ./DaikonTestIssue10.dtrace.gz
Daikon version 5.2.20, released January 5, 2016; http://plse.cs.washington.edu/daikon.
Reading declaration files                                                                                [1:31:11 PM]:                                                                                                                                                 Processing trace data; reading 1 dtrace file:
[1:31:12 PM]: Reading ./DaikonTestIssue10.dtrace.gz (line 4542, 0.05%) ...     [1:31:13 PM]: Reading ./DaikonTestIssue10.dtrace.gz (line 59526, 0.64%) ...    [1:31:14 PM]: Reading ./DaikonTestIssue10.dtrace.gz (line 1273293, 13.75%) ... [1:31:15 PM]: Reading ./DaikonTestIssue10.dtrace.gz (line 4152836, 44.85%) ... [1:31:16 PM]: Reading ./DaikonTestIssue10.dtrace.gz (line 7245746, 78.25%) ... [1:31:17 PM]: Reading ./DaikonTestIssue10.dtrace.gz (line 9240744, 99.79%) ... [1:31:17 PM]: Finished reading ./DaikonTestIssue10.dtrace.gz                   
                                                                                                                                                              ===========================================================================
difflib.ChangeDelta:::OBJECT
===========================================================================
difflib.ChangeDelta.ChangeDelta(difflib.Chunk, difflib.Chunk):::ENTER
original.size == size(original.lines[])
revised.size == size(revised.lines[])
original != null
original.position >= 0
original.size >= 1
original.lines != null
original.lines[] elements != null
original.lines[].getClass().getName() elements == java.lang.String.class
revised != null
revised.position >= 0
revised.size >= 1
revised.lines != null
revised.lines[] elements != null
revised.lines[].getClass().getName() elements == java.lang.String.class
original.position <= revised.position
original.lines.getClass().getName() == revised.lines.getClass().getName()
revised.size != size(original.lines[])-1
===========================================================================
difflib.ChangeDelta.ChangeDelta(difflib.Chunk, difflib.Chunk):::EXIT
original.position == orig(original.position)
original.size == orig(original.size)
original.size == size(original.lines[])
original.size == orig(size(original.lines[]))
original.lines == orig(original.lines)
original.lines[] == orig(original.lines[])
revised.position == orig(revised.position)
revised.size == orig(revised.size)
revised.size == size(revised.lines[])
revised.size == orig(size(revised.lines[]))
revised.lines == orig(revised.lines)
revised.lines[] == orig(revised.lines[])
original.position >= 0
original.size >= 1
original.lines != null
original.lines[] elements != null
original.lines[].getClass().getName() elements == java.lang.String.class
revised.position >= 0
revised.size >= 1
revised.lines != null
revised.lines[] elements != null
revised.lines[].getClass().getName() elements == java.lang.String.class
original.position <= revised.position
original.lines.getClass().getName() == revised.lines.getClass().getName()
original.lines.getClass().getName() == orig(original.lines.getClass().getName())
original.lines.getClass().getName() == orig(revised.lines.getClass().getName())
revised.size != size(original.lines[])-1
===========================================================================
difflib.ChangeDelta.applyTo(java.util.List):::ENTER
target[].getClass().getName() elements == java.lang.String.class
target.getClass().getName() == java.util.LinkedList.class
===========================================================================
difflib.ChangeDelta.applyTo(java.util.List):::EXIT
target[].getClass().getName() elements == java.lang.String.class
===========================================================================
difflib.ChangeDelta.verify(java.util.List):::ENTER
target[].getClass().getName() elements == java.lang.String.class
target.getClass().getName() == java.util.LinkedList.class
===========================================================================
difflib.ChangeDelta.verify(java.util.List):::EXIT
target[] == orig(target[])
target[].getClass().getName() elements == java.lang.String.class
===========================================================================
difflib.Chunk:::OBJECT
this.size == size(this.lines[])
this.position >= 0
this.lines != null
this.lines[] elements != null
this.lines[].getClass().getName() elements == java.lang.String.class
===========================================================================
difflib.Chunk.Chunk(int, int, java.lang.Object[]):::ENTER
size == size(lines[])
position >= 0
lines != null
lines[] elements != null
===========================================================================
difflib.Chunk.Chunk(int, int, java.lang.Object[]):::EXIT
this.position == orig(position)
this.size == orig(size)
this.size == orig(size(lines[]))
lines[] == orig(lines[])
this.lines.getClass().getName() == java.util.Arrays$ArrayList.class
lines[] elements != null
this.lines.getClass().getName() != orig(lines.getClass().getName())
===========================================================================
difflib.Chunk.Chunk(int, int, java.util.List):::ENTER
size == size(lines[])
position >= 0
lines != null
lines[] elements != null
lines[].getClass().getName() elements == java.lang.String.class
===========================================================================
difflib.Chunk.Chunk(int, int, java.util.List):::EXIT
this.position == orig(position)
this.size == orig(size)
this.size == orig(size(lines[]))
this.lines == orig(lines)
this.lines[] == lines[]
lines[] == orig(lines[])
lines[] elements != null
lines[].getClass().getName() elements == java.lang.String.class
this.lines.getClass().getName() == orig(lines.getClass().getName())
===========================================================================
difflib.Chunk.equals(java.lang.Object):::ENTER
this.position one of { 0, 1 }
this.size one of { 0, 1, 2 }
obj.getClass().getName() == difflib.Chunk.class
===========================================================================
difflib.Chunk.equals(java.lang.Object):::EXIT179
===========================================================================
difflib.Chunk.equals(java.lang.Object):::EXIT179;condition="return == true"
===========================================================================
difflib.Chunk.equals(java.lang.Object):::EXIT
this.position == orig(this.position)
this.size == orig(this.size)
this.size == orig(size(this.lines[]))
this.lines == orig(this.lines)
this.lines[] == orig(this.lines[])
this.position one of { 0, 1 }
this.size one of { 0, 1, 2 }
return == true
this.lines.getClass().getName() == orig(this.lines.getClass().getName())
===========================================================================
difflib.Chunk.equals(java.lang.Object):::EXIT;condition="return == true"
===========================================================================
difflib.Chunk.getLines():::ENTER
this.position != this.size
===========================================================================
difflib.Chunk.getLines():::EXIT
this.position == orig(this.position)
this.size == orig(this.size)
this.size == size(return[])
this.size == orig(size(this.lines[]))
this.lines == return
this.lines[] == return[]
return == orig(this.lines)
return[] == orig(this.lines[])
return != null
return[] elements != null
return[].getClass().getName() elements == java.lang.String.class
this.position != this.size
this.lines.getClass().getName() == return.getClass().getName()
return.getClass().getName() == orig(this.lines.getClass().getName())
===========================================================================
difflib.Chunk.getPosition():::ENTER
this.position != this.size
===========================================================================
difflib.Chunk.getPosition():::EXIT
this.position == return
this.size == orig(this.size)
this.size == orig(size(this.lines[]))
this.lines == orig(this.lines)
this.lines[] == orig(this.lines[])
return == orig(this.position)
return >= 0
this.size != return
this.lines.getClass().getName() == orig(this.lines.getClass().getName())
===========================================================================
difflib.Chunk.getSize():::ENTER
===========================================================================
difflib.Chunk.getSize():::EXIT
this.position == orig(this.position)
this.size == return
this.lines == orig(this.lines)
this.lines[] == orig(this.lines[])
return == orig(this.size)
return == size(this.lines[])
return == orig(size(this.lines[]))
this.lines.getClass().getName() == orig(this.lines.getClass().getName())
===========================================================================
difflib.Chunk.last():::ENTER
===========================================================================
difflib.Chunk.last():::EXIT
this.position == orig(this.position)
this.size == orig(this.size)
this.size == orig(size(this.lines[]))
this.lines == orig(this.lines)
this.lines[] == orig(this.lines[])
this.lines.getClass().getName() == orig(this.lines.getClass().getName())
this.position + this.size - return - 1 == 0
this.position - return + size(this.lines[])-1 == 0
===========================================================================
difflib.Chunk.verify(java.util.List):::ENTER
target[].getClass().getName() elements == java.lang.String.class
target.getClass().getName() == java.util.LinkedList.class
===========================================================================
difflib.Chunk.verify(java.util.List):::EXIT
this.position == orig(this.position)
this.size == orig(this.size)
this.size == orig(size(this.lines[]))
this.lines == orig(this.lines)
this.lines[] == orig(this.lines[])
target[] == orig(target[])
target[].getClass().getName() elements == java.lang.String.class
this.lines.getClass().getName() == orig(this.lines.getClass().getName())
===========================================================================
difflib.DeleteDelta:::OBJECT
this has only one value
===========================================================================
difflib.DeleteDelta.DeleteDelta(difflib.Chunk, difflib.Chunk):::ENTER
original.position == revised.position
original.position == revised.size
original.position == size(revised.lines[])
original.size == size(original.lines[])
original has only one value
original.size == 2
original.lines has only one value
original.lines[] contains no nulls and has only one value, of length 2
original.lines[].getClass().getName() == [java.lang.String, java.lang.String]
original.lines[].getClass().getName() elements == java.lang.String.class
original.lines.getClass().getName() == java.util.Arrays$ArrayList.class
revised has only one value
revised.lines has only one value
revised.lines[] == []
revised.lines[].getClass().getName() == []
original.lines[original.position] has only one value
original.lines[original.size-1] has only one value
original.lines.getClass().getName() == revised.lines.getClass().getName()
===========================================================================
difflib.DeleteDelta.DeleteDelta(difflib.Chunk, difflib.Chunk):::EXIT
original.position == revised.position
original.position == revised.size
original.position == orig(original.position)
original.position == orig(revised.position)
original.position == orig(revised.size)
original.position == size(revised.lines[])
original.position == orig(size(revised.lines[]))
original.size == orig(original.size)
original.size == size(original.lines[])
original.size == orig(size(original.lines[]))
original.lines == orig(original.lines)
original.lines[] == orig(original.lines[])
revised.lines == orig(revised.lines)
revised.lines[] == orig(revised.lines[])
original.size == 2
original.lines has only one value
original.lines[] contains no nulls and has only one value, of length 2
original.lines[].getClass().getName() == [java.lang.String, java.lang.String]
original.lines[].getClass().getName() elements == java.lang.String.class
original.lines.getClass().getName() == java.util.Arrays$ArrayList.class
revised.lines has only one value
revised.lines[] == []
revised.lines[].getClass().getName() == []
original.lines[original.position] has only one value
original.lines[original.size-1] has only one value
original.lines.getClass().getName() == revised.lines.getClass().getName()
original.lines.getClass().getName() == orig(original.lines.getClass().getName())
original.lines.getClass().getName() == orig(revised.lines.getClass().getName())
===========================================================================
difflib.Delta:::OBJECT
this.original.size == size(this.original.lines[])
this.revised.size == size(this.revised.lines[])
this.original != null
this.original.position >= 0
this.original.lines != null
this.original.lines[] elements != null
this.original.lines[].getClass().getName() elements == java.lang.String.class
this.revised != null
this.revised.position >= 0
this.revised.lines != null
this.revised.lines[] elements != null
this.revised.lines[].getClass().getName() elements == java.lang.String.class
this.getClass().getName() != this.original.lines.getClass().getName()
this.original.position <= this.revised.position
this.original.lines.getClass().getName() == this.revised.lines.getClass().getName()
this.revised.size != size(this.original.lines[])-1
===========================================================================
difflib.Delta.Delta(difflib.Chunk, difflib.Chunk):::ENTER
original.size == size(original.lines[])
revised.size == size(revised.lines[])
original != null
original.position >= 0
original.lines != null
original.lines[] elements != null
original.lines[].getClass().getName() elements == java.lang.String.class
revised != null
revised.position >= 0
revised.lines != null
revised.lines[] elements != null
revised.lines[].getClass().getName() elements == java.lang.String.class
original.position <= revised.position
original.lines.getClass().getName() == revised.lines.getClass().getName()
revised.size != size(original.lines[])-1
===========================================================================
difflib.Delta.Delta(difflib.Chunk, difflib.Chunk):::EXIT
this.original == orig(original)
this.original.position == original.position
this.original.size == original.size
this.original.lines == original.lines
this.original.lines[] == original.lines[]
this.revised == orig(revised)
this.revised.position == revised.position
this.revised.size == revised.size
this.revised.lines == revised.lines
this.revised.lines[] == revised.lines[]
original.position == orig(original.position)
original.size == orig(original.size)
original.size == size(this.original.lines[])
original.size == size(original.lines[])
original.size == orig(size(original.lines[]))
original.lines == orig(original.lines)
original.lines[] == orig(original.lines[])
revised.position == orig(revised.position)
revised.size == orig(revised.size)
revised.size == size(this.revised.lines[])
revised.size == size(revised.lines[])
revised.size == orig(size(revised.lines[]))
revised.lines == orig(revised.lines)
revised.lines[] == orig(revised.lines[])
original.position >= 0
original.lines != null
original.lines[] elements != null
original.lines[].getClass().getName() elements == java.lang.String.class
revised.position >= 0
revised.lines != null
revised.lines[] elements != null
revised.lines[].getClass().getName() elements == java.lang.String.class
this.original.lines.getClass().getName() == original.lines.getClass().getName()
this.revised.lines.getClass().getName() == original.lines.getClass().getName()
original.position <= revised.position
original.lines.getClass().getName() == revised.lines.getClass().getName()
original.lines.getClass().getName() == orig(original.lines.getClass().getName())
original.lines.getClass().getName() == orig(revised.lines.getClass().getName())
revised.size != size(original.lines[])-1
===========================================================================
difflib.Delta.getOriginal():::ENTER
===========================================================================
difflib.Delta.getOriginal():::EXIT
this.original == return
this.original.position == return.position
this.original.size == return.size
this.original.lines == return.lines
this.original.lines[] == return.lines[]
this.revised == orig(this.revised)
this.revised.position == orig(this.revised.position)
this.revised.size == orig(this.revised.size)
this.revised.size == orig(size(this.revised.lines[]))
this.revised.lines == orig(this.revised.lines)
this.revised.lines[] == orig(this.revised.lines[])
return == orig(this.original)
return.position == orig(this.original.position)
return.size == orig(this.original.size)
return.size == size(this.original.lines[])
return.size == size(return.lines[])
return.size == orig(size(this.original.lines[]))
return.lines == orig(this.original.lines)
return.lines[] == orig(this.original.lines[])
return != null
return.position >= 0
return.lines != null
return.lines[] elements != null
return.lines[].getClass().getName() elements == java.lang.String.class
this.original.lines.getClass().getName() == return.lines.getClass().getName()
this.revised.position >= return.position
this.revised.size != size(return.lines[])-1
this.revised.lines.getClass().getName() == return.lines.getClass().getName()
return.lines.getClass().getName() != orig(this.getClass().getName())
return.lines.getClass().getName() == orig(this.original.lines.getClass().getName())
return.lines.getClass().getName() == orig(this.revised.lines.getClass().getName())
===========================================================================
difflib.Delta.getRevised():::ENTER
===========================================================================
difflib.Delta.getRevised():::EXIT
this.original == orig(this.original)
this.original.position == orig(this.original.position)
this.original.size == orig(this.original.size)
this.original.size == orig(size(this.original.lines[]))
this.original.lines == orig(this.original.lines)
this.original.lines[] == orig(this.original.lines[])
this.revised == return
this.revised.position == return.position
this.revised.size == return.size
this.revised.lines == return.lines
this.revised.lines[] == return.lines[]
return == orig(this.revised)
return.position == orig(this.revised.position)
return.size == orig(this.revised.size)
return.size == size(this.revised.lines[])
return.size == size(return.lines[])
return.size == orig(size(this.revised.lines[]))
return.lines == orig(this.revised.lines)
return.lines[] == orig(this.revised.lines[])
return != null
return.position >= 0
return.lines != null
return.lines[] elements != null
return.lines[].getClass().getName() elements == java.lang.String.class
this.original.position <= return.position
this.original.lines.getClass().getName() == return.lines.getClass().getName()
this.revised.lines.getClass().getName() == return.lines.getClass().getName()
return.size != size(this.original.lines[])-1
return.lines.getClass().getName() != orig(this.getClass().getName())
return.lines.getClass().getName() == orig(this.original.lines.getClass().getName())
return.lines.getClass().getName() == orig(this.revised.lines.getClass().getName())
===========================================================================
difflib.DiffUtils$1:::OBJECT
===========================================================================
difflib.DiffUtils$1.DiffUtils$1():::EXIT
===========================================================================
difflib.DiffUtils$1.compare(difflib.Delta, difflib.Delta):::ENTER
a.original.size == size(a.original.lines[])
a.revised.size == size(a.revised.lines[])
b.original.size == size(b.original.lines[])
b.revised.size == size(b.revised.lines[])
this has only one value
a.getClass().getName() == difflib.ChangeDelta.class
a.original.size == 1
a.original.lines[].getClass().getName() == [java.lang.String]
a.original.lines[].getClass().getName() elements == java.lang.String.class
a.original.lines.getClass().getName() == java.util.Arrays$ArrayList.class
a.revised.size one of { 1, 2 }
a.revised.lines[].getClass().getName() elements == java.lang.String.class
a.revised.lines[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String] }
b.original.size one of { 0, 1 }
b.original.lines[].getClass().getName() elements == java.lang.String.class
b.original.lines[].getClass().getName() one of { [], [java.lang.String] }
b.revised.size one of { 1, 2, 131 }
b.revised.lines[].getClass().getName() elements == java.lang.String.class
a.getClass().getName() != a.original.lines.getClass().getName()
a.original.position > a.original.size
a.original.position <= a.revised.position
a.original.position > a.revised.size
a.original.position < b.original.position
a.original.position > b.original.size
a.original.position < b.revised.position
a.original.position > b.revised.size
a.original.size < a.revised.position
a.original.size <= a.revised.size
a.original.size < b.original.position
a.original.size >= b.original.size
a.original.size < b.revised.position
a.original.size <= b.revised.size
a.original.size >= size(a.revised.lines[])-1
a.original.lines[] elements == a.original.lines[a.original.size-1]
a.original.lines.getClass().getName() == a.revised.lines.getClass().getName()
a.original.lines.getClass().getName() != b.getClass().getName()
a.original.lines.getClass().getName() == b.original.lines.getClass().getName()
a.original.lines.getClass().getName() == b.revised.lines.getClass().getName()
a.revised.position % a.revised.size == 0
a.revised.position > a.revised.size
a.revised.position < b.original.position
a.revised.position > b.original.size
a.revised.position < b.revised.position
a.revised.position > b.revised.size
a.revised.size < b.original.position
a.revised.size >= b.original.size
a.revised.size < b.revised.position
a.revised.size <= b.revised.size
b.original.position > b.original.size
b.original.position <= b.revised.position
b.original.position > b.revised.size
b.original.size < b.revised.position
b.original.size <= b.revised.size
b.original.size >= size(a.original.lines[])-1
b.revised.position > b.revised.size
size(a.original.lines[])-1 <= size(a.revised.lines[])-1
size(a.original.lines[])-1 >= size(b.original.lines[])-1
size(a.original.lines[])-1 <= size(b.revised.lines[])-1
size(a.revised.lines[])-1 >= size(b.original.lines[])-1
size(a.revised.lines[])-1 <= size(b.revised.lines[])-1
size(b.original.lines[])-1 <= size(b.revised.lines[])-1
===========================================================================
difflib.DiffUtils$1.compare(difflib.Delta, difflib.Delta):::EXIT
a.original == orig(a.original)
a.original.position == orig(a.original.position)
a.original.size == orig(a.original.size)
a.original.size == size(a.original.lines[])
a.original.size == orig(size(a.original.lines[]))
a.original.lines == orig(a.original.lines)
a.original.lines[] == orig(a.original.lines[])
a.revised == orig(a.revised)
a.revised.position == orig(a.revised.position)
a.revised.size == orig(a.revised.size)
a.revised.size == size(a.revised.lines[])
a.revised.size == orig(size(a.revised.lines[]))
a.revised.lines == orig(a.revised.lines)
a.revised.lines[] == orig(a.revised.lines[])
b.original == orig(b.original)
b.original.position == orig(b.original.position)
b.original.size == orig(b.original.size)
b.original.size == size(b.original.lines[])
b.original.size == orig(size(b.original.lines[]))
b.original.lines == orig(b.original.lines)
b.original.lines[] == orig(b.original.lines[])
b.revised == orig(b.revised)
b.revised.position == orig(b.revised.position)
b.revised.size == orig(b.revised.size)
b.revised.size == size(b.revised.lines[])
b.revised.size == orig(size(b.revised.lines[]))
b.revised.lines == orig(b.revised.lines)
b.revised.lines[] == orig(b.revised.lines[])
a.original.size == 1
a.original.lines[].getClass().getName() == [java.lang.String]
a.original.lines[].getClass().getName() elements == java.lang.String.class
a.original.lines.getClass().getName() == java.util.Arrays$ArrayList.class
a.revised.size one of { 1, 2 }
a.revised.lines[].getClass().getName() elements == java.lang.String.class
a.revised.lines[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String] }
b.original.size one of { 0, 1 }
b.original.lines[].getClass().getName() elements == java.lang.String.class
b.original.lines[].getClass().getName() one of { [], [java.lang.String] }
b.revised.size one of { 1, 2, 131 }
b.revised.lines[].getClass().getName() elements == java.lang.String.class
return == -1
a.original.position > a.original.size
a.original.position <= a.revised.position
a.original.position > a.revised.size
a.original.position < b.original.position
a.original.position > b.original.size
a.original.position < b.revised.position
a.original.position > b.revised.size
a.original.position > return
a.original.size < a.revised.position
a.original.size <= a.revised.size
a.original.size < b.original.position
a.original.size >= b.original.size
a.original.size < b.revised.position
a.original.size <= b.revised.size
a.original.size >= size(a.revised.lines[])-1
a.original.lines[] elements == a.original.lines[a.original.size-1]
a.original.lines.getClass().getName() == a.revised.lines.getClass().getName()
a.original.lines.getClass().getName() == b.original.lines.getClass().getName()
a.original.lines.getClass().getName() == b.revised.lines.getClass().getName()
a.original.lines.getClass().getName() != orig(a.getClass().getName())
a.original.lines.getClass().getName() == orig(a.original.lines.getClass().getName())
a.original.lines.getClass().getName() == orig(a.revised.lines.getClass().getName())
a.original.lines.getClass().getName() != orig(b.getClass().getName())
a.original.lines.getClass().getName() == orig(b.original.lines.getClass().getName())
a.original.lines.getClass().getName() == orig(b.revised.lines.getClass().getName())
a.revised.position % a.revised.size == 0
a.revised.position > a.revised.size
a.revised.position < b.original.position
a.revised.position > b.original.size
a.revised.position < b.revised.position
a.revised.position > b.revised.size
a.revised.position > return
a.revised.size < b.original.position
a.revised.size >= b.original.size
a.revised.size < b.revised.position
a.revised.size <= b.revised.size
b.original.position > b.original.size
b.original.position <= b.revised.position
b.original.position > b.revised.size
b.original.position > return
b.original.size < b.revised.position
b.original.size <= b.revised.size
b.original.size >= size(a.original.lines[])-1
b.revised.position > b.revised.size
b.revised.position > return
return < size(a.revised.lines[])-1
return <= size(b.original.lines[])-1
return < size(b.revised.lines[])-1
size(a.original.lines[])-1 <= size(a.revised.lines[])-1
size(a.original.lines[])-1 >= size(b.original.lines[])-1
size(a.original.lines[])-1 <= size(b.revised.lines[])-1
size(a.revised.lines[])-1 >= size(b.original.lines[])-1
size(a.revised.lines[])-1 <= size(b.revised.lines[])-1
size(b.original.lines[])-1 <= size(b.revised.lines[])-1
===========================================================================
difflib.DiffUtils:::CLASS
difflib.DiffUtils.defaultDiffAlgorithm has only one value
difflib.DiffUtils.defaultDiffAlgorithm != null
difflib.DiffUtils.defaultDiffAlgorithm.getClass().getName() == difflib.myers.MyersDiff.class
difflib.DiffUtils.unifiedDiffChunkRe has only one value
difflib.DiffUtils.unifiedDiffChunkRe != null
===========================================================================
difflib.DiffUtils.diff(java.util.List, java.util.List):::ENTER
original[].getClass().getName() elements == java.lang.String.class
revised[].getClass().getName() elements == java.lang.String.class
difflib.DiffUtils.defaultDiffAlgorithm.getClass().getName() != original.getClass().getName()
difflib.DiffUtils.defaultDiffAlgorithm.getClass().getName() != revised.getClass().getName()
size(original[])-1 != size(revised[])
===========================================================================
difflib.DiffUtils.diff(java.util.List, java.util.List):::EXIT
difflib.DiffUtils.defaultDiffAlgorithm == orig(difflib.DiffUtils.defaultDiffAlgorithm)
difflib.DiffUtils.unifiedDiffChunkRe == orig(difflib.DiffUtils.unifiedDiffChunkRe)
original[] == orig(original[])
revised[] == orig(revised[])
original[].getClass().getName() elements == java.lang.String.class
revised[].getClass().getName() elements == java.lang.String.class
return.deltas.getClass().getName() == java.util.LinkedList.class
return.isSorted == false
size(return.deltas[]) one of { 1, 9 }
difflib.DiffUtils.defaultDiffAlgorithm.getClass().getName() != return.deltas.getClass().getName()
difflib.DiffUtils.defaultDiffAlgorithm.getClass().getName() == orig(difflib.DiffUtils.defaultDiffAlgorithm.getClass().getName())
difflib.DiffUtils.defaultDiffAlgorithm.getClass().getName() != orig(original.getClass().getName())
difflib.DiffUtils.defaultDiffAlgorithm.getClass().getName() != orig(revised.getClass().getName())
size(original[])-1 != size(return.deltas[])
size(original[])-1 != orig(size(revised[]))
size(revised[])-1 != size(return.deltas[])
size(revised[])-1 >= size(return.deltas[])-1
size(return.deltas[]) <= orig(size(revised[]))
size(return.deltas[])-1 <= orig(size(original[]))
===========================================================================
difflib.DiffUtils.diff(java.util.List, java.util.List, difflib.DiffAlgorithm):::ENTER
difflib.DiffUtils.defaultDiffAlgorithm == algorithm
original[].getClass().getName() elements == java.lang.String.class
revised[].getClass().getName() elements == java.lang.String.class
difflib.DiffUtils.defaultDiffAlgorithm.getClass().getName() != original.getClass().getName()
difflib.DiffUtils.defaultDiffAlgorithm.getClass().getName() != revised.getClass().getName()
difflib.DiffUtils.defaultDiffAlgorithm.getClass().getName() == algorithm.getClass().getName()
size(original[])-1 != size(revised[])
===========================================================================
difflib.DiffUtils.diff(java.util.List, java.util.List, difflib.DiffAlgorithm):::EXIT
difflib.DiffUtils.defaultDiffAlgorithm == orig(difflib.DiffUtils.defaultDiffAlgorithm)
difflib.DiffUtils.defaultDiffAlgorithm == orig(algorithm)
difflib.DiffUtils.unifiedDiffChunkRe == orig(difflib.DiffUtils.unifiedDiffChunkRe)
original[] == orig(original[])
revised[] == orig(revised[])
original[].getClass().getName() elements == java.lang.String.class
revised[].getClass().getName() elements == java.lang.String.class
return.deltas.getClass().getName() == java.util.LinkedList.class
return.isSorted == false
size(return.deltas[]) one of { 1, 9 }
difflib.DiffUtils.defaultDiffAlgorithm.getClass().getName() != return.deltas.getClass().getName()
difflib.DiffUtils.defaultDiffAlgorithm.getClass().getName() == orig(difflib.DiffUtils.defaultDiffAlgorithm.getClass().getName())
difflib.DiffUtils.defaultDiffAlgorithm.getClass().getName() != orig(original.getClass().getName())
difflib.DiffUtils.defaultDiffAlgorithm.getClass().getName() != orig(revised.getClass().getName())
difflib.DiffUtils.defaultDiffAlgorithm.getClass().getName() == orig(algorithm.getClass().getName())
size(original[])-1 != size(return.deltas[])
size(original[])-1 != orig(size(revised[]))
size(revised[])-1 != size(return.deltas[])
size(revised[])-1 >= size(return.deltas[])-1
size(return.deltas[]) <= orig(size(revised[]))
size(return.deltas[])-1 <= orig(size(original[]))
===========================================================================
difflib.DiffUtils.generateUnifiedDiff(java.lang.String, java.lang.String, java.util.List, difflib.Patch, int):::ENTER
original has only one value
original.toString == "/Users/HongLongPham/Workspace/testdata/java-diff-utils/rev25/target/test-classes/original.txt"
revised has only one value
revised.toString == "/Users/HongLongPham/Workspace/testdata/java-diff-utils/rev25/target/test-classes/revised.txt"
originalLines[].getClass().getName() elements == java.lang.String.class
originalLines[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
originalLines.getClass().getName() == java.util.LinkedList.class
patch.deltas[].getClass().getName() one of { [difflib.ChangeDelta], [difflib.InsertDelta, difflib.ChangeDelta, difflib.ChangeDelta, difflib.ChangeDelta, difflib.ChangeDelta, difflib.ChangeDelta, difflib.ChangeDelta, difflib.ChangeDelta, difflib.ChangeDelta] }
patch.isSorted == false
contextSize == 10
size(originalLines[]) one of { 54, 174 }
size(patch.deltas[]) one of { 1, 9 }
originalLines.getClass().getName() == patch.deltas.getClass().getName()
===========================================================================
difflib.DiffUtils.generateUnifiedDiff(java.lang.String, java.lang.String, java.util.List, difflib.Patch, int):::EXIT
difflib.DiffUtils.defaultDiffAlgorithm == orig(difflib.DiffUtils.defaultDiffAlgorithm)
difflib.DiffUtils.unifiedDiffChunkRe == orig(difflib.DiffUtils.unifiedDiffChunkRe)
originalLines[] == orig(originalLines[])
patch.deltas == orig(patch.deltas)
patch.deltas[] == orig(patch.deltas[])
original.toString == "/Users/HongLongPham/Workspace/testdata/java-diff-utils/rev25/target/test-classes/original.txt"
revised.toString == "/Users/HongLongPham/Workspace/testdata/java-diff-utils/rev25/target/test-classes/revised.txt"
originalLines[].getClass().getName() elements == java.lang.String.class
originalLines[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
patch.deltas[].getClass().getName() one of { [difflib.ChangeDelta], [difflib.InsertDelta, difflib.ChangeDelta, difflib.ChangeDelta, difflib.ChangeDelta, difflib.ChangeDelta, difflib.ChangeDelta, difflib.ChangeDelta, difflib.ChangeDelta, difflib.ChangeDelta] }
patch.deltas.getClass().getName() == java.util.LinkedList.class
patch.isSorted == true
return[].getClass().getName() elements == java.lang.String.class
return[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
return.getClass().getName() == java.util.ArrayList.class
size(patch.deltas[]) one of { 1, 9 }
size(return[]) one of { 68, 225 }
difflib.DiffUtils.defaultDiffAlgorithm.getClass().getName() == orig(difflib.DiffUtils.defaultDiffAlgorithm.getClass().getName())
original.toString == orig(original.toString)
revised.toString == orig(revised.toString)
patch.deltas.getClass().getName() == orig(originalLines.getClass().getName())
patch.deltas.getClass().getName() == orig(patch.deltas.getClass().getName())
===========================================================================
difflib.DiffUtils.getDeltaText(difflib.Delta):::ENTER
delta.original.size == size(delta.original.lines[])
delta.revised.size == size(delta.revised.lines[])
delta.original.size one of { 0, 1, 54 }
delta.original.lines[].getClass().getName() elements == java.lang.String.class
delta.original.lines.getClass().getName() == java.util.Arrays$ArrayList.class
delta.revised.size >= 1
delta.revised.lines[].getClass().getName() elements == java.lang.String.class
difflib.DiffUtils.defaultDiffAlgorithm.getClass().getName() != delta.getClass().getName()
difflib.DiffUtils.defaultDiffAlgorithm.getClass().getName() != delta.original.lines.getClass().getName()
delta.getClass().getName() != delta.original.lines.getClass().getName()
delta.original.position != delta.original.size
delta.original.position <= delta.revised.position
delta.original.position != delta.revised.size
delta.original.position != size(delta.original.lines[])-1
delta.original.position != size(delta.revised.lines[])-1
delta.original.size != delta.revised.position
delta.original.lines.getClass().getName() == delta.revised.lines.getClass().getName()
delta.revised.position != delta.revised.size
delta.revised.position != size(delta.original.lines[])-1
delta.revised.position != size(delta.revised.lines[])-1
delta.revised.size != size(delta.original.lines[])-1
===========================================================================
difflib.DiffUtils.getDeltaText(difflib.Delta):::EXIT
difflib.DiffUtils.defaultDiffAlgorithm == orig(difflib.DiffUtils.defaultDiffAlgorithm)
difflib.DiffUtils.unifiedDiffChunkRe == orig(difflib.DiffUtils.unifiedDiffChunkRe)
delta.original == orig(delta.original)
delta.original.position == orig(delta.original.position)
delta.original.size == orig(delta.original.size)
delta.original.size == size(delta.original.lines[])
delta.original.size == orig(size(delta.original.lines[]))
delta.original.lines == orig(delta.original.lines)
delta.original.lines[] == orig(delta.original.lines[])
delta.revised == orig(delta.revised)
delta.revised.position == orig(delta.revised.position)
delta.revised.size == orig(delta.revised.size)
delta.revised.size == size(delta.revised.lines[])
delta.revised.size == orig(size(delta.revised.lines[]))
delta.revised.lines == orig(delta.revised.lines)
delta.revised.lines[] == orig(delta.revised.lines[])
delta.original.size one of { 0, 1, 54 }
delta.original.lines[].getClass().getName() elements == java.lang.String.class
delta.original.lines.getClass().getName() == java.util.Arrays$ArrayList.class
delta.revised.size >= 1
delta.revised.lines[].getClass().getName() elements == java.lang.String.class
return[].getClass().getName() elements == java.lang.String.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) >= 2
difflib.DiffUtils.defaultDiffAlgorithm.getClass().getName() != delta.original.lines.getClass().getName()
difflib.DiffUtils.defaultDiffAlgorithm.getClass().getName() != return.getClass().getName()
difflib.DiffUtils.defaultDiffAlgorithm.getClass().getName() == orig(difflib.DiffUtils.defaultDiffAlgorithm.getClass().getName())
difflib.DiffUtils.defaultDiffAlgorithm.getClass().getName() != orig(delta.getClass().getName())
delta.original.position != delta.original.size
delta.original.position <= delta.revised.position
delta.original.position != delta.revised.size
delta.original.position != size(delta.original.lines[])-1
delta.original.position != size(delta.revised.lines[])-1
delta.original.position != size(return[])
delta.original.position != size(return[])-1
delta.original.size != delta.revised.position
delta.original.size <= size(return[])-1
delta.original.lines.getClass().getName() == delta.revised.lines.getClass().getName()
delta.original.lines.getClass().getName() != return.getClass().getName()
delta.original.lines.getClass().getName() != orig(delta.getClass().getName())
delta.original.lines.getClass().getName() == orig(delta.original.lines.getClass().getName())
delta.original.lines.getClass().getName() == orig(delta.revised.lines.getClass().getName())
delta.revised.position != delta.revised.size
delta.revised.position != size(delta.original.lines[])-1
delta.revised.position != size(delta.revised.lines[])-1
delta.revised.position != size(return[])
delta.revised.position != size(return[])-1
delta.revised.size != size(delta.original.lines[])-1
delta.revised.size <= size(return[])
return.getClass().getName() != orig(delta.getClass().getName())
size(delta.revised.lines[])-1 <= size(return[])-1
===========================================================================
difflib.DiffUtils.parseUnifiedDiff(java.util.List):::ENTER
diff[].getClass().getName() elements == java.lang.String.class
diff[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
diff.getClass().getName() == java.util.ArrayList.class
size(diff[]) one of { 68, 225 }
===========================================================================
difflib.DiffUtils.parseUnifiedDiff(java.util.List):::EXIT
difflib.DiffUtils.defaultDiffAlgorithm == orig(difflib.DiffUtils.defaultDiffAlgorithm)
difflib.DiffUtils.unifiedDiffChunkRe == orig(difflib.DiffUtils.unifiedDiffChunkRe)
diff[] == orig(diff[])
diff[].getClass().getName() elements == java.lang.String.class
diff[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
return.deltas[].getClass().getName() elements == difflib.ChangeDelta.class
return.deltas[].getClass().getName() one of { [difflib.ChangeDelta], [difflib.ChangeDelta, difflib.ChangeDelta, difflib.ChangeDelta] }
return.deltas.getClass().getName() == java.util.LinkedList.class
return.isSorted == false
size(return.deltas[]) one of { 1, 3 }
difflib.DiffUtils.defaultDiffAlgorithm.getClass().getName() == orig(difflib.DiffUtils.defaultDiffAlgorithm.getClass().getName())
===========================================================================
difflib.DiffUtils.patch(java.util.List, difflib.Patch):::ENTER
original[].getClass().getName() elements == java.lang.String.class
original[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
original.getClass().getName() == java.util.Arrays$ArrayList.class
patch.deltas[].getClass().getName() one of { [difflib.ChangeDelta], [difflib.InsertDelta] }
patch.deltas.getClass().getName() == java.util.LinkedList.class
patch.isSorted == false
size(original[]) one of { 1, 4 }
size(patch.deltas[]) == 1
===========================================================================
difflib.DiffUtils.patch(java.util.List, difflib.Patch):::EXIT
difflib.DiffUtils.defaultDiffAlgorithm == orig(difflib.DiffUtils.defaultDiffAlgorithm)
difflib.DiffUtils.unifiedDiffChunkRe == orig(difflib.DiffUtils.unifiedDiffChunkRe)
original[] == orig(original[])
patch.deltas == orig(patch.deltas)
patch.deltas[] == orig(patch.deltas[])
original[].getClass().getName() elements == java.lang.String.class
original[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
patch.deltas[].getClass().getName() one of { [difflib.ChangeDelta], [difflib.InsertDelta] }
patch.isSorted == true
return[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
return[].getClass().getName() elements == java.lang.String.class
return.getClass().getName() == java.util.LinkedList.class
size(patch.deltas[]) == 1
size(return[]) == 4
difflib.DiffUtils.defaultDiffAlgorithm.getClass().getName() == orig(difflib.DiffUtils.defaultDiffAlgorithm.getClass().getName())
patch.deltas.getClass().getName() == return.getClass().getName()
return.getClass().getName() == orig(patch.deltas.getClass().getName())
===========================================================================
difflib.DiffUtils.processDeltas(java.util.List, java.util.List, int):::ENTER
origLines[].getClass().getName() elements == java.lang.String.class
origLines[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
origLines.getClass().getName() == java.util.LinkedList.class
deltas.getClass().getName() == java.util.ArrayList.class
contextSize == 10
size(origLines[]) one of { 54, 174 }
size(deltas[]) one of { 1, 4 }
===========================================================================
difflib.DiffUtils.processDeltas(java.util.List, java.util.List, int):::EXIT
difflib.DiffUtils.defaultDiffAlgorithm == orig(difflib.DiffUtils.defaultDiffAlgorithm)
difflib.DiffUtils.unifiedDiffChunkRe == orig(difflib.DiffUtils.unifiedDiffChunkRe)
origLines[] == orig(origLines[])
deltas[] == orig(deltas[])
origLines[].getClass().getName() elements == java.lang.String.class
origLines[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
return[].getClass().getName() elements == java.lang.String.class
return.getClass().getName() == java.util.ArrayList.class
difflib.DiffUtils.defaultDiffAlgorithm.getClass().getName() == orig(difflib.DiffUtils.defaultDiffAlgorithm.getClass().getName())
return.getClass().getName() == orig(deltas.getClass().getName())
===========================================================================
difflib.InsertDelta:::OBJECT
===========================================================================
difflib.InsertDelta.InsertDelta(difflib.Chunk, difflib.Chunk):::ENTER
original.size == size(original.lines[])
revised.size == size(revised.lines[])
original.position one of { 0, 1, 172 }
original.lines[] == []
original.lines[].getClass().getName() == []
original.lines.getClass().getName() == java.util.Arrays$ArrayList.class
revised.position one of { 0, 1, 175 }
revised.lines[].getClass().getName() elements == java.lang.String.class
original.lines.getClass().getName() == revised.lines.getClass().getName()
===========================================================================
difflib.InsertDelta.InsertDelta(difflib.Chunk, difflib.Chunk):::EXIT
original.position == orig(original.position)
original.size == orig(original.size)
original.size == size(original.lines[])
original.size == orig(size(original.lines[]))
original.lines == orig(original.lines)
original.lines[] == orig(original.lines[])
revised.position == orig(revised.position)
revised.size == orig(revised.size)
revised.size == size(revised.lines[])
revised.size == orig(size(revised.lines[]))
revised.lines == orig(revised.lines)
revised.lines[] == orig(revised.lines[])
original.position one of { 0, 1, 172 }
original.lines[] == []
original.lines[].getClass().getName() == []
original.lines.getClass().getName() == java.util.Arrays$ArrayList.class
revised.position one of { 0, 1, 175 }
revised.lines[].getClass().getName() elements == java.lang.String.class
original.lines.getClass().getName() == revised.lines.getClass().getName()
original.lines.getClass().getName() == orig(original.lines.getClass().getName())
original.lines.getClass().getName() == orig(revised.lines.getClass().getName())
===========================================================================
difflib.InsertDelta.applyTo(java.util.List):::ENTER
this has only one value
target has only one value
target[] contains no nulls and has only one value, of length 1
target[] elements has only one value
target[].getClass().getName() == [java.lang.String]
target[].getClass().getName() elements == java.lang.String.class
target.getClass().getName() == java.util.LinkedList.class
size(target[]) == 1
===========================================================================
difflib.InsertDelta.applyTo(java.util.List):::EXIT
target[] contains no nulls and has only one value, of length 4
target[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
target[].getClass().getName() elements == java.lang.String.class
===========================================================================
difflib.InsertDelta.verify(java.util.List):::ENTER
this has only one value
target has only one value
target[] contains no nulls and has only one value, of length 1
target[] elements has only one value
target[].getClass().getName() == [java.lang.String]
target[].getClass().getName() elements == java.lang.String.class
target.getClass().getName() == java.util.LinkedList.class
size(target[]) == 1
===========================================================================
difflib.InsertDelta.verify(java.util.List):::EXIT
target[] == orig(target[])
target[] contains no nulls and has only one value, of length 1
target[] elements has only one value
target[].getClass().getName() == [java.lang.String]
target[].getClass().getName() elements == java.lang.String.class
===========================================================================
difflib.Patch$1:::OBJECT
difflib.Patch.this != null
difflib.Patch.this.deltas != null
difflib.Patch.this.deltas[] elements != null
difflib.Patch.this.deltas.getClass().getName() == java.util.LinkedList.class
difflib.Patch.this.isSorted == false
size(difflib.Patch.this.deltas[]) one of { 1, 3, 9 }
===========================================================================
difflib.Patch$1.Patch$1(difflib.Patch):::ENTER
difflib.Patch.this.deltas.getClass().getName() == java.util.LinkedList.class
difflib.Patch.this.isSorted == false
size(difflib.Patch.this.deltas[]) one of { 1, 3, 9 }
===========================================================================
difflib.Patch$1.Patch$1(difflib.Patch):::EXIT
difflib.Patch.this == orig(difflib.Patch.this)
difflib.Patch.this.deltas == orig(difflib.Patch.this.deltas)
difflib.Patch.this.deltas[] == orig(difflib.Patch.this.deltas[])
difflib.Patch.this.isSorted == orig(difflib.Patch.this.isSorted)
difflib.Patch.this.deltas.getClass().getName() == orig(difflib.Patch.this.deltas.getClass().getName())
===========================================================================
difflib.Patch$1.compare(difflib.Delta, difflib.Delta):::ENTER
d1.original.size == size(d1.original.lines[])
d1.revised.size == size(d1.revised.lines[])
d2.original.size == size(d2.original.lines[])
d2.revised.size == size(d2.revised.lines[])
difflib.Patch.this.deltas[].getClass().getName() one of { [difflib.ChangeDelta, difflib.ChangeDelta, difflib.ChangeDelta], [difflib.InsertDelta, difflib.ChangeDelta, difflib.ChangeDelta, difflib.ChangeDelta, difflib.ChangeDelta, difflib.ChangeDelta, difflib.ChangeDelta, difflib.ChangeDelta, difflib.ChangeDelta] }
d1.getClass().getName() == difflib.ChangeDelta.class
d1.original.size one of { 1, 21, 30 }
d1.original.lines[].getClass().getName() elements == java.lang.String.class
d1.revised.size >= 1
d1.revised.lines[].getClass().getName() elements == java.lang.String.class
d2.original.lines[].getClass().getName() elements == java.lang.String.class
d2.revised.size >= 1
d2.revised.lines[].getClass().getName() elements == java.lang.String.class
size(difflib.Patch.this.deltas[]) one of { 3, 9 }
d1 in difflib.Patch.this.deltas[]
d2 in difflib.Patch.this.deltas[]
d1.getClass().getName() in difflib.Patch.this.deltas[].getClass().getName()
d2.getClass().getName() in difflib.Patch.this.deltas[].getClass().getName()
difflib.Patch.this.deltas.getClass().getName() != d1.getClass().getName()
difflib.Patch.this.deltas.getClass().getName() != d1.original.lines.getClass().getName()
difflib.Patch.this.deltas.getClass().getName() != d2.getClass().getName()
d1.getClass().getName() != d1.original.lines.getClass().getName()
d1.original.position > d1.original.size
d1.original.position <= d1.revised.position
d1.original.position != d1.revised.size
d1.original.position != d2.original.position
d1.original.position > d2.original.size
d1.original.position != d2.revised.position
d1.original.position > d2.revised.size
d1.original.position != size(difflib.Patch.this.deltas[])
d1.original.position != size(difflib.Patch.this.deltas[])-1
d1.original.position != size(d1.revised.lines[])-1
d1.original.size < d1.revised.position
d1.original.size <= d1.revised.size
d1.original.size != d2.original.position
d1.original.size != d2.revised.position
d1.original.size != size(difflib.Patch.this.deltas[])
d1.original.size != size(difflib.Patch.this.deltas[])-1
d1.original.size != size(d2.original.lines[])-1
d1.original.lines.getClass().getName() == d1.revised.lines.getClass().getName()
d1.original.lines.getClass().getName() != d2.getClass().getName()
d1.original.lines.getClass().getName() == d2.original.lines.getClass().getName()
d1.original.lines.getClass().getName() == d2.revised.lines.getClass().getName()
d1.revised.position != d1.revised.size
d1.revised.position != d2.original.position
d1.revised.position > d2.original.size
d1.revised.position != d2.revised.position
d1.revised.position > d2.revised.size
d1.revised.position != size(difflib.Patch.this.deltas[])
d1.revised.position != size(difflib.Patch.this.deltas[])-1
d1.revised.position != size(d1.revised.lines[])-1
d1.revised.size != d2.original.position
d1.revised.size != d2.revised.position
d1.revised.size != size(difflib.Patch.this.deltas[])
d1.revised.size != size(difflib.Patch.this.deltas[])-1
d1.revised.size != size(d2.original.lines[])-1
d2.original.position != d2.original.size
d2.original.position <= d2.revised.position
d2.original.position != d2.revised.size
d2.original.position != size(difflib.Patch.this.deltas[])
d2.original.position != size(difflib.Patch.this.deltas[])-1
d2.original.position != size(d1.original.lines[])-1
d2.original.position != size(d1.revised.lines[])-1
d2.original.position != size(d2.original.lines[])-1
d2.original.position != size(d2.revised.lines[])-1
d2.original.size != d2.revised.position
d2.original.size <= d2.revised.size
d2.original.size != size(difflib.Patch.this.deltas[])
d2.original.size != size(difflib.Patch.this.deltas[])-1
d2.revised.position != d2.revised.size
d2.revised.position != size(difflib.Patch.this.deltas[])
d2.revised.position != size(difflib.Patch.this.deltas[])-1
d2.revised.position != size(d1.original.lines[])-1
d2.revised.position != size(d1.revised.lines[])-1
d2.revised.position != size(d2.original.lines[])-1
d2.revised.position != size(d2.revised.lines[])-1
d2.revised.size != size(difflib.Patch.this.deltas[])
d2.revised.size != size(difflib.Patch.this.deltas[])-1
d2.revised.size != size(d1.original.lines[])-1
d2.revised.size != size(d1.revised.lines[])-1
size(difflib.Patch.this.deltas[]) != size(d1.original.lines[])-1
size(difflib.Patch.this.deltas[]) != size(d1.revised.lines[])-1
size(difflib.Patch.this.deltas[]) != size(d2.original.lines[])-1
size(difflib.Patch.this.deltas[]) != size(d2.revised.lines[])-1
size(difflib.Patch.this.deltas[])-1 != size(d1.original.lines[])-1
size(difflib.Patch.this.deltas[])-1 != size(d1.revised.lines[])-1
size(difflib.Patch.this.deltas[])-1 != size(d2.original.lines[])-1
size(difflib.Patch.this.deltas[])-1 != size(d2.revised.lines[])-1
size(d1.original.lines[])-1 <= size(d1.revised.lines[])-1
size(d2.original.lines[])-1 <= size(d2.revised.lines[])-1
===========================================================================
difflib.Patch$1.compare(difflib.Delta, difflib.Delta):::EXIT86
d1.original.position == d1.revised.position
d1.original.position == orig(d1.revised.position)
d2.original.position == d2.revised.position
d2.original.position == orig(d2.revised.position)
d2.original.size == d2.revised.size
d2.original.size == orig(d2.revised.size)
d2.original.size == size(d2.revised.lines[])
d2.original.size == orig(size(d2.revised.lines[]))
d1.original.lines[d1.original.size-1] == d1.revised.lines[d1.revised.size-1]
d1.original.lines[d1.original.size-1] == orig(d1.revised.lines[post(d1.revised.size)-1])
d1.original.lines[d1.original.size-1] == d1.revised.lines[orig(d1.revised.size)-1]
d1.original.lines[d1.original.size-1] == orig(d1.revised.lines[d1.revised.size-1])
d1.original.lines[return] == d1.revised.lines[return]
d1.original.lines[return] == orig(d1.revised.lines[post(return)])
d2.original.lines[d2.original.size-1] == d2.revised.lines[d2.original.size-1]
d2.original.lines[d2.original.size-1] == orig(d2.revised.lines[post(d2.original.size)-1])
d2.original.lines[d2.original.size-1] == d2.revised.lines[d2.revised.size-1]
d2.original.lines[d2.original.size-1] == orig(d2.revised.lines[post(d2.revised.size)-1])
d2.original.lines[d2.original.size-1] == d2.revised.lines[orig(d2.original.size)-1]
d2.original.lines[d2.original.size-1] == d2.revised.lines[orig(d2.revised.size)-1]
d2.original.lines[d2.original.size-1] == orig(d2.revised.lines[d2.original.size-1])
d2.original.lines[d2.original.size-1] == orig(d2.revised.lines[d2.revised.size-1])
d2.original.lines[return] == d2.revised.lines[return]
d2.original.lines[return] == orig(d2.revised.lines[post(return)])
difflib.Patch.this has only one value
difflib.Patch.this.deltas has only one value
difflib.Patch.this.deltas[] contains no nulls and has only one value, of length 3
difflib.Patch.this.deltas[].getClass().getName() == [difflib.ChangeDelta, difflib.ChangeDelta, difflib.ChangeDelta]
difflib.Patch.this.deltas[].getClass().getName() elements == difflib.ChangeDelta.class
d1.original.position one of { 70, 144 }
d1.original.size one of { 21, 30 }
d1.original.lines[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
d1.original.lines.getClass().getName() == java.util.ArrayList.class
d1.revised.size one of { 21, 164 }
d1.revised.lines[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
d2.original.position one of { 0, 70 }
d2.original.size one of { 21, 27 }
d2.original.lines[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
return == 1
orig(this) has only one value
size(difflib.Patch.this.deltas[]) == 3
difflib.Patch.this.deltas[return] has only one value
difflib.Patch.this.deltas[return-1] has only one value
d1.revised.lines[d1.original.size-1] in d1.original.lines[]
orig(d1.getClass().getName()) == orig(d2.getClass().getName())
===========================================================================
difflib.Patch$1.compare(difflib.Delta, difflib.Delta):::EXIT90
return == size(d1.original.lines[])-1
return == orig(size(d1.original.lines[]))-1
difflib.Patch.this.deltas[d1.original.size-1] == difflib.Patch.this.deltas[return]
difflib.Patch.this.deltas[return] == difflib.Patch.this.deltas[orig(d1.original.size)-1]
difflib.Patch.this.deltas[return] == orig(difflib.Patch.this.deltas[post(d1.original.size)-1])
difflib.Patch.this.deltas[return] == orig(difflib.Patch.this.deltas[d1.original.size-1])
d1.original.lines[d1.original.size-1] == d1.original.lines[return]
d1.revised.lines[d1.original.size-1] == d1.revised.lines[return]
d2.revised.lines[d1.original.size-1] == d2.revised.lines[return]
orig(d1.original.lines[post(d1.original.size)-1]) == d1.original.lines[return]
orig(d1.revised.lines[post(d1.original.size)-1]) == d1.revised.lines[return]
orig(d2.revised.lines[post(d1.original.size)-1]) == d2.revised.lines[return]
d1.original.lines[return] == d1.original.lines[orig(d1.original.size)-1]
d1.original.lines[return] == orig(d1.original.lines[d1.original.size-1])
d1.revised.lines[return] == d1.revised.lines[orig(d1.original.size)-1]
d1.revised.lines[return] == orig(d1.revised.lines[d1.original.size-1])
d2.revised.lines[return] == d2.revised.lines[orig(d1.original.size)-1]
d2.revised.lines[return] == orig(d2.revised.lines[d1.original.size-1])
difflib.Patch.this has only one value
difflib.Patch.this.deltas has only one value
difflib.Patch.this.deltas[] contains no nulls and has only one value, of length 9
difflib.Patch.this.deltas[].getClass().getName() == [difflib.InsertDelta, difflib.ChangeDelta, difflib.ChangeDelta, difflib.ChangeDelta, difflib.ChangeDelta, difflib.ChangeDelta, difflib.ChangeDelta, difflib.ChangeDelta, difflib.ChangeDelta]
d1.original.size == 1
d1.original.lines[].getClass().getName() == [java.lang.String]
d1.original.lines.getClass().getName() == java.util.Arrays$ArrayList.class
d1.revised.size one of { 1, 2 }
d1.revised.lines[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String] }
d2.original.size one of { 0, 1 }
d2.original.lines[].getClass().getName() one of { [], [java.lang.String] }
d2.revised.size one of { 1, 2, 131 }
orig(this) has only one value
size(difflib.Patch.this.deltas[]) == 9
difflib.Patch.this.deltas[d1.original.size] has only one value
difflib.Patch.this.deltas[return] has only one value
d1.original.position > d1.revised.size
d1.original.position < d2.original.position
d1.original.position < d2.revised.position
d1.original.size < d2.original.position
d1.original.size >= d2.original.size
d1.original.size < d2.revised.position
d1.original.size <= d2.revised.size
d1.original.size >= size(d1.revised.lines[])-1
d1.original.lines[] elements == d1.original.lines[return]
d1.revised.position % d1.revised.size == 0
d1.revised.position > d1.revised.size
d1.revised.position < d2.original.position
d1.revised.position < d2.revised.position
d1.revised.size < d2.original.position
d1.revised.size >= d2.original.size
d1.revised.size < d2.revised.position
d1.revised.size <= d2.revised.size
d1.revised.size < size(difflib.Patch.this.deltas[])-1
d2.original.position > d2.original.size
d2.original.position > d2.revised.size
d2.original.size < d2.revised.position
d2.original.size < size(difflib.Patch.this.deltas[])-1
d2.revised.position > d2.revised.size
return >= size(d2.original.lines[])-1
size(d1.revised.lines[])-1 >= size(d2.original.lines[])-1
size(d1.revised.lines[])-1 <= size(d2.revised.lines[])-1
===========================================================================
difflib.Patch$1.compare(difflib.Delta, difflib.Delta):::EXIT
difflib.Patch.this == orig(difflib.Patch.this)
difflib.Patch.this.deltas == orig(difflib.Patch.this.deltas)
difflib.Patch.this.deltas[] == orig(difflib.Patch.this.deltas[])
difflib.Patch.this.isSorted == orig(difflib.Patch.this.isSorted)
d1.original == orig(d1.original)
d1.original.position == orig(d1.original.position)
d1.original.size == orig(d1.original.size)
d1.original.size == size(d1.original.lines[])
d1.original.size == orig(size(d1.original.lines[]))
d1.original.lines == orig(d1.original.lines)
d1.original.lines[] == orig(d1.original.lines[])
d1.revised == orig(d1.revised)
d1.revised.position == orig(d1.revised.position)
d1.revised.size == orig(d1.revised.size)
d1.revised.size == size(d1.revised.lines[])
d1.revised.size == orig(size(d1.revised.lines[]))
d1.revised.lines == orig(d1.revised.lines)
d1.revised.lines[] == orig(d1.revised.lines[])
d2.original == orig(d2.original)
d2.original.position == orig(d2.original.position)
d2.original.size == orig(d2.original.size)
d2.original.size == size(d2.original.lines[])
d2.original.size == orig(size(d2.original.lines[]))
d2.original.lines == orig(d2.original.lines)
d2.original.lines[] == orig(d2.original.lines[])
d2.revised == orig(d2.revised)
d2.revised.position == orig(d2.revised.position)
d2.revised.size == orig(d2.revised.size)
d2.revised.size == size(d2.revised.lines[])
d2.revised.size == orig(size(d2.revised.lines[]))
d2.revised.lines == orig(d2.revised.lines)
d2.revised.lines[] == orig(d2.revised.lines[])
difflib.Patch.this.deltas[].getClass().getName() one of { [difflib.ChangeDelta, difflib.ChangeDelta, difflib.ChangeDelta], [difflib.InsertDelta, difflib.ChangeDelta, difflib.ChangeDelta, difflib.ChangeDelta, difflib.ChangeDelta, difflib.ChangeDelta, difflib.ChangeDelta, difflib.ChangeDelta, difflib.ChangeDelta] }
d1.original.size one of { 1, 21, 30 }
d1.original.lines[].getClass().getName() elements == java.lang.String.class
d1.revised.size >= 1
d1.revised.lines[].getClass().getName() elements == java.lang.String.class
d2.original.lines[].getClass().getName() elements == java.lang.String.class
d2.revised.size >= 1
d2.revised.lines[].getClass().getName() elements == java.lang.String.class
return one of { 0, 1 }
size(difflib.Patch.this.deltas[]) one of { 3, 9 }
orig(d1) in difflib.Patch.this.deltas[]
orig(d2) in difflib.Patch.this.deltas[]
orig(d1.getClass().getName()) in difflib.Patch.this.deltas[].getClass().getName()
orig(d2.getClass().getName()) in difflib.Patch.this.deltas[].getClass().getName()
difflib.Patch.this.deltas.getClass().getName() != d1.original.lines.getClass().getName()
difflib.Patch.this.deltas.getClass().getName() == orig(difflib.Patch.this.deltas.getClass().getName())
difflib.Patch.this.deltas.getClass().getName() != orig(d1.getClass().getName())
difflib.Patch.this.deltas.getClass().getName() != orig(d2.getClass().getName())
d1.original.position > d1.original.size
d1.original.position <= d1.revised.position
d1.original.position != d1.revised.size
d1.original.position != d2.original.position
d1.original.position > d2.original.size
d1.original.position != d2.revised.position
d1.original.position > d2.revised.size
d1.original.position > return
d1.original.position != size(difflib.Patch.this.deltas[])
d1.original.position != size(difflib.Patch.this.deltas[])-1
d1.original.position != size(d1.revised.lines[])-1
d1.original.size < d1.revised.position
d1.original.size <= d1.revised.size
d1.original.size != d2.original.position
d1.original.size != d2.revised.position
d1.original.size != size(difflib.Patch.this.deltas[])
d1.original.size != size(difflib.Patch.this.deltas[])-1
d1.original.size != size(d2.original.lines[])-1
d1.original.lines.getClass().getName() == d1.revised.lines.getClass().getName()
d1.original.lines.getClass().getName() == d2.original.lines.getClass().getName()
d1.original.lines.getClass().getName() == d2.revised.lines.getClass().getName()
d1.original.lines.getClass().getName() != orig(d1.getClass().getName())
d1.original.lines.getClass().getName() == orig(d1.original.lines.getClass().getName())
d1.original.lines.getClass().getName() == orig(d1.revised.lines.getClass().getName())
d1.original.lines.getClass().getName() != orig(d2.getClass().getName())
d1.original.lines.getClass().getName() == orig(d2.original.lines.getClass().getName())
d1.original.lines.getClass().getName() == orig(d2.revised.lines.getClass().getName())
d1.revised.position != d1.revised.size
d1.revised.position != d2.original.position
d1.revised.position > d2.original.size
d1.revised.position != d2.revised.position
d1.revised.position > d2.revised.size
d1.revised.position > return
d1.revised.position != size(difflib.Patch.this.deltas[])
d1.revised.position != size(difflib.Patch.this.deltas[])-1
d1.revised.position != size(d1.revised.lines[])-1
d1.revised.size != d2.original.position
d1.revised.size != d2.revised.position
d1.revised.size != size(difflib.Patch.this.deltas[])
d1.revised.size != size(difflib.Patch.this.deltas[])-1
d1.revised.size != size(d2.original.lines[])-1
d2.original.position != d2.original.size
d2.original.position <= d2.revised.position
d2.original.position != d2.revised.size
d2.original.position != return
d2.original.position != size(difflib.Patch.this.deltas[])
d2.original.position != size(difflib.Patch.this.deltas[])-1
d2.original.position != size(d1.original.lines[])-1
d2.original.position != size(d1.revised.lines[])-1
d2.original.position != size(d2.original.lines[])-1
d2.original.position != size(d2.revised.lines[])-1
d2.original.size != d2.revised.position
d2.original.size <= d2.revised.size
d2.original.size >= return
d2.original.size != size(difflib.Patch.this.deltas[])
d2.original.size != size(difflib.Patch.this.deltas[])-1
d2.revised.position != d2.revised.size
d2.revised.position != return
d2.revised.position != size(difflib.Patch.this.deltas[])
d2.revised.position != size(difflib.Patch.this.deltas[])-1
d2.revised.position != size(d1.original.lines[])-1
d2.revised.position != size(d1.revised.lines[])-1
d2.revised.position != size(d2.original.lines[])-1
d2.revised.position != size(d2.revised.lines[])-1
d2.revised.size != size(difflib.Patch.this.deltas[])
d2.revised.size != size(difflib.Patch.this.deltas[])-1
d2.revised.size != size(d1.original.lines[])-1
d2.revised.size != size(d1.revised.lines[])-1
return < size(difflib.Patch.this.deltas[])-1
return <= size(d1.original.lines[])-1
return <= size(d1.revised.lines[])-1
return <= size(d2.revised.lines[])-1
size(difflib.Patch.this.deltas[]) != size(d1.original.lines[])-1
size(difflib.Patch.this.deltas[]) != size(d1.revised.lines[])-1
size(difflib.Patch.this.deltas[]) != size(d2.original.lines[])-1
size(difflib.Patch.this.deltas[]) != size(d2.revised.lines[])-1
size(difflib.Patch.this.deltas[])-1 != size(d1.original.lines[])-1
size(difflib.Patch.this.deltas[])-1 != size(d1.revised.lines[])-1
size(difflib.Patch.this.deltas[])-1 != size(d2.original.lines[])-1
size(difflib.Patch.this.deltas[])-1 != size(d2.revised.lines[])-1
size(d1.original.lines[])-1 <= size(d1.revised.lines[])-1
size(d2.original.lines[])-1 <= size(d2.revised.lines[])-1
===========================================================================
difflib.Patch:::OBJECT
this.deltas != null
this.deltas[] elements != null
this.deltas.getClass().getName() == java.util.LinkedList.class
===========================================================================
difflib.Patch.Patch():::EXIT
this.deltas[] == []
this.deltas[].getClass().getName() == []
this.isSorted == false
===========================================================================
difflib.Patch.addDelta(difflib.Delta):::ENTER
delta.original.size == size(delta.original.lines[])
delta.revised.size == size(delta.revised.lines[])
this.isSorted == false
delta != null
delta.original != null
delta.original.position >= 0
delta.original.lines != null
delta.original.lines[] elements != null
delta.original.lines[].getClass().getName() elements == java.lang.String.class
delta.revised != null
delta.revised.position >= 0
delta.revised.lines != null
delta.revised.lines[] elements != null
delta.revised.lines[].getClass().getName() elements == java.lang.String.class
this.deltas.getClass().getName() != delta.getClass().getName()
this.deltas.getClass().getName() != delta.original.lines.getClass().getName()
delta.getClass().getName() != delta.original.lines.getClass().getName()
delta.original.position <= delta.revised.position
delta.original.position != size(this.deltas[])-1
delta.original.lines.getClass().getName() == delta.revised.lines.getClass().getName()
delta.revised.position != size(this.deltas[])-1
delta.revised.size != size(delta.original.lines[])-1
===========================================================================
difflib.Patch.addDelta(difflib.Delta):::EXIT
this.deltas == orig(this.deltas)
this.isSorted == orig(this.isSorted)
delta.original == orig(delta.original)
delta.original.position == orig(delta.original.position)
delta.original.size == orig(delta.original.size)
delta.original.size == size(delta.original.lines[])
delta.original.size == orig(size(delta.original.lines[]))
delta.original.lines == orig(delta.original.lines)
delta.original.lines[] == orig(delta.original.lines[])
delta.revised == orig(delta.revised)
delta.revised.position == orig(delta.revised.position)
delta.revised.size == orig(delta.revised.size)
delta.revised.size == size(delta.revised.lines[])
delta.revised.size == orig(size(delta.revised.lines[]))
delta.revised.lines == orig(delta.revised.lines)
delta.revised.lines[] == orig(delta.revised.lines[])
size(this.deltas[])-1 == orig(size(this.deltas[]))
this.isSorted == false
delta.original != null
delta.original.position >= 0
delta.original.lines != null
delta.original.lines[] elements != null
delta.original.lines[].getClass().getName() elements == java.lang.String.class
delta.revised != null
delta.revised.position >= 0
delta.revised.lines != null
delta.revised.lines[] elements != null
delta.revised.lines[].getClass().getName() elements == java.lang.String.class
size(this.deltas[]) >= 1
orig(delta) in this.deltas[]
orig(delta.getClass().getName()) in this.deltas[].getClass().getName()
this.deltas.getClass().getName() != delta.original.lines.getClass().getName()
this.deltas.getClass().getName() == orig(this.deltas.getClass().getName())
this.deltas.getClass().getName() != orig(delta.getClass().getName())
delta.original.position <= delta.revised.position
delta.original.position != orig(size(this.deltas[]))-1
delta.original.lines.getClass().getName() == delta.revised.lines.getClass().getName()
delta.original.lines.getClass().getName() != orig(delta.getClass().getName())
delta.original.lines.getClass().getName() == orig(delta.original.lines.getClass().getName())
delta.original.lines.getClass().getName() == orig(delta.revised.lines.getClass().getName())
delta.revised.position != orig(size(this.deltas[]))-1
delta.revised.size != size(delta.original.lines[])-1
===========================================================================
difflib.Patch.applyTo(java.util.List):::ENTER
this.isSorted == false
target[].getClass().getName() elements == java.lang.String.class
size(this.deltas[]) one of { 1, 3 }
===========================================================================
difflib.Patch.applyTo(java.util.List):::EXIT
this.deltas == orig(this.deltas)
this.deltas[] == orig(this.deltas[])
target[] == orig(target[])
this.isSorted == true
target[].getClass().getName() elements == java.lang.String.class
return[].getClass().getName() elements == java.lang.String.class
return.getClass().getName() == java.util.LinkedList.class
size(this.deltas[]) one of { 1, 3 }
size(return[]) one of { 4, 11, 308 }
this.deltas.getClass().getName() == return.getClass().getName()
return.getClass().getName() == orig(this.deltas.getClass().getName())
===========================================================================
difflib.Patch.getDeltas():::ENTER
size(this.deltas[]) one of { 1, 3, 9 }
===========================================================================
difflib.Patch.getDeltas():::EXIT
this.deltas == return
this.deltas[] == return[]
return == orig(this.deltas)
return[] == orig(this.deltas[])
this.isSorted == true
return != null
return[] elements != null
return.getClass().getName() == java.util.LinkedList.class
size(return[]) one of { 1, 3, 9 }
this.deltas.getClass().getName() == return.getClass().getName()
return.getClass().getName() == orig(this.deltas.getClass().getName())
===========================================================================
difflib.myers.DiffNode:::OBJECT
===========================================================================
difflib.myers.DiffNode.DiffNode(int, int, difflib.myers.PathNode):::ENTER
i >= 0
j >= 0
prev != null
prev.i >= 0
prev.prev.i >= 0
prev.prev.j >= 0
i >= prev.i
i >= prev.prev.i
j >= prev.j
j >= prev.prev.i
j >= prev.prev.j
prev.getClass().getName() == prev.prev.prev.getClass().getName()
prev.i >= prev.prev.i
prev.j >= prev.prev.i
prev.j >= prev.prev.j
prev.prev.getClass().getName() != prev.prev.prev.getClass().getName()
prev.prev.i <= prev.prev.j
===========================================================================
difflib.myers.DiffNode.DiffNode(int, int, difflib.myers.PathNode):::EXIT
prev.i == orig(prev.i)
prev.j == orig(prev.j)
prev.prev == orig(prev.prev)
prev.prev.i == orig(prev.prev.i)
prev.prev.j == orig(prev.prev.j)
prev.prev.prev == orig(prev.prev.prev)
prev.i >= 0
prev.prev.i >= 0
prev.prev.j >= 0
prev.i >= prev.prev.i
prev.i <= orig(i)
prev.j >= prev.prev.i
prev.j >= prev.prev.j
prev.j <= orig(j)
prev.prev.getClass().getName() != prev.prev.prev.getClass().getName()
prev.prev.getClass().getName() == orig(prev.prev.getClass().getName())
prev.prev.i <= prev.prev.j
prev.prev.i <= orig(i)
prev.prev.i <= orig(j)
prev.prev.j <= orig(j)
prev.prev.prev.getClass().getName() == orig(prev.getClass().getName())
prev.prev.prev.getClass().getName() == orig(prev.prev.prev.getClass().getName())
===========================================================================
difflib.myers.DiffNode.isSnake():::ENTER
===========================================================================
difflib.myers.DiffNode.isSnake():::EXIT
return == false
===========================================================================
difflib.myers.DiffNode.isSnake():::EXIT;condition="not(return == true)"
===========================================================================
difflib.myers.MyersDiff:::OBJECT
this has only one value
===========================================================================
difflib.myers.MyersDiff.MyersDiff():::EXIT
===========================================================================
difflib.myers.MyersDiff.buildPath(java.lang.Object[], java.lang.Object[]):::ENTER
size(orig[])-1 != size(rev[])
===========================================================================
difflib.myers.MyersDiff.buildPath(java.lang.Object[], java.lang.Object[]):::EXIT
orig[] == orig(orig[])
rev[] == orig(rev[])
return.i == orig(size(orig[]))
return.j == orig(size(rev[]))
return.prev.j >= 0
return.getClass().getName() != orig(orig.getClass().getName())
return.getClass().getName() != orig(rev.getClass().getName())
return.i >= return.prev.i
return.j != return.prev.i
return.j != size(orig[])-1
return.prev.getClass().getName() != orig(orig.getClass().getName())
return.prev.getClass().getName() != orig(rev.getClass().getName())
return.prev.j <= size(rev[])-1
===========================================================================
difflib.myers.MyersDiff.buildRevision(difflib.myers.PathNode, java.lang.Object[], java.lang.Object[]):::ENTER
path.i == size(orig[])
path.j == size(rev[])
path.prev.j >= 0
path.getClass().getName() != orig.getClass().getName()
path.getClass().getName() != rev.getClass().getName()
path.i >= path.prev.i
path.j != path.prev.i
path.j != size(orig[])-1
path.prev.getClass().getName() != orig.getClass().getName()
path.prev.getClass().getName() != rev.getClass().getName()
path.prev.j <= size(rev[])-1
===========================================================================
difflib.myers.MyersDiff.buildRevision(difflib.myers.PathNode, java.lang.Object[], java.lang.Object[]):::EXIT
orig[] == orig(orig[])
rev[] == orig(rev[])
return.deltas.getClass().getName() == java.util.LinkedList.class
return.isSorted == false
size(return.deltas[]) one of { 1, 9 }
return.deltas.getClass().getName() != orig(path.getClass().getName())
return.deltas.getClass().getName() != orig(path.prev.getClass().getName())
return.deltas.getClass().getName() != orig(orig.getClass().getName())
return.deltas.getClass().getName() != orig(rev.getClass().getName())
orig(path.i) >= size(return.deltas[])-1
orig(path.j) != size(orig[])-1
orig(path.j) >= size(return.deltas[])
orig(path.prev.i) >= size(return.deltas[])-1
orig(path.prev.j) <= size(rev[])-1
orig(path.prev.j) % size(return.deltas[]) == 0
orig(path.prev.j) >= size(return.deltas[])-1
size(orig[])-1 != size(return.deltas[])
size(rev[])-1 != size(return.deltas[])
size(rev[])-1 >= size(return.deltas[])-1
===========================================================================
difflib.myers.MyersDiff.copyOfRange(java.lang.Object[], int, int):::ENTER
original != null
original[] elements != null
from >= 0
from <= to
from <= size(original[])
to <= size(original[])
===========================================================================
difflib.myers.MyersDiff.copyOfRange(java.lang.Object[], int, int):::EXIT
original[] == orig(original[])
original[] elements != null
return != null
return[] elements != null
return.getClass().getName() == orig(original.getClass().getName())
orig(to) >= size(return[])
size(original[])-1 >= size(return[])-1
size(return[]) <= orig(size(original[]))
orig(from) - orig(to) + size(return[]) == 0
orig(from) - orig(to) + size(return[])-1 + 1 == 0
===========================================================================
difflib.myers.MyersDiff.copyOfRange(java.lang.Object[], int, int, java.lang.Class):::ENTER
original != null
original[] elements != null
from >= 0
newType != null
from <= to
from <= size(original[])
to <= size(original[])
===========================================================================
difflib.myers.MyersDiff.copyOfRange(java.lang.Object[], int, int, java.lang.Class):::EXIT
original[] == orig(original[])
original[] elements != null
return != null
return[] elements != null
return.getClass().getName() == orig(original.getClass().getName())
orig(to) >= size(return[])
size(original[])-1 >= size(return[])-1
size(return[]) <= orig(size(original[]))
orig(from) - orig(to) + size(return[]) == 0
orig(from) - orig(to) + size(return[])-1 + 1 == 0
===========================================================================
difflib.myers.MyersDiff.diff(java.lang.Object[], java.lang.Object[]):::ENTER
size(orig[])-1 != size(rev[])
===========================================================================
difflib.myers.MyersDiff.diff(java.lang.Object[], java.lang.Object[]):::EXIT105
===========================================================================
difflib.myers.MyersDiff.diff(java.lang.Object[], java.lang.Object[]):::EXIT
orig[] == orig(orig[])
rev[] == orig(rev[])
return.deltas.getClass().getName() == java.util.LinkedList.class
return.isSorted == false
size(return.deltas[]) one of { 1, 9 }
return.deltas.getClass().getName() != orig(orig.getClass().getName())
return.deltas.getClass().getName() != orig(rev.getClass().getName())
size(orig[])-1 != size(return.deltas[])
size(orig[])-1 != orig(size(rev[]))
size(rev[])-1 != size(return.deltas[])
size(rev[])-1 >= size(return.deltas[])-1
size(return.deltas[]) <= orig(size(rev[]))
size(return.deltas[])-1 <= orig(size(orig[]))
===========================================================================
difflib.myers.MyersDiff.diff(java.util.List, java.util.List):::ENTER
original[].getClass().getName() elements == java.lang.String.class
revised[].getClass().getName() elements == java.lang.String.class
size(original[])-1 != size(revised[])
===========================================================================
difflib.myers.MyersDiff.diff(java.util.List, java.util.List):::EXIT
original[] == orig(original[])
revised[] == orig(revised[])
original[].getClass().getName() elements == java.lang.String.class
revised[].getClass().getName() elements == java.lang.String.class
return.deltas.getClass().getName() == java.util.LinkedList.class
return.isSorted == false
size(return.deltas[]) one of { 1, 9 }
size(original[])-1 != size(return.deltas[])
size(original[])-1 != orig(size(revised[]))
size(revised[])-1 != size(return.deltas[])
size(revised[])-1 >= size(return.deltas[])-1
size(return.deltas[]) <= orig(size(revised[]))
size(return.deltas[])-1 <= orig(size(original[]))
===========================================================================
difflib.myers.PathNode:::OBJECT
this.i >= 0
this.prev.i >= 0
this.prev.j >= 0
this.prev.prev.i >= 0
this.prev.prev.j >= 0
this.getClass().getName() != this.prev.prev.prev.getClass().getName()
this.i >= this.prev.i
this.i > this.prev.prev.i
this.j >= this.prev.j
this.j > this.prev.prev.i
this.j > this.prev.prev.j
this.prev.getClass().getName() == this.prev.prev.prev.getClass().getName()
this.prev.i >= this.prev.prev.i
this.prev.j >= this.prev.prev.i
this.prev.j >= this.prev.prev.j
this.prev.prev.getClass().getName() != this.prev.prev.prev.getClass().getName()
this.prev.prev.i <= this.prev.prev.j
===========================================================================
difflib.myers.PathNode.PathNode(int, int, difflib.myers.PathNode):::ENTER
i >= 0
prev.i >= 0
prev.j >= 0
prev.prev.i >= 0
prev.prev.j >= 0
i >= prev.i
i > prev.prev.i
j >= prev.j
j > prev.prev.i
j > prev.prev.j
prev.getClass().getName() == prev.prev.prev.getClass().getName()
prev.i >= prev.prev.i
prev.j >= prev.prev.i
prev.j >= prev.prev.j
prev.prev.getClass().getName() != prev.prev.prev.getClass().getName()
prev.prev.i <= prev.prev.j
===========================================================================
difflib.myers.PathNode.PathNode(int, int, difflib.myers.PathNode):::EXIT
this.i == orig(i)
this.j == orig(j)
this.prev == orig(prev)
this.prev.i == prev.i
this.prev.j == prev.j
this.prev.prev == prev.prev
this.prev.prev.i == prev.prev.i
this.prev.prev.j == prev.prev.j
this.prev.prev.prev == prev.prev.prev
prev.i == orig(prev.i)
prev.j == orig(prev.j)
prev.prev == orig(prev.prev)
prev.prev.i == orig(prev.prev.i)
prev.prev.j == orig(prev.prev.j)
prev.prev.prev == orig(prev.prev.prev)
prev.i >= 0
prev.j >= 0
prev.prev.i >= 0
prev.prev.j >= 0
this.i >= prev.i
this.i > prev.prev.i
this.j >= prev.j
this.j > prev.prev.i
this.j > prev.prev.j
this.prev.getClass().getName() == prev.prev.prev.getClass().getName()
this.prev.getClass().getName() == orig(prev.getClass().getName())
this.prev.prev.getClass().getName() == prev.prev.getClass().getName()
this.prev.prev.prev.getClass().getName() == prev.prev.prev.getClass().getName()
prev.i >= prev.prev.i
prev.j >= prev.prev.i
prev.j >= prev.prev.j
prev.prev.getClass().getName() != prev.prev.prev.getClass().getName()
prev.prev.getClass().getName() == orig(prev.prev.getClass().getName())
prev.prev.i <= prev.prev.j
prev.prev.prev.getClass().getName() == orig(prev.prev.prev.getClass().getName())
===========================================================================
difflib.myers.PathNode.isBootstrap():::ENTER
this.getClass().getName() == this.prev.prev.getClass().getName()
this.i >= this.prev.prev.j
this.j >= this.prev.i
this.prev.getClass().getName() != this.prev.prev.getClass().getName()
this.prev.i <= this.prev.j
this.prev.i > this.prev.prev.i
this.prev.j > this.prev.prev.i
this.prev.j > this.prev.prev.j
===========================================================================
difflib.myers.PathNode.isBootstrap():::EXIT104
this.j >= 0
return == false
===========================================================================
difflib.myers.PathNode.isBootstrap():::EXIT104;condition="not(return == true)"
===========================================================================
difflib.myers.PathNode.isBootstrap():::EXIT105
this.i == 0
this.j == -1
this.prev == null
return == true
orig(this.getClass().getName()) == difflib.myers.Snake.class
===========================================================================
difflib.myers.PathNode.isBootstrap():::EXIT105;condition="return == true"
===========================================================================
difflib.myers.PathNode.isBootstrap():::EXIT
this.i == orig(this.i)
this.j == orig(this.j)
this.prev == orig(this.prev)
this.prev.i == orig(this.prev.i)
this.prev.j == orig(this.prev.j)
this.prev.prev == orig(this.prev.prev)
this.prev.prev.i == orig(this.prev.prev.i)
this.prev.prev.j == orig(this.prev.prev.j)
this.prev.prev.prev == orig(this.prev.prev.prev)
(this.j == -1)  <==>  (return == true)
(this.j == -1)  ==>  (orig(this.getClass().getName()) == difflib.myers.Snake.class)
(this.j == -1)  ==>  (this.i == 0)
(this.j == -1)  ==>  (this.i > this.j)
(this.j == -1)  ==>  (this.prev == null)
(this.j >= 0)  <==>  (return == false)
(this.j >= 0)  ==>  (this.i > this.prev.prev.i)
(this.j >= 0)  ==>  (this.i >= this.prev.i)
(this.j >= 0)  ==>  (this.i >= this.prev.prev.j)
(this.j >= 0)  ==>  (this.j > this.prev.prev.i)
(this.j >= 0)  ==>  (this.j > this.prev.prev.j)
(this.j >= 0)  ==>  (this.j >= this.prev.i)
(this.j >= 0)  ==>  (this.j >= this.prev.j)
(this.j >= 0)  ==>  (this.prev.getClass().getName() != this.prev.prev.getClass().getName())
(this.j >= 0)  ==>  (this.prev.getClass().getName() == this.prev.prev.prev.getClass().getName())
(this.j >= 0)  ==>  (this.prev.i <= this.prev.j)
(this.j >= 0)  ==>  (this.prev.i > this.prev.prev.i)
(this.j >= 0)  ==>  (this.prev.i >= 0)
(this.j >= 0)  ==>  (this.prev.j > this.prev.prev.i)
(this.j >= 0)  ==>  (this.prev.j > this.prev.prev.j)
(this.j >= 0)  ==>  (this.prev.j >= 0)
(this.j >= 0)  ==>  (this.prev.prev.getClass().getName() != this.prev.prev.prev.getClass().getName())
(this.j >= 0)  ==>  (this.prev.prev.getClass().getName() == orig(this.getClass().getName()))
(this.j >= 0)  ==>  (this.prev.prev.i <= this.prev.prev.j)
(this.j >= 0)  ==>  (this.prev.prev.i >= 0)
(this.j >= 0)  ==>  (this.prev.prev.j >= 0)
(this.j >= 0)  ==>  (this.prev.prev.prev.getClass().getName() != orig(this.getClass().getName()))
this.i >= this.prev.prev.j
this.j >= this.prev.i
this.prev.getClass().getName() != this.prev.prev.getClass().getName()
this.prev.getClass().getName() == orig(this.prev.getClass().getName())
this.prev.i <= this.prev.j
this.prev.i > this.prev.prev.i
this.prev.j > this.prev.prev.i
this.prev.j > this.prev.prev.j
this.prev.prev.getClass().getName() == orig(this.getClass().getName())
this.prev.prev.getClass().getName() == orig(this.prev.prev.getClass().getName())
this.prev.prev.prev.getClass().getName() != orig(this.getClass().getName())
this.prev.prev.prev.getClass().getName() == orig(this.prev.prev.prev.getClass().getName())
===========================================================================
difflib.myers.PathNode.isBootstrap():::EXIT;condition="return == true"
this.i == 0
this.j == -1
this.prev == null
return == true
orig(this.getClass().getName()) == difflib.myers.Snake.class
===========================================================================
difflib.myers.PathNode.isBootstrap():::EXIT;condition="not(return == true)"
this.j >= 0
return == false
===========================================================================
difflib.myers.PathNode.previousSnake():::ENTER
this.getClass().getName() == this.prev.prev.getClass().getName()
this.i >= this.prev.prev.j
this.j >= this.prev.i
this.prev.getClass().getName() != this.prev.prev.getClass().getName()
this.prev.i <= this.prev.j
this.prev.i > this.prev.prev.i
this.prev.j > this.prev.prev.i
this.prev.j > this.prev.prev.j
===========================================================================
difflib.myers.PathNode.previousSnake():::EXIT117
this.prev == return
return == orig(this.prev)
this.i == 0
this.j == -1
return == null
orig(this.getClass().getName()) == difflib.myers.Snake.class
===========================================================================
difflib.myers.PathNode.previousSnake():::EXIT119
this.prev == return
this.prev.i == return.i
this.prev.j == return.j
this.prev.prev == return.prev
this.prev.prev.i == return.prev.i
this.prev.prev.j == return.prev.j
this.prev.prev.prev == return.prev.prev
return == orig(this.prev)
return.i == orig(this.prev.i)
return.j == orig(this.prev.j)
return.prev == orig(this.prev.prev)
return.prev.i == orig(this.prev.prev.i)
return.prev.j == orig(this.prev.prev.j)
return.prev.prev == orig(this.prev.prev.prev)
this.j >= 0
return != null
orig(this.getClass().getName()) == difflib.myers.DiffNode.class
this.prev.getClass().getName() == return.getClass().getName()
this.prev.prev.getClass().getName() == return.prev.getClass().getName()
this.prev.prev.prev.getClass().getName() == return.prev.prev.getClass().getName()
return.getClass().getName() == orig(this.prev.getClass().getName())
return.prev.getClass().getName() == orig(this.getClass().getName())
return.prev.getClass().getName() == orig(this.prev.prev.getClass().getName())
return.prev.prev.getClass().getName() != orig(this.getClass().getName())
return.prev.prev.getClass().getName() == orig(this.prev.prev.prev.getClass().getName())
===========================================================================
difflib.myers.PathNode.previousSnake():::EXIT120
this.i == return.i
this.j == return.j
this.prev == return.prev
this.prev.i == return.prev.i
this.prev.j == return.prev.j
this.prev.prev == return.prev.prev
return == orig(this)
this.j >= 0
this.prev.getClass().getName() == difflib.myers.DiffNode.class
this.prev.prev.getClass().getName() == difflib.myers.Snake.class
this.prev.prev.prev != null
this.prev.prev.prev.getClass().getName() == difflib.myers.DiffNode.class
this.i <= this.j
this.i > this.prev.i
this.i >= this.prev.j
this.i > this.prev.prev.j
this.j > this.prev.i
this.j > this.prev.j
this.prev.getClass().getName() != return.getClass().getName()
this.prev.getClass().getName() == return.prev.getClass().getName()
this.prev.i - this.prev.prev.i - 1 == 0
this.prev.prev.getClass().getName() == return.getClass().getName()
this.prev.prev.getClass().getName() == return.prev.prev.getClass().getName()
this.prev.prev.prev.getClass().getName() != return.getClass().getName()
return.getClass().getName() == orig(this.getClass().getName())
===========================================================================
difflib.myers.PathNode.previousSnake():::EXIT
this.i == orig(this.i)
this.j == orig(this.j)
this.prev == orig(this.prev)
this.prev.i == orig(this.prev.i)
this.prev.j == orig(this.prev.j)
this.prev.prev == orig(this.prev.prev)
this.prev.prev.i == orig(this.prev.prev.i)
this.prev.prev.j == orig(this.prev.prev.j)
this.prev.prev.prev == orig(this.prev.prev.prev)
return.i >= 0
return.j >= 0
return.prev.getClass().getName() == difflib.myers.DiffNode.class
return.prev.i >= 0
return.prev.j >= 0
return.prev.prev.getClass().getName() == difflib.myers.Snake.class
this.i >= this.prev.prev.j
this.i >= return.i
this.i > return.prev.i
this.i >= return.prev.j
this.j >= this.prev.i
this.j >= return.i
this.j >= return.j
this.j > return.prev.i
this.j > return.prev.j
this.prev.getClass().getName() != this.prev.prev.getClass().getName()
this.prev.getClass().getName() == orig(this.prev.getClass().getName())
this.prev.i <= this.prev.j
this.prev.i > this.prev.prev.i
this.prev.i <= return.i
this.prev.i <= return.j
this.prev.i >= return.prev.i
this.prev.j > this.prev.prev.i
this.prev.j > this.prev.prev.j
this.prev.j <= return.j
this.prev.j >= return.prev.i
this.prev.j >= return.prev.j
this.prev.prev.getClass().getName() == orig(this.getClass().getName())
this.prev.prev.getClass().getName() == orig(this.prev.prev.getClass().getName())
this.prev.prev.i < return.i
this.prev.prev.i < return.j
this.prev.prev.i <= return.prev.i
this.prev.prev.i <= return.prev.j
this.prev.prev.j <= return.i
this.prev.prev.j < return.j
this.prev.prev.j <= return.prev.j
this.prev.prev.prev.getClass().getName() != orig(this.getClass().getName())
this.prev.prev.prev.getClass().getName() == orig(this.prev.prev.prev.getClass().getName())
return.getClass().getName() != return.prev.getClass().getName()
return.getClass().getName() == return.prev.prev.getClass().getName()
return.i <= return.j
return.i > return.prev.i
return.i >= return.prev.j
return.j > return.prev.i
return.j > return.prev.j
return.prev.getClass().getName() != return.prev.prev.getClass().getName()
return.prev.i <= return.prev.j
===========================================================================
difflib.myers.Snake:::OBJECT
===========================================================================
difflib.myers.Snake.Snake(int, int, difflib.myers.PathNode):::ENTER
i >= 0
j >= -1
prev.getClass().getName() == difflib.myers.DiffNode.class
prev.i >= 0
prev.j >= 0
prev.prev.prev.getClass().getName() == difflib.myers.DiffNode.class
i > prev.i
i > prev.prev.i
i != prev.prev.j
j != prev.i
j > prev.j
j > prev.prev.i
j > prev.prev.j
prev.getClass().getName() == prev.prev.prev.getClass().getName()
prev.i >= prev.prev.i
prev.j >= prev.prev.i
prev.j >= prev.prev.j
prev.prev.getClass().getName() != prev.prev.prev.getClass().getName()
prev.prev.i <= prev.prev.j
===========================================================================
difflib.myers.Snake.Snake(int, int, difflib.myers.PathNode):::EXIT
prev.i == orig(prev.i)
prev.j == orig(prev.j)
prev.prev == orig(prev.prev)
prev.prev.i == orig(prev.prev.i)
prev.prev.j == orig(prev.prev.j)
prev.prev.prev == orig(prev.prev.prev)
prev.i >= 0
prev.j >= 0
prev.prev.prev.getClass().getName() == difflib.myers.DiffNode.class
prev.i >= prev.prev.i
prev.i < orig(i)
prev.i != orig(j)
prev.j >= prev.prev.i
prev.j >= prev.prev.j
prev.j < orig(j)
prev.prev.getClass().getName() != prev.prev.prev.getClass().getName()
prev.prev.getClass().getName() == orig(prev.prev.getClass().getName())
prev.prev.i <= prev.prev.j
prev.prev.i < orig(i)
prev.prev.i < orig(j)
prev.prev.j != orig(i)
prev.prev.j < orig(j)
prev.prev.prev.getClass().getName() == orig(prev.getClass().getName())
prev.prev.prev.getClass().getName() == orig(prev.prev.prev.getClass().getName())
===========================================================================
difflib.myers.Snake.isSnake():::ENTER
===========================================================================
difflib.myers.Snake.isSnake():::EXIT
return == true
===========================================================================
difflib.myers.Snake.isSnake():::EXIT;condition="return == true"
===========================================================================
diffutills.DaikonTestIssue10$1:::OBJECT
diffutills.DaikonTestIssue10.this.deleteTest_to1[] == diffutills.DaikonTestIssue10.this.deleteTest_to[]
diffutills.DaikonTestIssue10.this.insertTest_from1[] == diffutills.DaikonTestIssue10.this.insertTest_from[]
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.changeTest_to1[])
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.deleteTest_from1[])
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.insertTest_to1[])
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.changeTest_from[])-1
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.changeTest_to[])-1
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.deleteTest_from[])-1
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.insertTest_to[])-1
size(diffutills.DaikonTestIssue10.this.deleteTest_to1[]) == size(diffutills.DaikonTestIssue10.this.insertTest_from1[])
size(diffutills.DaikonTestIssue10.this.deleteTest_to1[]) == size(diffutills.DaikonTestIssue10.this.insertTest_from[])
size(diffutills.DaikonTestIssue10.this.changeTest_from[]) == size(diffutills.DaikonTestIssue10.this.changeTest_to[])
size(diffutills.DaikonTestIssue10.this.changeTest_from[]) == size(diffutills.DaikonTestIssue10.this.deleteTest_from[])
size(diffutills.DaikonTestIssue10.this.changeTest_from[]) == size(diffutills.DaikonTestIssue10.this.insertTest_to[])
this has only one value
diffutills.DaikonTestIssue10.this has only one value
diffutills.DaikonTestIssue10.this.changeTest_from1 has only one value
diffutills.DaikonTestIssue10.this.changeTest_from1[] contains no nulls and has only one value, of length 3
diffutills.DaikonTestIssue10.this.changeTest_from1[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
diffutills.DaikonTestIssue10.this.changeTest_from1[].getClass().getName() elements == java.lang.String.class
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == java.util.Arrays$ArrayList.class
diffutills.DaikonTestIssue10.this.changeTest_to1 has only one value
diffutills.DaikonTestIssue10.this.changeTest_to1[] contains no nulls and has only one value, of length 3
diffutills.DaikonTestIssue10.this.deleteTest_from1 has only one value
diffutills.DaikonTestIssue10.this.deleteTest_from1[] contains no nulls and has only one value, of length 3
diffutills.DaikonTestIssue10.this.deleteTest_to1 has only one value
diffutills.DaikonTestIssue10.this.deleteTest_to1[] contains no nulls and has only one value, of length 1
diffutills.DaikonTestIssue10.this.deleteTest_to1[] elements has only one value
diffutills.DaikonTestIssue10.this.deleteTest_to1[].getClass().getName() == [java.lang.String]
diffutills.DaikonTestIssue10.this.deleteTest_to1[].getClass().getName() elements == java.lang.String.class
diffutills.DaikonTestIssue10.this.insertTest_from1 has only one value
diffutills.DaikonTestIssue10.this.insertTest_from1[] contains no nulls and has only one value, of length 1
diffutills.DaikonTestIssue10.this.insertTest_from1[] elements has only one value
diffutills.DaikonTestIssue10.this.insertTest_to1 has only one value
diffutills.DaikonTestIssue10.this.insertTest_to1[] contains no nulls and has only one value, of length 3
diffutills.DaikonTestIssue10.FS has only one value
diffutills.DaikonTestIssue10.FS.toString == "/"
diffutills.DaikonTestIssue10.resourceFolder has only one value
diffutills.DaikonTestIssue10.resourceFolder.toString == "/Users/HongLongPham/Workspace/testdata/java-diff-utils/rev25/target/test-classes"
diffutills.DaikonTestIssue10.originalFilename has only one value
diffutills.DaikonTestIssue10.originalFilename.toString == "/Users/HongLongPham/Workspace/testdata/java-diff-utils/rev25/target/test-classes/original.txt"
diffutills.DaikonTestIssue10.revisedFilename has only one value
diffutills.DaikonTestIssue10.revisedFilename.toString == "/Users/HongLongPham/Workspace/testdata/java-diff-utils/rev25/target/test-classes/revised.txt"
diffutills.DaikonTestIssue10.originalFilenameOneDelta has only one value
diffutills.DaikonTestIssue10.originalFilenameOneDelta.toString == "/Users/HongLongPham/Workspace/testdata/java-diff-utils/rev25/target/test-classes/one_delta_test_original.txt"
diffutills.DaikonTestIssue10.revisedFilenameOneDelta has only one value
diffutills.DaikonTestIssue10.revisedFilenameOneDelta.toString == "/Users/HongLongPham/Workspace/testdata/java-diff-utils/rev25/target/test-classes/one_delta_test_revised.txt"
diffutills.DaikonTestIssue10.this.changeTest_from has only one value
diffutills.DaikonTestIssue10.this.changeTest_from[] contains no nulls and has only one value, of length 4
diffutills.DaikonTestIssue10.this.changeTest_from[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
diffutills.DaikonTestIssue10.this.changeTest_from[].getClass().getName() elements == java.lang.String.class
diffutills.DaikonTestIssue10.this.changeTest_to has only one value
diffutills.DaikonTestIssue10.this.changeTest_to[] contains no nulls and has only one value, of length 4
diffutills.DaikonTestIssue10.this.deleteTest_from has only one value
diffutills.DaikonTestIssue10.this.deleteTest_from[] contains no nulls and has only one value, of length 4
diffutills.DaikonTestIssue10.this.deleteTest_to has only one value
diffutills.DaikonTestIssue10.this.insertTest_from has only one value
diffutills.DaikonTestIssue10.this.insertTest_to has only one value
diffutills.DaikonTestIssue10.this.insertTest_to[] contains no nulls and has only one value, of length 4
size(diffutills.DaikonTestIssue10.this.deleteTest_to1[]) == 1
size(diffutills.DaikonTestIssue10.this.changeTest_from[]) == 4
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.changeTest_to1.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.deleteTest_from1.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.deleteTest_to1.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.insertTest_from1.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.insertTest_to1.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.changeTest_from.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.changeTest_to.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.deleteTest_from.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.deleteTest_to.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.insertTest_from.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.insertTest_to.getClass().getName()
===========================================================================
diffutills.DaikonTestIssue10$1.DaikonTestIssue10$1(diffutills.DaikonTestIssue10):::ENTER
diffutills.DaikonTestIssue10.this.deleteTest_to1[] == diffutills.DaikonTestIssue10.this.deleteTest_to[]
diffutills.DaikonTestIssue10.this.insertTest_from1[] == diffutills.DaikonTestIssue10.this.insertTest_from[]
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.changeTest_to1[])
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.deleteTest_from1[])
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.insertTest_to1[])
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.changeTest_from[])-1
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.changeTest_to[])-1
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.deleteTest_from[])-1
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.insertTest_to[])-1
size(diffutills.DaikonTestIssue10.this.deleteTest_to1[]) == size(diffutills.DaikonTestIssue10.this.insertTest_from1[])
size(diffutills.DaikonTestIssue10.this.deleteTest_to1[]) == size(diffutills.DaikonTestIssue10.this.insertTest_from[])
size(diffutills.DaikonTestIssue10.this.changeTest_from[]) == size(diffutills.DaikonTestIssue10.this.changeTest_to[])
size(diffutills.DaikonTestIssue10.this.changeTest_from[]) == size(diffutills.DaikonTestIssue10.this.deleteTest_from[])
size(diffutills.DaikonTestIssue10.this.changeTest_from[]) == size(diffutills.DaikonTestIssue10.this.insertTest_to[])
diffutills.DaikonTestIssue10.this has only one value
diffutills.DaikonTestIssue10.this.changeTest_from1 has only one value
diffutills.DaikonTestIssue10.this.changeTest_from1[] contains no nulls and has only one value, of length 3
diffutills.DaikonTestIssue10.this.changeTest_from1[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
diffutills.DaikonTestIssue10.this.changeTest_from1[].getClass().getName() elements == java.lang.String.class
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == java.util.Arrays$ArrayList.class
diffutills.DaikonTestIssue10.this.changeTest_to1 has only one value
diffutills.DaikonTestIssue10.this.changeTest_to1[] contains no nulls and has only one value, of length 3
diffutills.DaikonTestIssue10.this.deleteTest_from1 has only one value
diffutills.DaikonTestIssue10.this.deleteTest_from1[] contains no nulls and has only one value, of length 3
diffutills.DaikonTestIssue10.this.deleteTest_to1 has only one value
diffutills.DaikonTestIssue10.this.deleteTest_to1[] contains no nulls and has only one value, of length 1
diffutills.DaikonTestIssue10.this.deleteTest_to1[] elements has only one value
diffutills.DaikonTestIssue10.this.deleteTest_to1[].getClass().getName() == [java.lang.String]
diffutills.DaikonTestIssue10.this.deleteTest_to1[].getClass().getName() elements == java.lang.String.class
diffutills.DaikonTestIssue10.this.insertTest_from1 has only one value
diffutills.DaikonTestIssue10.this.insertTest_from1[] contains no nulls and has only one value, of length 1
diffutills.DaikonTestIssue10.this.insertTest_from1[] elements has only one value
diffutills.DaikonTestIssue10.this.insertTest_to1 has only one value
diffutills.DaikonTestIssue10.this.insertTest_to1[] contains no nulls and has only one value, of length 3
diffutills.DaikonTestIssue10.FS has only one value
diffutills.DaikonTestIssue10.FS.toString == "/"
diffutills.DaikonTestIssue10.resourceFolder has only one value
diffutills.DaikonTestIssue10.resourceFolder.toString == "/Users/HongLongPham/Workspace/testdata/java-diff-utils/rev25/target/test-classes"
diffutills.DaikonTestIssue10.originalFilename has only one value
diffutills.DaikonTestIssue10.originalFilename.toString == "/Users/HongLongPham/Workspace/testdata/java-diff-utils/rev25/target/test-classes/original.txt"
diffutills.DaikonTestIssue10.revisedFilename has only one value
diffutills.DaikonTestIssue10.revisedFilename.toString == "/Users/HongLongPham/Workspace/testdata/java-diff-utils/rev25/target/test-classes/revised.txt"
diffutills.DaikonTestIssue10.originalFilenameOneDelta has only one value
diffutills.DaikonTestIssue10.originalFilenameOneDelta.toString == "/Users/HongLongPham/Workspace/testdata/java-diff-utils/rev25/target/test-classes/one_delta_test_original.txt"
diffutills.DaikonTestIssue10.revisedFilenameOneDelta has only one value
diffutills.DaikonTestIssue10.revisedFilenameOneDelta.toString == "/Users/HongLongPham/Workspace/testdata/java-diff-utils/rev25/target/test-classes/one_delta_test_revised.txt"
diffutills.DaikonTestIssue10.this.changeTest_from has only one value
diffutills.DaikonTestIssue10.this.changeTest_from[] contains no nulls and has only one value, of length 4
diffutills.DaikonTestIssue10.this.changeTest_from[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
diffutills.DaikonTestIssue10.this.changeTest_from[].getClass().getName() elements == java.lang.String.class
diffutills.DaikonTestIssue10.this.changeTest_to has only one value
diffutills.DaikonTestIssue10.this.changeTest_to[] contains no nulls and has only one value, of length 4
diffutills.DaikonTestIssue10.this.deleteTest_from has only one value
diffutills.DaikonTestIssue10.this.deleteTest_from[] contains no nulls and has only one value, of length 4
diffutills.DaikonTestIssue10.this.deleteTest_to has only one value
diffutills.DaikonTestIssue10.this.insertTest_from has only one value
diffutills.DaikonTestIssue10.this.insertTest_to has only one value
diffutills.DaikonTestIssue10.this.insertTest_to[] contains no nulls and has only one value, of length 4
size(diffutills.DaikonTestIssue10.this.deleteTest_to1[]) == 1
size(diffutills.DaikonTestIssue10.this.changeTest_from[]) == 4
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.changeTest_to1.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.deleteTest_from1.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.deleteTest_to1.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.insertTest_from1.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.insertTest_to1.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.changeTest_from.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.changeTest_to.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.deleteTest_from.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.deleteTest_to.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.insertTest_from.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.insertTest_to.getClass().getName()
===========================================================================
diffutills.DaikonTestIssue10$1.DaikonTestIssue10$1(diffutills.DaikonTestIssue10):::EXIT
diffutills.DaikonTestIssue10.this == orig(diffutills.DaikonTestIssue10.this)
diffutills.DaikonTestIssue10.this.changeTest_from1 == orig(diffutills.DaikonTestIssue10.this.changeTest_from1)
diffutills.DaikonTestIssue10.this.changeTest_from1[] == orig(diffutills.DaikonTestIssue10.this.changeTest_from1[])
diffutills.DaikonTestIssue10.this.changeTest_to1 == orig(diffutills.DaikonTestIssue10.this.changeTest_to1)
diffutills.DaikonTestIssue10.this.changeTest_to1[] == orig(diffutills.DaikonTestIssue10.this.changeTest_to1[])
diffutills.DaikonTestIssue10.this.deleteTest_from1 == orig(diffutills.DaikonTestIssue10.this.deleteTest_from1)
diffutills.DaikonTestIssue10.this.deleteTest_from1[] == orig(diffutills.DaikonTestIssue10.this.deleteTest_from1[])
diffutills.DaikonTestIssue10.this.deleteTest_to1 == orig(diffutills.DaikonTestIssue10.this.deleteTest_to1)
diffutills.DaikonTestIssue10.this.deleteTest_to1[] == orig(diffutills.DaikonTestIssue10.this.deleteTest_to1[])
diffutills.DaikonTestIssue10.this.deleteTest_to1[] == orig(diffutills.DaikonTestIssue10.this.deleteTest_to[])
diffutills.DaikonTestIssue10.this.insertTest_from1 == orig(diffutills.DaikonTestIssue10.this.insertTest_from1)
diffutills.DaikonTestIssue10.this.insertTest_from1[] == orig(diffutills.DaikonTestIssue10.this.insertTest_from1[])
diffutills.DaikonTestIssue10.this.insertTest_from1[] == orig(diffutills.DaikonTestIssue10.this.insertTest_from[])
diffutills.DaikonTestIssue10.this.insertTest_to1 == orig(diffutills.DaikonTestIssue10.this.insertTest_to1)
diffutills.DaikonTestIssue10.this.insertTest_to1[] == orig(diffutills.DaikonTestIssue10.this.insertTest_to1[])
diffutills.DaikonTestIssue10.FS == orig(diffutills.DaikonTestIssue10.FS)
diffutills.DaikonTestIssue10.resourceFolder == orig(diffutills.DaikonTestIssue10.resourceFolder)
diffutills.DaikonTestIssue10.originalFilename == orig(diffutills.DaikonTestIssue10.originalFilename)
diffutills.DaikonTestIssue10.revisedFilename == orig(diffutills.DaikonTestIssue10.revisedFilename)
diffutills.DaikonTestIssue10.originalFilenameOneDelta == orig(diffutills.DaikonTestIssue10.originalFilenameOneDelta)
diffutills.DaikonTestIssue10.revisedFilenameOneDelta == orig(diffutills.DaikonTestIssue10.revisedFilenameOneDelta)
diffutills.DaikonTestIssue10.this.changeTest_from == orig(diffutills.DaikonTestIssue10.this.changeTest_from)
diffutills.DaikonTestIssue10.this.changeTest_from[] == orig(diffutills.DaikonTestIssue10.this.changeTest_from[])
diffutills.DaikonTestIssue10.this.changeTest_to == orig(diffutills.DaikonTestIssue10.this.changeTest_to)
diffutills.DaikonTestIssue10.this.changeTest_to[] == orig(diffutills.DaikonTestIssue10.this.changeTest_to[])
diffutills.DaikonTestIssue10.this.deleteTest_from == orig(diffutills.DaikonTestIssue10.this.deleteTest_from)
diffutills.DaikonTestIssue10.this.deleteTest_from[] == orig(diffutills.DaikonTestIssue10.this.deleteTest_from[])
diffutills.DaikonTestIssue10.this.deleteTest_to == orig(diffutills.DaikonTestIssue10.this.deleteTest_to)
diffutills.DaikonTestIssue10.this.insertTest_from == orig(diffutills.DaikonTestIssue10.this.insertTest_from)
diffutills.DaikonTestIssue10.this.insertTest_to == orig(diffutills.DaikonTestIssue10.this.insertTest_to)
diffutills.DaikonTestIssue10.this.insertTest_to[] == orig(diffutills.DaikonTestIssue10.this.insertTest_to[])
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == orig(size(diffutills.DaikonTestIssue10.this.changeTest_to1[]))
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == orig(size(diffutills.DaikonTestIssue10.this.deleteTest_from1[]))
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == orig(size(diffutills.DaikonTestIssue10.this.insertTest_to1[]))
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == orig(size(diffutills.DaikonTestIssue10.this.changeTest_from[]))-1
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == orig(size(diffutills.DaikonTestIssue10.this.changeTest_to[]))-1
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == orig(size(diffutills.DaikonTestIssue10.this.deleteTest_from[]))-1
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == orig(size(diffutills.DaikonTestIssue10.this.insertTest_to[]))-1
size(diffutills.DaikonTestIssue10.this.deleteTest_to1[]) == orig(size(diffutills.DaikonTestIssue10.this.insertTest_from1[]))
size(diffutills.DaikonTestIssue10.this.deleteTest_to1[]) == orig(size(diffutills.DaikonTestIssue10.this.insertTest_from[]))
size(diffutills.DaikonTestIssue10.this.changeTest_from[]) == orig(size(diffutills.DaikonTestIssue10.this.changeTest_to[]))
size(diffutills.DaikonTestIssue10.this.changeTest_from[]) == orig(size(diffutills.DaikonTestIssue10.this.deleteTest_from[]))
size(diffutills.DaikonTestIssue10.this.changeTest_from[]) == orig(size(diffutills.DaikonTestIssue10.this.insertTest_to[]))
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == orig(diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName())
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == orig(diffutills.DaikonTestIssue10.this.changeTest_to1.getClass().getName())
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == orig(diffutills.DaikonTestIssue10.this.deleteTest_from1.getClass().getName())
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == orig(diffutills.DaikonTestIssue10.this.deleteTest_to1.getClass().getName())
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == orig(diffutills.DaikonTestIssue10.this.insertTest_from1.getClass().getName())
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == orig(diffutills.DaikonTestIssue10.this.insertTest_to1.getClass().getName())
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == orig(diffutills.DaikonTestIssue10.this.changeTest_from.getClass().getName())
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == orig(diffutills.DaikonTestIssue10.this.changeTest_to.getClass().getName())
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == orig(diffutills.DaikonTestIssue10.this.deleteTest_from.getClass().getName())
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == orig(diffutills.DaikonTestIssue10.this.deleteTest_to.getClass().getName())
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == orig(diffutills.DaikonTestIssue10.this.insertTest_from.getClass().getName())
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == orig(diffutills.DaikonTestIssue10.this.insertTest_to.getClass().getName())
diffutills.DaikonTestIssue10.FS.toString == orig(diffutills.DaikonTestIssue10.FS.toString)
diffutills.DaikonTestIssue10.resourceFolder.toString == orig(diffutills.DaikonTestIssue10.resourceFolder.toString)
diffutills.DaikonTestIssue10.originalFilename.toString == orig(diffutills.DaikonTestIssue10.originalFilename.toString)
diffutills.DaikonTestIssue10.revisedFilename.toString == orig(diffutills.DaikonTestIssue10.revisedFilename.toString)
diffutills.DaikonTestIssue10.originalFilenameOneDelta.toString == orig(diffutills.DaikonTestIssue10.originalFilenameOneDelta.toString)
diffutills.DaikonTestIssue10.revisedFilenameOneDelta.toString == orig(diffutills.DaikonTestIssue10.revisedFilenameOneDelta.toString)
===========================================================================
diffutills.DaikonTestIssue10$2:::OBJECT
diffutills.DaikonTestIssue10.this.deleteTest_to1[] == diffutills.DaikonTestIssue10.this.deleteTest_to[]
diffutills.DaikonTestIssue10.this.insertTest_from1[] == diffutills.DaikonTestIssue10.this.insertTest_from[]
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.changeTest_to1[])
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.deleteTest_from1[])
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.insertTest_to1[])
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.changeTest_from[])-1
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.changeTest_to[])-1
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.deleteTest_from[])-1
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.insertTest_to[])-1
size(diffutills.DaikonTestIssue10.this.deleteTest_to1[]) == size(diffutills.DaikonTestIssue10.this.insertTest_from1[])
size(diffutills.DaikonTestIssue10.this.deleteTest_to1[]) == size(diffutills.DaikonTestIssue10.this.insertTest_from[])
size(diffutills.DaikonTestIssue10.this.changeTest_from[]) == size(diffutills.DaikonTestIssue10.this.changeTest_to[])
size(diffutills.DaikonTestIssue10.this.changeTest_from[]) == size(diffutills.DaikonTestIssue10.this.deleteTest_from[])
size(diffutills.DaikonTestIssue10.this.changeTest_from[]) == size(diffutills.DaikonTestIssue10.this.insertTest_to[])
this has only one value
diffutills.DaikonTestIssue10.this has only one value
diffutills.DaikonTestIssue10.this.changeTest_from1 has only one value
diffutills.DaikonTestIssue10.this.changeTest_from1[] contains no nulls and has only one value, of length 3
diffutills.DaikonTestIssue10.this.changeTest_from1[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
diffutills.DaikonTestIssue10.this.changeTest_from1[].getClass().getName() elements == java.lang.String.class
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == java.util.Arrays$ArrayList.class
diffutills.DaikonTestIssue10.this.changeTest_to1 has only one value
diffutills.DaikonTestIssue10.this.changeTest_to1[] contains no nulls and has only one value, of length 3
diffutills.DaikonTestIssue10.this.deleteTest_from1 has only one value
diffutills.DaikonTestIssue10.this.deleteTest_from1[] contains no nulls and has only one value, of length 3
diffutills.DaikonTestIssue10.this.deleteTest_to1 has only one value
diffutills.DaikonTestIssue10.this.deleteTest_to1[] contains no nulls and has only one value, of length 1
diffutills.DaikonTestIssue10.this.deleteTest_to1[] elements has only one value
diffutills.DaikonTestIssue10.this.deleteTest_to1[].getClass().getName() == [java.lang.String]
diffutills.DaikonTestIssue10.this.deleteTest_to1[].getClass().getName() elements == java.lang.String.class
diffutills.DaikonTestIssue10.this.insertTest_from1 has only one value
diffutills.DaikonTestIssue10.this.insertTest_from1[] contains no nulls and has only one value, of length 1
diffutills.DaikonTestIssue10.this.insertTest_from1[] elements has only one value
diffutills.DaikonTestIssue10.this.insertTest_to1 has only one value
diffutills.DaikonTestIssue10.this.insertTest_to1[] contains no nulls and has only one value, of length 3
diffutills.DaikonTestIssue10.FS has only one value
diffutills.DaikonTestIssue10.FS.toString == "/"
diffutills.DaikonTestIssue10.resourceFolder has only one value
diffutills.DaikonTestIssue10.resourceFolder.toString == "/Users/HongLongPham/Workspace/testdata/java-diff-utils/rev25/target/test-classes"
diffutills.DaikonTestIssue10.originalFilename has only one value
diffutills.DaikonTestIssue10.originalFilename.toString == "/Users/HongLongPham/Workspace/testdata/java-diff-utils/rev25/target/test-classes/original.txt"
diffutills.DaikonTestIssue10.revisedFilename has only one value
diffutills.DaikonTestIssue10.revisedFilename.toString == "/Users/HongLongPham/Workspace/testdata/java-diff-utils/rev25/target/test-classes/revised.txt"
diffutills.DaikonTestIssue10.originalFilenameOneDelta has only one value
diffutills.DaikonTestIssue10.originalFilenameOneDelta.toString == "/Users/HongLongPham/Workspace/testdata/java-diff-utils/rev25/target/test-classes/one_delta_test_original.txt"
diffutills.DaikonTestIssue10.revisedFilenameOneDelta has only one value
diffutills.DaikonTestIssue10.revisedFilenameOneDelta.toString == "/Users/HongLongPham/Workspace/testdata/java-diff-utils/rev25/target/test-classes/one_delta_test_revised.txt"
diffutills.DaikonTestIssue10.this.changeTest_from has only one value
diffutills.DaikonTestIssue10.this.changeTest_from[] contains no nulls and has only one value, of length 4
diffutills.DaikonTestIssue10.this.changeTest_from[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
diffutills.DaikonTestIssue10.this.changeTest_from[].getClass().getName() elements == java.lang.String.class
diffutills.DaikonTestIssue10.this.changeTest_to has only one value
diffutills.DaikonTestIssue10.this.changeTest_to[] contains no nulls and has only one value, of length 4
diffutills.DaikonTestIssue10.this.deleteTest_from has only one value
diffutills.DaikonTestIssue10.this.deleteTest_from[] contains no nulls and has only one value, of length 4
diffutills.DaikonTestIssue10.this.deleteTest_to has only one value
diffutills.DaikonTestIssue10.this.insertTest_from has only one value
diffutills.DaikonTestIssue10.this.insertTest_to has only one value
diffutills.DaikonTestIssue10.this.insertTest_to[] contains no nulls and has only one value, of length 4
size(diffutills.DaikonTestIssue10.this.deleteTest_to1[]) == 1
size(diffutills.DaikonTestIssue10.this.changeTest_from[]) == 4
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.changeTest_to1.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.deleteTest_from1.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.deleteTest_to1.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.insertTest_from1.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.insertTest_to1.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.changeTest_from.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.changeTest_to.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.deleteTest_from.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.deleteTest_to.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.insertTest_from.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.insertTest_to.getClass().getName()
===========================================================================
diffutills.DaikonTestIssue10$2.DaikonTestIssue10$2(diffutills.DaikonTestIssue10):::ENTER
diffutills.DaikonTestIssue10.this.deleteTest_to1[] == diffutills.DaikonTestIssue10.this.deleteTest_to[]
diffutills.DaikonTestIssue10.this.insertTest_from1[] == diffutills.DaikonTestIssue10.this.insertTest_from[]
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.changeTest_to1[])
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.deleteTest_from1[])
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.insertTest_to1[])
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.changeTest_from[])-1
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.changeTest_to[])-1
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.deleteTest_from[])-1
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.insertTest_to[])-1
size(diffutills.DaikonTestIssue10.this.deleteTest_to1[]) == size(diffutills.DaikonTestIssue10.this.insertTest_from1[])
size(diffutills.DaikonTestIssue10.this.deleteTest_to1[]) == size(diffutills.DaikonTestIssue10.this.insertTest_from[])
size(diffutills.DaikonTestIssue10.this.changeTest_from[]) == size(diffutills.DaikonTestIssue10.this.changeTest_to[])
size(diffutills.DaikonTestIssue10.this.changeTest_from[]) == size(diffutills.DaikonTestIssue10.this.deleteTest_from[])
size(diffutills.DaikonTestIssue10.this.changeTest_from[]) == size(diffutills.DaikonTestIssue10.this.insertTest_to[])
diffutills.DaikonTestIssue10.this has only one value
diffutills.DaikonTestIssue10.this.changeTest_from1 has only one value
diffutills.DaikonTestIssue10.this.changeTest_from1[] contains no nulls and has only one value, of length 3
diffutills.DaikonTestIssue10.this.changeTest_from1[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
diffutills.DaikonTestIssue10.this.changeTest_from1[].getClass().getName() elements == java.lang.String.class
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == java.util.Arrays$ArrayList.class
diffutills.DaikonTestIssue10.this.changeTest_to1 has only one value
diffutills.DaikonTestIssue10.this.changeTest_to1[] contains no nulls and has only one value, of length 3
diffutills.DaikonTestIssue10.this.deleteTest_from1 has only one value
diffutills.DaikonTestIssue10.this.deleteTest_from1[] contains no nulls and has only one value, of length 3
diffutills.DaikonTestIssue10.this.deleteTest_to1 has only one value
diffutills.DaikonTestIssue10.this.deleteTest_to1[] contains no nulls and has only one value, of length 1
diffutills.DaikonTestIssue10.this.deleteTest_to1[] elements has only one value
diffutills.DaikonTestIssue10.this.deleteTest_to1[].getClass().getName() == [java.lang.String]
diffutills.DaikonTestIssue10.this.deleteTest_to1[].getClass().getName() elements == java.lang.String.class
diffutills.DaikonTestIssue10.this.insertTest_from1 has only one value
diffutills.DaikonTestIssue10.this.insertTest_from1[] contains no nulls and has only one value, of length 1
diffutills.DaikonTestIssue10.this.insertTest_from1[] elements has only one value
diffutills.DaikonTestIssue10.this.insertTest_to1 has only one value
diffutills.DaikonTestIssue10.this.insertTest_to1[] contains no nulls and has only one value, of length 3
diffutills.DaikonTestIssue10.FS has only one value
diffutills.DaikonTestIssue10.FS.toString == "/"
diffutills.DaikonTestIssue10.resourceFolder has only one value
diffutills.DaikonTestIssue10.resourceFolder.toString == "/Users/HongLongPham/Workspace/testdata/java-diff-utils/rev25/target/test-classes"
diffutills.DaikonTestIssue10.originalFilename has only one value
diffutills.DaikonTestIssue10.originalFilename.toString == "/Users/HongLongPham/Workspace/testdata/java-diff-utils/rev25/target/test-classes/original.txt"
diffutills.DaikonTestIssue10.revisedFilename has only one value
diffutills.DaikonTestIssue10.revisedFilename.toString == "/Users/HongLongPham/Workspace/testdata/java-diff-utils/rev25/target/test-classes/revised.txt"
diffutills.DaikonTestIssue10.originalFilenameOneDelta has only one value
diffutills.DaikonTestIssue10.originalFilenameOneDelta.toString == "/Users/HongLongPham/Workspace/testdata/java-diff-utils/rev25/target/test-classes/one_delta_test_original.txt"
diffutills.DaikonTestIssue10.revisedFilenameOneDelta has only one value
diffutills.DaikonTestIssue10.revisedFilenameOneDelta.toString == "/Users/HongLongPham/Workspace/testdata/java-diff-utils/rev25/target/test-classes/one_delta_test_revised.txt"
diffutills.DaikonTestIssue10.this.changeTest_from has only one value
diffutills.DaikonTestIssue10.this.changeTest_from[] contains no nulls and has only one value, of length 4
diffutills.DaikonTestIssue10.this.changeTest_from[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
diffutills.DaikonTestIssue10.this.changeTest_from[].getClass().getName() elements == java.lang.String.class
diffutills.DaikonTestIssue10.this.changeTest_to has only one value
diffutills.DaikonTestIssue10.this.changeTest_to[] contains no nulls and has only one value, of length 4
diffutills.DaikonTestIssue10.this.deleteTest_from has only one value
diffutills.DaikonTestIssue10.this.deleteTest_from[] contains no nulls and has only one value, of length 4
diffutills.DaikonTestIssue10.this.deleteTest_to has only one value
diffutills.DaikonTestIssue10.this.insertTest_from has only one value
diffutills.DaikonTestIssue10.this.insertTest_to has only one value
diffutills.DaikonTestIssue10.this.insertTest_to[] contains no nulls and has only one value, of length 4
size(diffutills.DaikonTestIssue10.this.deleteTest_to1[]) == 1
size(diffutills.DaikonTestIssue10.this.changeTest_from[]) == 4
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.changeTest_to1.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.deleteTest_from1.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.deleteTest_to1.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.insertTest_from1.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.insertTest_to1.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.changeTest_from.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.changeTest_to.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.deleteTest_from.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.deleteTest_to.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.insertTest_from.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.insertTest_to.getClass().getName()
===========================================================================
diffutills.DaikonTestIssue10$2.DaikonTestIssue10$2(diffutills.DaikonTestIssue10):::EXIT
diffutills.DaikonTestIssue10.this == orig(diffutills.DaikonTestIssue10.this)
diffutills.DaikonTestIssue10.this.changeTest_from1 == orig(diffutills.DaikonTestIssue10.this.changeTest_from1)
diffutills.DaikonTestIssue10.this.changeTest_from1[] == orig(diffutills.DaikonTestIssue10.this.changeTest_from1[])
diffutills.DaikonTestIssue10.this.changeTest_to1 == orig(diffutills.DaikonTestIssue10.this.changeTest_to1)
diffutills.DaikonTestIssue10.this.changeTest_to1[] == orig(diffutills.DaikonTestIssue10.this.changeTest_to1[])
diffutills.DaikonTestIssue10.this.deleteTest_from1 == orig(diffutills.DaikonTestIssue10.this.deleteTest_from1)
diffutills.DaikonTestIssue10.this.deleteTest_from1[] == orig(diffutills.DaikonTestIssue10.this.deleteTest_from1[])
diffutills.DaikonTestIssue10.this.deleteTest_to1 == orig(diffutills.DaikonTestIssue10.this.deleteTest_to1)
diffutills.DaikonTestIssue10.this.deleteTest_to1[] == orig(diffutills.DaikonTestIssue10.this.deleteTest_to1[])
diffutills.DaikonTestIssue10.this.deleteTest_to1[] == orig(diffutills.DaikonTestIssue10.this.deleteTest_to[])
diffutills.DaikonTestIssue10.this.insertTest_from1 == orig(diffutills.DaikonTestIssue10.this.insertTest_from1)
diffutills.DaikonTestIssue10.this.insertTest_from1[] == orig(diffutills.DaikonTestIssue10.this.insertTest_from1[])
diffutills.DaikonTestIssue10.this.insertTest_from1[] == orig(diffutills.DaikonTestIssue10.this.insertTest_from[])
diffutills.DaikonTestIssue10.this.insertTest_to1 == orig(diffutills.DaikonTestIssue10.this.insertTest_to1)
diffutills.DaikonTestIssue10.this.insertTest_to1[] == orig(diffutills.DaikonTestIssue10.this.insertTest_to1[])
diffutills.DaikonTestIssue10.FS == orig(diffutills.DaikonTestIssue10.FS)
diffutills.DaikonTestIssue10.resourceFolder == orig(diffutills.DaikonTestIssue10.resourceFolder)
diffutills.DaikonTestIssue10.originalFilename == orig(diffutills.DaikonTestIssue10.originalFilename)
diffutills.DaikonTestIssue10.revisedFilename == orig(diffutills.DaikonTestIssue10.revisedFilename)
diffutills.DaikonTestIssue10.originalFilenameOneDelta == orig(diffutills.DaikonTestIssue10.originalFilenameOneDelta)
diffutills.DaikonTestIssue10.revisedFilenameOneDelta == orig(diffutills.DaikonTestIssue10.revisedFilenameOneDelta)
diffutills.DaikonTestIssue10.this.changeTest_from == orig(diffutills.DaikonTestIssue10.this.changeTest_from)
diffutills.DaikonTestIssue10.this.changeTest_from[] == orig(diffutills.DaikonTestIssue10.this.changeTest_from[])
diffutills.DaikonTestIssue10.this.changeTest_to == orig(diffutills.DaikonTestIssue10.this.changeTest_to)
diffutills.DaikonTestIssue10.this.changeTest_to[] == orig(diffutills.DaikonTestIssue10.this.changeTest_to[])
diffutills.DaikonTestIssue10.this.deleteTest_from == orig(diffutills.DaikonTestIssue10.this.deleteTest_from)
diffutills.DaikonTestIssue10.this.deleteTest_from[] == orig(diffutills.DaikonTestIssue10.this.deleteTest_from[])
diffutills.DaikonTestIssue10.this.deleteTest_to == orig(diffutills.DaikonTestIssue10.this.deleteTest_to)
diffutills.DaikonTestIssue10.this.insertTest_from == orig(diffutills.DaikonTestIssue10.this.insertTest_from)
diffutills.DaikonTestIssue10.this.insertTest_to == orig(diffutills.DaikonTestIssue10.this.insertTest_to)
diffutills.DaikonTestIssue10.this.insertTest_to[] == orig(diffutills.DaikonTestIssue10.this.insertTest_to[])
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == orig(size(diffutills.DaikonTestIssue10.this.changeTest_to1[]))
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == orig(size(diffutills.DaikonTestIssue10.this.deleteTest_from1[]))
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == orig(size(diffutills.DaikonTestIssue10.this.insertTest_to1[]))
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == orig(size(diffutills.DaikonTestIssue10.this.changeTest_from[]))-1
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == orig(size(diffutills.DaikonTestIssue10.this.changeTest_to[]))-1
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == orig(size(diffutills.DaikonTestIssue10.this.deleteTest_from[]))-1
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == orig(size(diffutills.DaikonTestIssue10.this.insertTest_to[]))-1
size(diffutills.DaikonTestIssue10.this.deleteTest_to1[]) == orig(size(diffutills.DaikonTestIssue10.this.insertTest_from1[]))
size(diffutills.DaikonTestIssue10.this.deleteTest_to1[]) == orig(size(diffutills.DaikonTestIssue10.this.insertTest_from[]))
size(diffutills.DaikonTestIssue10.this.changeTest_from[]) == orig(size(diffutills.DaikonTestIssue10.this.changeTest_to[]))
size(diffutills.DaikonTestIssue10.this.changeTest_from[]) == orig(size(diffutills.DaikonTestIssue10.this.deleteTest_from[]))
size(diffutills.DaikonTestIssue10.this.changeTest_from[]) == orig(size(diffutills.DaikonTestIssue10.this.insertTest_to[]))
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == orig(diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName())
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == orig(diffutills.DaikonTestIssue10.this.changeTest_to1.getClass().getName())
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == orig(diffutills.DaikonTestIssue10.this.deleteTest_from1.getClass().getName())
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == orig(diffutills.DaikonTestIssue10.this.deleteTest_to1.getClass().getName())
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == orig(diffutills.DaikonTestIssue10.this.insertTest_from1.getClass().getName())
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == orig(diffutills.DaikonTestIssue10.this.insertTest_to1.getClass().getName())
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == orig(diffutills.DaikonTestIssue10.this.changeTest_from.getClass().getName())
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == orig(diffutills.DaikonTestIssue10.this.changeTest_to.getClass().getName())
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == orig(diffutills.DaikonTestIssue10.this.deleteTest_from.getClass().getName())
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == orig(diffutills.DaikonTestIssue10.this.deleteTest_to.getClass().getName())
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == orig(diffutills.DaikonTestIssue10.this.insertTest_from.getClass().getName())
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == orig(diffutills.DaikonTestIssue10.this.insertTest_to.getClass().getName())
diffutills.DaikonTestIssue10.FS.toString == orig(diffutills.DaikonTestIssue10.FS.toString)
diffutills.DaikonTestIssue10.resourceFolder.toString == orig(diffutills.DaikonTestIssue10.resourceFolder.toString)
diffutills.DaikonTestIssue10.originalFilename.toString == orig(diffutills.DaikonTestIssue10.originalFilename.toString)
diffutills.DaikonTestIssue10.revisedFilename.toString == orig(diffutills.DaikonTestIssue10.revisedFilename.toString)
diffutills.DaikonTestIssue10.originalFilenameOneDelta.toString == orig(diffutills.DaikonTestIssue10.originalFilenameOneDelta.toString)
diffutills.DaikonTestIssue10.revisedFilenameOneDelta.toString == orig(diffutills.DaikonTestIssue10.revisedFilenameOneDelta.toString)
===========================================================================
diffutills.DaikonTestIssue10$3:::OBJECT
diffutills.DaikonTestIssue10.this.deleteTest_to1[] == diffutills.DaikonTestIssue10.this.deleteTest_to[]
diffutills.DaikonTestIssue10.this.insertTest_from1[] == diffutills.DaikonTestIssue10.this.insertTest_from[]
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.changeTest_to1[])
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.deleteTest_from1[])
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.insertTest_to1[])
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.changeTest_from[])-1
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.changeTest_to[])-1
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.deleteTest_from[])-1
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.insertTest_to[])-1
size(diffutills.DaikonTestIssue10.this.deleteTest_to1[]) == size(diffutills.DaikonTestIssue10.this.insertTest_from1[])
size(diffutills.DaikonTestIssue10.this.deleteTest_to1[]) == size(diffutills.DaikonTestIssue10.this.insertTest_from[])
size(diffutills.DaikonTestIssue10.this.changeTest_from[]) == size(diffutills.DaikonTestIssue10.this.changeTest_to[])
size(diffutills.DaikonTestIssue10.this.changeTest_from[]) == size(diffutills.DaikonTestIssue10.this.deleteTest_from[])
size(diffutills.DaikonTestIssue10.this.changeTest_from[]) == size(diffutills.DaikonTestIssue10.this.insertTest_to[])
this has only one value
diffutills.DaikonTestIssue10.this has only one value
diffutills.DaikonTestIssue10.this.changeTest_from1 has only one value
diffutills.DaikonTestIssue10.this.changeTest_from1[] contains no nulls and has only one value, of length 3
diffutills.DaikonTestIssue10.this.changeTest_from1[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
diffutills.DaikonTestIssue10.this.changeTest_from1[].getClass().getName() elements == java.lang.String.class
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == java.util.Arrays$ArrayList.class
diffutills.DaikonTestIssue10.this.changeTest_to1 has only one value
diffutills.DaikonTestIssue10.this.changeTest_to1[] contains no nulls and has only one value, of length 3
diffutills.DaikonTestIssue10.this.deleteTest_from1 has only one value
diffutills.DaikonTestIssue10.this.deleteTest_from1[] contains no nulls and has only one value, of length 3
diffutills.DaikonTestIssue10.this.deleteTest_to1 has only one value
diffutills.DaikonTestIssue10.this.deleteTest_to1[] contains no nulls and has only one value, of length 1
diffutills.DaikonTestIssue10.this.deleteTest_to1[] elements has only one value
diffutills.DaikonTestIssue10.this.deleteTest_to1[].getClass().getName() == [java.lang.String]
diffutills.DaikonTestIssue10.this.deleteTest_to1[].getClass().getName() elements == java.lang.String.class
diffutills.DaikonTestIssue10.this.insertTest_from1 has only one value
diffutills.DaikonTestIssue10.this.insertTest_from1[] contains no nulls and has only one value, of length 1
diffutills.DaikonTestIssue10.this.insertTest_from1[] elements has only one value
diffutills.DaikonTestIssue10.this.insertTest_to1 has only one value
diffutills.DaikonTestIssue10.this.insertTest_to1[] contains no nulls and has only one value, of length 3
diffutills.DaikonTestIssue10.FS has only one value
diffutills.DaikonTestIssue10.FS.toString == "/"
diffutills.DaikonTestIssue10.resourceFolder has only one value
diffutills.DaikonTestIssue10.resourceFolder.toString == "/Users/HongLongPham/Workspace/testdata/java-diff-utils/rev25/target/test-classes"
diffutills.DaikonTestIssue10.originalFilename has only one value
diffutills.DaikonTestIssue10.originalFilename.toString == "/Users/HongLongPham/Workspace/testdata/java-diff-utils/rev25/target/test-classes/original.txt"
diffutills.DaikonTestIssue10.revisedFilename has only one value
diffutills.DaikonTestIssue10.revisedFilename.toString == "/Users/HongLongPham/Workspace/testdata/java-diff-utils/rev25/target/test-classes/revised.txt"
diffutills.DaikonTestIssue10.originalFilenameOneDelta has only one value
diffutills.DaikonTestIssue10.originalFilenameOneDelta.toString == "/Users/HongLongPham/Workspace/testdata/java-diff-utils/rev25/target/test-classes/one_delta_test_original.txt"
diffutills.DaikonTestIssue10.revisedFilenameOneDelta has only one value
diffutills.DaikonTestIssue10.revisedFilenameOneDelta.toString == "/Users/HongLongPham/Workspace/testdata/java-diff-utils/rev25/target/test-classes/one_delta_test_revised.txt"
diffutills.DaikonTestIssue10.this.changeTest_from has only one value
diffutills.DaikonTestIssue10.this.changeTest_from[] contains no nulls and has only one value, of length 4
diffutills.DaikonTestIssue10.this.changeTest_from[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
diffutills.DaikonTestIssue10.this.changeTest_from[].getClass().getName() elements == java.lang.String.class
diffutills.DaikonTestIssue10.this.changeTest_to has only one value
diffutills.DaikonTestIssue10.this.changeTest_to[] contains no nulls and has only one value, of length 4
diffutills.DaikonTestIssue10.this.deleteTest_from has only one value
diffutills.DaikonTestIssue10.this.deleteTest_from[] contains no nulls and has only one value, of length 4
diffutills.DaikonTestIssue10.this.deleteTest_to has only one value
diffutills.DaikonTestIssue10.this.insertTest_from has only one value
diffutills.DaikonTestIssue10.this.insertTest_to has only one value
diffutills.DaikonTestIssue10.this.insertTest_to[] contains no nulls and has only one value, of length 4
size(diffutills.DaikonTestIssue10.this.deleteTest_to1[]) == 1
size(diffutills.DaikonTestIssue10.this.changeTest_from[]) == 4
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.changeTest_to1.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.deleteTest_from1.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.deleteTest_to1.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.insertTest_from1.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.insertTest_to1.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.changeTest_from.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.changeTest_to.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.deleteTest_from.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.deleteTest_to.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.insertTest_from.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.insertTest_to.getClass().getName()
===========================================================================
diffutills.DaikonTestIssue10$3.DaikonTestIssue10$3(diffutills.DaikonTestIssue10):::ENTER
diffutills.DaikonTestIssue10.this.deleteTest_to1[] == diffutills.DaikonTestIssue10.this.deleteTest_to[]
diffutills.DaikonTestIssue10.this.insertTest_from1[] == diffutills.DaikonTestIssue10.this.insertTest_from[]
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.changeTest_to1[])
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.deleteTest_from1[])
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.insertTest_to1[])
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.changeTest_from[])-1
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.changeTest_to[])-1
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.deleteTest_from[])-1
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.insertTest_to[])-1
size(diffutills.DaikonTestIssue10.this.deleteTest_to1[]) == size(diffutills.DaikonTestIssue10.this.insertTest_from1[])
size(diffutills.DaikonTestIssue10.this.deleteTest_to1[]) == size(diffutills.DaikonTestIssue10.this.insertTest_from[])
size(diffutills.DaikonTestIssue10.this.changeTest_from[]) == size(diffutills.DaikonTestIssue10.this.changeTest_to[])
size(diffutills.DaikonTestIssue10.this.changeTest_from[]) == size(diffutills.DaikonTestIssue10.this.deleteTest_from[])
size(diffutills.DaikonTestIssue10.this.changeTest_from[]) == size(diffutills.DaikonTestIssue10.this.insertTest_to[])
diffutills.DaikonTestIssue10.this has only one value
diffutills.DaikonTestIssue10.this.changeTest_from1 has only one value
diffutills.DaikonTestIssue10.this.changeTest_from1[] contains no nulls and has only one value, of length 3
diffutills.DaikonTestIssue10.this.changeTest_from1[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
diffutills.DaikonTestIssue10.this.changeTest_from1[].getClass().getName() elements == java.lang.String.class
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == java.util.Arrays$ArrayList.class
diffutills.DaikonTestIssue10.this.changeTest_to1 has only one value
diffutills.DaikonTestIssue10.this.changeTest_to1[] contains no nulls and has only one value, of length 3
diffutills.DaikonTestIssue10.this.deleteTest_from1 has only one value
diffutills.DaikonTestIssue10.this.deleteTest_from1[] contains no nulls and has only one value, of length 3
diffutills.DaikonTestIssue10.this.deleteTest_to1 has only one value
diffutills.DaikonTestIssue10.this.deleteTest_to1[] contains no nulls and has only one value, of length 1
diffutills.DaikonTestIssue10.this.deleteTest_to1[] elements has only one value
diffutills.DaikonTestIssue10.this.deleteTest_to1[].getClass().getName() == [java.lang.String]
diffutills.DaikonTestIssue10.this.deleteTest_to1[].getClass().getName() elements == java.lang.String.class
diffutills.DaikonTestIssue10.this.insertTest_from1 has only one value
diffutills.DaikonTestIssue10.this.insertTest_from1[] contains no nulls and has only one value, of length 1
diffutills.DaikonTestIssue10.this.insertTest_from1[] elements has only one value
diffutills.DaikonTestIssue10.this.insertTest_to1 has only one value
diffutills.DaikonTestIssue10.this.insertTest_to1[] contains no nulls and has only one value, of length 3
diffutills.DaikonTestIssue10.FS has only one value
diffutills.DaikonTestIssue10.FS.toString == "/"
diffutills.DaikonTestIssue10.resourceFolder has only one value
diffutills.DaikonTestIssue10.resourceFolder.toString == "/Users/HongLongPham/Workspace/testdata/java-diff-utils/rev25/target/test-classes"
diffutills.DaikonTestIssue10.originalFilename has only one value
diffutills.DaikonTestIssue10.originalFilename.toString == "/Users/HongLongPham/Workspace/testdata/java-diff-utils/rev25/target/test-classes/original.txt"
diffutills.DaikonTestIssue10.revisedFilename has only one value
diffutills.DaikonTestIssue10.revisedFilename.toString == "/Users/HongLongPham/Workspace/testdata/java-diff-utils/rev25/target/test-classes/revised.txt"
diffutills.DaikonTestIssue10.originalFilenameOneDelta has only one value
diffutills.DaikonTestIssue10.originalFilenameOneDelta.toString == "/Users/HongLongPham/Workspace/testdata/java-diff-utils/rev25/target/test-classes/one_delta_test_original.txt"
diffutills.DaikonTestIssue10.revisedFilenameOneDelta has only one value
diffutills.DaikonTestIssue10.revisedFilenameOneDelta.toString == "/Users/HongLongPham/Workspace/testdata/java-diff-utils/rev25/target/test-classes/one_delta_test_revised.txt"
diffutills.DaikonTestIssue10.this.changeTest_from has only one value
diffutills.DaikonTestIssue10.this.changeTest_from[] contains no nulls and has only one value, of length 4
diffutills.DaikonTestIssue10.this.changeTest_from[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
diffutills.DaikonTestIssue10.this.changeTest_from[].getClass().getName() elements == java.lang.String.class
diffutills.DaikonTestIssue10.this.changeTest_to has only one value
diffutills.DaikonTestIssue10.this.changeTest_to[] contains no nulls and has only one value, of length 4
diffutills.DaikonTestIssue10.this.deleteTest_from has only one value
diffutills.DaikonTestIssue10.this.deleteTest_from[] contains no nulls and has only one value, of length 4
diffutills.DaikonTestIssue10.this.deleteTest_to has only one value
diffutills.DaikonTestIssue10.this.insertTest_from has only one value
diffutills.DaikonTestIssue10.this.insertTest_to has only one value
diffutills.DaikonTestIssue10.this.insertTest_to[] contains no nulls and has only one value, of length 4
size(diffutills.DaikonTestIssue10.this.deleteTest_to1[]) == 1
size(diffutills.DaikonTestIssue10.this.changeTest_from[]) == 4
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.changeTest_to1.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.deleteTest_from1.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.deleteTest_to1.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.insertTest_from1.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.insertTest_to1.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.changeTest_from.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.changeTest_to.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.deleteTest_from.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.deleteTest_to.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.insertTest_from.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.insertTest_to.getClass().getName()
===========================================================================
diffutills.DaikonTestIssue10$3.DaikonTestIssue10$3(diffutills.DaikonTestIssue10):::EXIT
diffutills.DaikonTestIssue10.this == orig(diffutills.DaikonTestIssue10.this)
diffutills.DaikonTestIssue10.this.changeTest_from1 == orig(diffutills.DaikonTestIssue10.this.changeTest_from1)
diffutills.DaikonTestIssue10.this.changeTest_from1[] == orig(diffutills.DaikonTestIssue10.this.changeTest_from1[])
diffutills.DaikonTestIssue10.this.changeTest_to1 == orig(diffutills.DaikonTestIssue10.this.changeTest_to1)
diffutills.DaikonTestIssue10.this.changeTest_to1[] == orig(diffutills.DaikonTestIssue10.this.changeTest_to1[])
diffutills.DaikonTestIssue10.this.deleteTest_from1 == orig(diffutills.DaikonTestIssue10.this.deleteTest_from1)
diffutills.DaikonTestIssue10.this.deleteTest_from1[] == orig(diffutills.DaikonTestIssue10.this.deleteTest_from1[])
diffutills.DaikonTestIssue10.this.deleteTest_to1 == orig(diffutills.DaikonTestIssue10.this.deleteTest_to1)
diffutills.DaikonTestIssue10.this.deleteTest_to1[] == orig(diffutills.DaikonTestIssue10.this.deleteTest_to1[])
diffutills.DaikonTestIssue10.this.deleteTest_to1[] == orig(diffutills.DaikonTestIssue10.this.deleteTest_to[])
diffutills.DaikonTestIssue10.this.insertTest_from1 == orig(diffutills.DaikonTestIssue10.this.insertTest_from1)
diffutills.DaikonTestIssue10.this.insertTest_from1[] == orig(diffutills.DaikonTestIssue10.this.insertTest_from1[])
diffutills.DaikonTestIssue10.this.insertTest_from1[] == orig(diffutills.DaikonTestIssue10.this.insertTest_from[])
diffutills.DaikonTestIssue10.this.insertTest_to1 == orig(diffutills.DaikonTestIssue10.this.insertTest_to1)
diffutills.DaikonTestIssue10.this.insertTest_to1[] == orig(diffutills.DaikonTestIssue10.this.insertTest_to1[])
diffutills.DaikonTestIssue10.FS == orig(diffutills.DaikonTestIssue10.FS)
diffutills.DaikonTestIssue10.resourceFolder == orig(diffutills.DaikonTestIssue10.resourceFolder)
diffutills.DaikonTestIssue10.originalFilename == orig(diffutills.DaikonTestIssue10.originalFilename)
diffutills.DaikonTestIssue10.revisedFilename == orig(diffutills.DaikonTestIssue10.revisedFilename)
diffutills.DaikonTestIssue10.originalFilenameOneDelta == orig(diffutills.DaikonTestIssue10.originalFilenameOneDelta)
diffutills.DaikonTestIssue10.revisedFilenameOneDelta == orig(diffutills.DaikonTestIssue10.revisedFilenameOneDelta)
diffutills.DaikonTestIssue10.this.changeTest_from == orig(diffutills.DaikonTestIssue10.this.changeTest_from)
diffutills.DaikonTestIssue10.this.changeTest_from[] == orig(diffutills.DaikonTestIssue10.this.changeTest_from[])
diffutills.DaikonTestIssue10.this.changeTest_to == orig(diffutills.DaikonTestIssue10.this.changeTest_to)
diffutills.DaikonTestIssue10.this.changeTest_to[] == orig(diffutills.DaikonTestIssue10.this.changeTest_to[])
diffutills.DaikonTestIssue10.this.deleteTest_from == orig(diffutills.DaikonTestIssue10.this.deleteTest_from)
diffutills.DaikonTestIssue10.this.deleteTest_from[] == orig(diffutills.DaikonTestIssue10.this.deleteTest_from[])
diffutills.DaikonTestIssue10.this.deleteTest_to == orig(diffutills.DaikonTestIssue10.this.deleteTest_to)
diffutills.DaikonTestIssue10.this.insertTest_from == orig(diffutills.DaikonTestIssue10.this.insertTest_from)
diffutills.DaikonTestIssue10.this.insertTest_to == orig(diffutills.DaikonTestIssue10.this.insertTest_to)
diffutills.DaikonTestIssue10.this.insertTest_to[] == orig(diffutills.DaikonTestIssue10.this.insertTest_to[])
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == orig(size(diffutills.DaikonTestIssue10.this.changeTest_to1[]))
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == orig(size(diffutills.DaikonTestIssue10.this.deleteTest_from1[]))
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == orig(size(diffutills.DaikonTestIssue10.this.insertTest_to1[]))
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == orig(size(diffutills.DaikonTestIssue10.this.changeTest_from[]))-1
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == orig(size(diffutills.DaikonTestIssue10.this.changeTest_to[]))-1
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == orig(size(diffutills.DaikonTestIssue10.this.deleteTest_from[]))-1
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == orig(size(diffutills.DaikonTestIssue10.this.insertTest_to[]))-1
size(diffutills.DaikonTestIssue10.this.deleteTest_to1[]) == orig(size(diffutills.DaikonTestIssue10.this.insertTest_from1[]))
size(diffutills.DaikonTestIssue10.this.deleteTest_to1[]) == orig(size(diffutills.DaikonTestIssue10.this.insertTest_from[]))
size(diffutills.DaikonTestIssue10.this.changeTest_from[]) == orig(size(diffutills.DaikonTestIssue10.this.changeTest_to[]))
size(diffutills.DaikonTestIssue10.this.changeTest_from[]) == orig(size(diffutills.DaikonTestIssue10.this.deleteTest_from[]))
size(diffutills.DaikonTestIssue10.this.changeTest_from[]) == orig(size(diffutills.DaikonTestIssue10.this.insertTest_to[]))
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == orig(diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName())
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == orig(diffutills.DaikonTestIssue10.this.changeTest_to1.getClass().getName())
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == orig(diffutills.DaikonTestIssue10.this.deleteTest_from1.getClass().getName())
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == orig(diffutills.DaikonTestIssue10.this.deleteTest_to1.getClass().getName())
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == orig(diffutills.DaikonTestIssue10.this.insertTest_from1.getClass().getName())
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == orig(diffutills.DaikonTestIssue10.this.insertTest_to1.getClass().getName())
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == orig(diffutills.DaikonTestIssue10.this.changeTest_from.getClass().getName())
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == orig(diffutills.DaikonTestIssue10.this.changeTest_to.getClass().getName())
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == orig(diffutills.DaikonTestIssue10.this.deleteTest_from.getClass().getName())
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == orig(diffutills.DaikonTestIssue10.this.deleteTest_to.getClass().getName())
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == orig(diffutills.DaikonTestIssue10.this.insertTest_from.getClass().getName())
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == orig(diffutills.DaikonTestIssue10.this.insertTest_to.getClass().getName())
diffutills.DaikonTestIssue10.FS.toString == orig(diffutills.DaikonTestIssue10.FS.toString)
diffutills.DaikonTestIssue10.resourceFolder.toString == orig(diffutills.DaikonTestIssue10.resourceFolder.toString)
diffutills.DaikonTestIssue10.originalFilename.toString == orig(diffutills.DaikonTestIssue10.originalFilename.toString)
diffutills.DaikonTestIssue10.revisedFilename.toString == orig(diffutills.DaikonTestIssue10.revisedFilename.toString)
diffutills.DaikonTestIssue10.originalFilenameOneDelta.toString == orig(diffutills.DaikonTestIssue10.originalFilenameOneDelta.toString)
diffutills.DaikonTestIssue10.revisedFilenameOneDelta.toString == orig(diffutills.DaikonTestIssue10.revisedFilenameOneDelta.toString)
===========================================================================
diffutills.DaikonTestIssue10$4:::OBJECT
diffutills.DaikonTestIssue10.this.deleteTest_to1[] == diffutills.DaikonTestIssue10.this.deleteTest_to[]
diffutills.DaikonTestIssue10.this.insertTest_from1[] == diffutills.DaikonTestIssue10.this.insertTest_from[]
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.changeTest_to1[])
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.deleteTest_from1[])
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.insertTest_to1[])
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.changeTest_from[])-1
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.changeTest_to[])-1
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.deleteTest_from[])-1
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.insertTest_to[])-1
size(diffutills.DaikonTestIssue10.this.deleteTest_to1[]) == size(diffutills.DaikonTestIssue10.this.insertTest_from1[])
size(diffutills.DaikonTestIssue10.this.deleteTest_to1[]) == size(diffutills.DaikonTestIssue10.this.insertTest_from[])
size(diffutills.DaikonTestIssue10.this.changeTest_from[]) == size(diffutills.DaikonTestIssue10.this.changeTest_to[])
size(diffutills.DaikonTestIssue10.this.changeTest_from[]) == size(diffutills.DaikonTestIssue10.this.deleteTest_from[])
size(diffutills.DaikonTestIssue10.this.changeTest_from[]) == size(diffutills.DaikonTestIssue10.this.insertTest_to[])
this has only one value
diffutills.DaikonTestIssue10.this has only one value
diffutills.DaikonTestIssue10.this.changeTest_from1 has only one value
diffutills.DaikonTestIssue10.this.changeTest_from1[] contains no nulls and has only one value, of length 3
diffutills.DaikonTestIssue10.this.changeTest_from1[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
diffutills.DaikonTestIssue10.this.changeTest_from1[].getClass().getName() elements == java.lang.String.class
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == java.util.Arrays$ArrayList.class
diffutills.DaikonTestIssue10.this.changeTest_to1 has only one value
diffutills.DaikonTestIssue10.this.changeTest_to1[] contains no nulls and has only one value, of length 3
diffutills.DaikonTestIssue10.this.deleteTest_from1 has only one value
diffutills.DaikonTestIssue10.this.deleteTest_from1[] contains no nulls and has only one value, of length 3
diffutills.DaikonTestIssue10.this.deleteTest_to1 has only one value
diffutills.DaikonTestIssue10.this.deleteTest_to1[] contains no nulls and has only one value, of length 1
diffutills.DaikonTestIssue10.this.deleteTest_to1[] elements has only one value
diffutills.DaikonTestIssue10.this.deleteTest_to1[].getClass().getName() == [java.lang.String]
diffutills.DaikonTestIssue10.this.deleteTest_to1[].getClass().getName() elements == java.lang.String.class
diffutills.DaikonTestIssue10.this.insertTest_from1 has only one value
diffutills.DaikonTestIssue10.this.insertTest_from1[] contains no nulls and has only one value, of length 1
diffutills.DaikonTestIssue10.this.insertTest_from1[] elements has only one value
diffutills.DaikonTestIssue10.this.insertTest_to1 has only one value
diffutills.DaikonTestIssue10.this.insertTest_to1[] contains no nulls and has only one value, of length 3
diffutills.DaikonTestIssue10.FS has only one value
diffutills.DaikonTestIssue10.FS.toString == "/"
diffutills.DaikonTestIssue10.resourceFolder has only one value
diffutills.DaikonTestIssue10.resourceFolder.toString == "/Users/HongLongPham/Workspace/testdata/java-diff-utils/rev25/target/test-classes"
diffutills.DaikonTestIssue10.originalFilename has only one value
diffutills.DaikonTestIssue10.originalFilename.toString == "/Users/HongLongPham/Workspace/testdata/java-diff-utils/rev25/target/test-classes/original.txt"
diffutills.DaikonTestIssue10.revisedFilename has only one value
diffutills.DaikonTestIssue10.revisedFilename.toString == "/Users/HongLongPham/Workspace/testdata/java-diff-utils/rev25/target/test-classes/revised.txt"
diffutills.DaikonTestIssue10.originalFilenameOneDelta has only one value
diffutills.DaikonTestIssue10.originalFilenameOneDelta.toString == "/Users/HongLongPham/Workspace/testdata/java-diff-utils/rev25/target/test-classes/one_delta_test_original.txt"
diffutills.DaikonTestIssue10.revisedFilenameOneDelta has only one value
diffutills.DaikonTestIssue10.revisedFilenameOneDelta.toString == "/Users/HongLongPham/Workspace/testdata/java-diff-utils/rev25/target/test-classes/one_delta_test_revised.txt"
diffutills.DaikonTestIssue10.this.changeTest_from has only one value
diffutills.DaikonTestIssue10.this.changeTest_from[] contains no nulls and has only one value, of length 4
diffutills.DaikonTestIssue10.this.changeTest_from[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
diffutills.DaikonTestIssue10.this.changeTest_from[].getClass().getName() elements == java.lang.String.class
diffutills.DaikonTestIssue10.this.changeTest_to has only one value
diffutills.DaikonTestIssue10.this.changeTest_to[] contains no nulls and has only one value, of length 4
diffutills.DaikonTestIssue10.this.deleteTest_from has only one value
diffutills.DaikonTestIssue10.this.deleteTest_from[] contains no nulls and has only one value, of length 4
diffutills.DaikonTestIssue10.this.deleteTest_to has only one value
diffutills.DaikonTestIssue10.this.insertTest_from has only one value
diffutills.DaikonTestIssue10.this.insertTest_to has only one value
diffutills.DaikonTestIssue10.this.insertTest_to[] contains no nulls and has only one value, of length 4
size(diffutills.DaikonTestIssue10.this.deleteTest_to1[]) == 1
size(diffutills.DaikonTestIssue10.this.changeTest_from[]) == 4
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.changeTest_to1.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.deleteTest_from1.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.deleteTest_to1.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.insertTest_from1.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.insertTest_to1.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.changeTest_from.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.changeTest_to.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.deleteTest_from.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.deleteTest_to.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.insertTest_from.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.insertTest_to.getClass().getName()
===========================================================================
diffutills.DaikonTestIssue10$4.DaikonTestIssue10$4(diffutills.DaikonTestIssue10):::ENTER
diffutills.DaikonTestIssue10.this.deleteTest_to1[] == diffutills.DaikonTestIssue10.this.deleteTest_to[]
diffutills.DaikonTestIssue10.this.insertTest_from1[] == diffutills.DaikonTestIssue10.this.insertTest_from[]
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.changeTest_to1[])
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.deleteTest_from1[])
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.insertTest_to1[])
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.changeTest_from[])-1
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.changeTest_to[])-1
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.deleteTest_from[])-1
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == size(diffutills.DaikonTestIssue10.this.insertTest_to[])-1
size(diffutills.DaikonTestIssue10.this.deleteTest_to1[]) == size(diffutills.DaikonTestIssue10.this.insertTest_from1[])
size(diffutills.DaikonTestIssue10.this.deleteTest_to1[]) == size(diffutills.DaikonTestIssue10.this.insertTest_from[])
size(diffutills.DaikonTestIssue10.this.changeTest_from[]) == size(diffutills.DaikonTestIssue10.this.changeTest_to[])
size(diffutills.DaikonTestIssue10.this.changeTest_from[]) == size(diffutills.DaikonTestIssue10.this.deleteTest_from[])
size(diffutills.DaikonTestIssue10.this.changeTest_from[]) == size(diffutills.DaikonTestIssue10.this.insertTest_to[])
diffutills.DaikonTestIssue10.this has only one value
diffutills.DaikonTestIssue10.this.changeTest_from1 has only one value
diffutills.DaikonTestIssue10.this.changeTest_from1[] contains no nulls and has only one value, of length 3
diffutills.DaikonTestIssue10.this.changeTest_from1[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
diffutills.DaikonTestIssue10.this.changeTest_from1[].getClass().getName() elements == java.lang.String.class
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == java.util.Arrays$ArrayList.class
diffutills.DaikonTestIssue10.this.changeTest_to1 has only one value
diffutills.DaikonTestIssue10.this.changeTest_to1[] contains no nulls and has only one value, of length 3
diffutills.DaikonTestIssue10.this.deleteTest_from1 has only one value
diffutills.DaikonTestIssue10.this.deleteTest_from1[] contains no nulls and has only one value, of length 3
diffutills.DaikonTestIssue10.this.deleteTest_to1 has only one value
diffutills.DaikonTestIssue10.this.deleteTest_to1[] contains no nulls and has only one value, of length 1
diffutills.DaikonTestIssue10.this.deleteTest_to1[] elements has only one value
diffutills.DaikonTestIssue10.this.deleteTest_to1[].getClass().getName() == [java.lang.String]
diffutills.DaikonTestIssue10.this.deleteTest_to1[].getClass().getName() elements == java.lang.String.class
diffutills.DaikonTestIssue10.this.insertTest_from1 has only one value
diffutills.DaikonTestIssue10.this.insertTest_from1[] contains no nulls and has only one value, of length 1
diffutills.DaikonTestIssue10.this.insertTest_from1[] elements has only one value
diffutills.DaikonTestIssue10.this.insertTest_to1 has only one value
diffutills.DaikonTestIssue10.this.insertTest_to1[] contains no nulls and has only one value, of length 3
diffutills.DaikonTestIssue10.FS has only one value
diffutills.DaikonTestIssue10.FS.toString == "/"
diffutills.DaikonTestIssue10.resourceFolder has only one value
diffutills.DaikonTestIssue10.resourceFolder.toString == "/Users/HongLongPham/Workspace/testdata/java-diff-utils/rev25/target/test-classes"
diffutills.DaikonTestIssue10.originalFilename has only one value
diffutills.DaikonTestIssue10.originalFilename.toString == "/Users/HongLongPham/Workspace/testdata/java-diff-utils/rev25/target/test-classes/original.txt"
diffutills.DaikonTestIssue10.revisedFilename has only one value
diffutills.DaikonTestIssue10.revisedFilename.toString == "/Users/HongLongPham/Workspace/testdata/java-diff-utils/rev25/target/test-classes/revised.txt"
diffutills.DaikonTestIssue10.originalFilenameOneDelta has only one value
diffutills.DaikonTestIssue10.originalFilenameOneDelta.toString == "/Users/HongLongPham/Workspace/testdata/java-diff-utils/rev25/target/test-classes/one_delta_test_original.txt"
diffutills.DaikonTestIssue10.revisedFilenameOneDelta has only one value
diffutills.DaikonTestIssue10.revisedFilenameOneDelta.toString == "/Users/HongLongPham/Workspace/testdata/java-diff-utils/rev25/target/test-classes/one_delta_test_revised.txt"
diffutills.DaikonTestIssue10.this.changeTest_from has only one value
diffutills.DaikonTestIssue10.this.changeTest_from[] contains no nulls and has only one value, of length 4
diffutills.DaikonTestIssue10.this.changeTest_from[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
diffutills.DaikonTestIssue10.this.changeTest_from[].getClass().getName() elements == java.lang.String.class
diffutills.DaikonTestIssue10.this.changeTest_to has only one value
diffutills.DaikonTestIssue10.this.changeTest_to[] contains no nulls and has only one value, of length 4
diffutills.DaikonTestIssue10.this.deleteTest_from has only one value
diffutills.DaikonTestIssue10.this.deleteTest_from[] contains no nulls and has only one value, of length 4
diffutills.DaikonTestIssue10.this.deleteTest_to has only one value
diffutills.DaikonTestIssue10.this.insertTest_from has only one value
diffutills.DaikonTestIssue10.this.insertTest_to has only one value
diffutills.DaikonTestIssue10.this.insertTest_to[] contains no nulls and has only one value, of length 4
size(diffutills.DaikonTestIssue10.this.deleteTest_to1[]) == 1
size(diffutills.DaikonTestIssue10.this.changeTest_from[]) == 4
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.changeTest_to1.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.deleteTest_from1.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.deleteTest_to1.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.insertTest_from1.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.insertTest_to1.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.changeTest_from.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.changeTest_to.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.deleteTest_from.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.deleteTest_to.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.insertTest_from.getClass().getName()
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == diffutills.DaikonTestIssue10.this.insertTest_to.getClass().getName()
===========================================================================
diffutills.DaikonTestIssue10$4.DaikonTestIssue10$4(diffutills.DaikonTestIssue10):::EXIT
diffutills.DaikonTestIssue10.this == orig(diffutills.DaikonTestIssue10.this)
diffutills.DaikonTestIssue10.this.changeTest_from1 == orig(diffutills.DaikonTestIssue10.this.changeTest_from1)
diffutills.DaikonTestIssue10.this.changeTest_from1[] == orig(diffutills.DaikonTestIssue10.this.changeTest_from1[])
diffutills.DaikonTestIssue10.this.changeTest_to1 == orig(diffutills.DaikonTestIssue10.this.changeTest_to1)
diffutills.DaikonTestIssue10.this.changeTest_to1[] == orig(diffutills.DaikonTestIssue10.this.changeTest_to1[])
diffutills.DaikonTestIssue10.this.deleteTest_from1 == orig(diffutills.DaikonTestIssue10.this.deleteTest_from1)
diffutills.DaikonTestIssue10.this.deleteTest_from1[] == orig(diffutills.DaikonTestIssue10.this.deleteTest_from1[])
diffutills.DaikonTestIssue10.this.deleteTest_to1 == orig(diffutills.DaikonTestIssue10.this.deleteTest_to1)
diffutills.DaikonTestIssue10.this.deleteTest_to1[] == orig(diffutills.DaikonTestIssue10.this.deleteTest_to1[])
diffutills.DaikonTestIssue10.this.deleteTest_to1[] == orig(diffutills.DaikonTestIssue10.this.deleteTest_to[])
diffutills.DaikonTestIssue10.this.insertTest_from1 == orig(diffutills.DaikonTestIssue10.this.insertTest_from1)
diffutills.DaikonTestIssue10.this.insertTest_from1[] == orig(diffutills.DaikonTestIssue10.this.insertTest_from1[])
diffutills.DaikonTestIssue10.this.insertTest_from1[] == orig(diffutills.DaikonTestIssue10.this.insertTest_from[])
diffutills.DaikonTestIssue10.this.insertTest_to1 == orig(diffutills.DaikonTestIssue10.this.insertTest_to1)
diffutills.DaikonTestIssue10.this.insertTest_to1[] == orig(diffutills.DaikonTestIssue10.this.insertTest_to1[])
diffutills.DaikonTestIssue10.FS == orig(diffutills.DaikonTestIssue10.FS)
diffutills.DaikonTestIssue10.resourceFolder == orig(diffutills.DaikonTestIssue10.resourceFolder)
diffutills.DaikonTestIssue10.originalFilename == orig(diffutills.DaikonTestIssue10.originalFilename)
diffutills.DaikonTestIssue10.revisedFilename == orig(diffutills.DaikonTestIssue10.revisedFilename)
diffutills.DaikonTestIssue10.originalFilenameOneDelta == orig(diffutills.DaikonTestIssue10.originalFilenameOneDelta)
diffutills.DaikonTestIssue10.revisedFilenameOneDelta == orig(diffutills.DaikonTestIssue10.revisedFilenameOneDelta)
diffutills.DaikonTestIssue10.this.changeTest_from == orig(diffutills.DaikonTestIssue10.this.changeTest_from)
diffutills.DaikonTestIssue10.this.changeTest_from[] == orig(diffutills.DaikonTestIssue10.this.changeTest_from[])
diffutills.DaikonTestIssue10.this.changeTest_to == orig(diffutills.DaikonTestIssue10.this.changeTest_to)
diffutills.DaikonTestIssue10.this.changeTest_to[] == orig(diffutills.DaikonTestIssue10.this.changeTest_to[])
diffutills.DaikonTestIssue10.this.deleteTest_from == orig(diffutills.DaikonTestIssue10.this.deleteTest_from)
diffutills.DaikonTestIssue10.this.deleteTest_from[] == orig(diffutills.DaikonTestIssue10.this.deleteTest_from[])
diffutills.DaikonTestIssue10.this.deleteTest_to == orig(diffutills.DaikonTestIssue10.this.deleteTest_to)
diffutills.DaikonTestIssue10.this.insertTest_from == orig(diffutills.DaikonTestIssue10.this.insertTest_from)
diffutills.DaikonTestIssue10.this.insertTest_to == orig(diffutills.DaikonTestIssue10.this.insertTest_to)
diffutills.DaikonTestIssue10.this.insertTest_to[] == orig(diffutills.DaikonTestIssue10.this.insertTest_to[])
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == orig(size(diffutills.DaikonTestIssue10.this.changeTest_to1[]))
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == orig(size(diffutills.DaikonTestIssue10.this.deleteTest_from1[]))
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == orig(size(diffutills.DaikonTestIssue10.this.insertTest_to1[]))
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == orig(size(diffutills.DaikonTestIssue10.this.changeTest_from[]))-1
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == orig(size(diffutills.DaikonTestIssue10.this.changeTest_to[]))-1
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == orig(size(diffutills.DaikonTestIssue10.this.deleteTest_from[]))-1
size(diffutills.DaikonTestIssue10.this.changeTest_from1[]) == orig(size(diffutills.DaikonTestIssue10.this.insertTest_to[]))-1
size(diffutills.DaikonTestIssue10.this.deleteTest_to1[]) == orig(size(diffutills.DaikonTestIssue10.this.insertTest_from1[]))
size(diffutills.DaikonTestIssue10.this.deleteTest_to1[]) == orig(size(diffutills.DaikonTestIssue10.this.insertTest_from[]))
size(diffutills.DaikonTestIssue10.this.changeTest_from[]) == orig(size(diffutills.DaikonTestIssue10.this.changeTest_to[]))
size(diffutills.DaikonTestIssue10.this.changeTest_from[]) == orig(size(diffutills.DaikonTestIssue10.this.deleteTest_from[]))
size(diffutills.DaikonTestIssue10.this.changeTest_from[]) == orig(size(diffutills.DaikonTestIssue10.this.insertTest_to[]))
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == orig(diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName())
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == orig(diffutills.DaikonTestIssue10.this.changeTest_to1.getClass().getName())
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == orig(diffutills.DaikonTestIssue10.this.deleteTest_from1.getClass().getName())
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == orig(diffutills.DaikonTestIssue10.this.deleteTest_to1.getClass().getName())
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == orig(diffutills.DaikonTestIssue10.this.insertTest_from1.getClass().getName())
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == orig(diffutills.DaikonTestIssue10.this.insertTest_to1.getClass().getName())
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == orig(diffutills.DaikonTestIssue10.this.changeTest_from.getClass().getName())
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == orig(diffutills.DaikonTestIssue10.this.changeTest_to.getClass().getName())
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == orig(diffutills.DaikonTestIssue10.this.deleteTest_from.getClass().getName())
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == orig(diffutills.DaikonTestIssue10.this.deleteTest_to.getClass().getName())
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == orig(diffutills.DaikonTestIssue10.this.insertTest_from.getClass().getName())
diffutills.DaikonTestIssue10.this.changeTest_from1.getClass().getName() == orig(diffutills.DaikonTestIssue10.this.insertTest_to.getClass().getName())
diffutills.DaikonTestIssue10.FS.toString == orig(diffutills.DaikonTestIssue10.FS.toString)
diffutills.DaikonTestIssue10.resourceFolder.toString == orig(diffutills.DaikonTestIssue10.resourceFolder.toString)
diffutills.DaikonTestIssue10.originalFilename.toString == orig(diffutills.DaikonTestIssue10.originalFilename.toString)
diffutills.DaikonTestIssue10.revisedFilename.toString == orig(diffutills.DaikonTestIssue10.revisedFilename.toString)
diffutills.DaikonTestIssue10.originalFilenameOneDelta.toString == orig(diffutills.DaikonTestIssue10.originalFilenameOneDelta.toString)
diffutills.DaikonTestIssue10.revisedFilenameOneDelta.toString == orig(diffutills.DaikonTestIssue10.revisedFilenameOneDelta.toString)
===========================================================================
diffutills.DaikonTestIssue10:::CLASS
diffutills.DaikonTestIssue10.FS has only one value
diffutills.DaikonTestIssue10.FS != null
diffutills.DaikonTestIssue10.FS.toString == "/"
diffutills.DaikonTestIssue10.resourceFolder has only one value
diffutills.DaikonTestIssue10.resourceFolder != null
diffutills.DaikonTestIssue10.resourceFolder.toString == "/Users/HongLongPham/Workspace/testdata/java-diff-utils/rev25/target/test-classes"
diffutills.DaikonTestIssue10.originalFilename has only one value
diffutills.DaikonTestIssue10.originalFilename != null
diffutills.DaikonTestIssue10.originalFilename.toString == "/Users/HongLongPham/Workspace/testdata/java-diff-utils/rev25/target/test-classes/original.txt"
diffutills.DaikonTestIssue10.revisedFilename has only one value
diffutills.DaikonTestIssue10.revisedFilename != null
diffutills.DaikonTestIssue10.revisedFilename.toString == "/Users/HongLongPham/Workspace/testdata/java-diff-utils/rev25/target/test-classes/revised.txt"
diffutills.DaikonTestIssue10.originalFilenameOneDelta has only one value
diffutills.DaikonTestIssue10.originalFilenameOneDelta != null
diffutills.DaikonTestIssue10.originalFilenameOneDelta.toString == "/Users/HongLongPham/Workspace/testdata/java-diff-utils/rev25/target/test-classes/one_delta_test_original.txt"
diffutills.DaikonTestIssue10.revisedFilenameOneDelta has only one value
diffutills.DaikonTestIssue10.revisedFilenameOneDelta != null
diffutills.DaikonTestIssue10.revisedFilenameOneDelta.toString == "/Users/HongLongPham/Workspace/testdata/java-diff-utils/rev25/target/test-classes/one_delta_test_revised.txt"
diffutills.DaikonTestIssue10.FS.toString < diffutills.DaikonTestIssue10.resourceFolder.toString
diffutills.DaikonTestIssue10.FS.toString < diffutills.DaikonTestIssue10.originalFilename.toString
diffutills.DaikonTestIssue10.FS.toString < diffutills.DaikonTestIssue10.revisedFilename.toString
diffutills.DaikonTestIssue10.FS.toString < diffutills.DaikonTestIssue10.originalFilenameOneDelta.toString
diffutills.DaikonTestIssue10.FS.toString < diffutills.DaikonTestIssue10.revisedFilenameOneDelta.toString
diffutills.DaikonTestIssue10.resourceFolder.toString < diffutills.DaikonTestIssue10.originalFilename.toString
diffutills.DaikonTestIssue10.resourceFolder.toString < diffutills.DaikonTestIssue10.revisedFilename.toString
diffutills.DaikonTestIssue10.resourceFolder.toString < diffutills.DaikonTestIssue10.originalFilenameOneDelta.toString
diffutills.DaikonTestIssue10.resourceFolder.toString < diffutills.DaikonTestIssue10.revisedFilenameOneDelta.toString
diffutills.DaikonTestIssue10.originalFilename.toString < diffutills.DaikonTestIssue10.revisedFilename.toString
diffutills.DaikonTestIssue10.originalFilename.toString > diffutills.DaikonTestIssue10.originalFilenameOneDelta.toString
diffutills.DaikonTestIssue10.originalFilename.toString > diffutills.DaikonTestIssue10.revisedFilenameOneDelta.toString
diffutills.DaikonTestIssue10.revisedFilename.toString > diffutills.DaikonTestIssue10.originalFilenameOneDelta.toString
diffutills.DaikonTestIssue10.revisedFilename.toString > diffutills.DaikonTestIssue10.revisedFilenameOneDelta.toString
diffutills.DaikonTestIssue10.originalFilenameOneDelta.toString < diffutills.DaikonTestIssue10.revisedFilenameOneDelta.toString
===========================================================================
diffutills.DaikonTestIssue10:::OBJECT
this.deleteTest_to1[] == this.deleteTest_to[]
this.insertTest_from1[] == this.insertTest_from[]
size(this.changeTest_from1[]) == size(this.changeTest_to1[])
size(this.changeTest_from1[]) == size(this.deleteTest_from1[])
size(this.changeTest_from1[]) == size(this.insertTest_to1[])
size(this.changeTest_from1[]) == size(this.changeTest_from[])-1
size(this.changeTest_from1[]) == size(this.changeTest_to[])-1
size(this.changeTest_from1[]) == size(this.deleteTest_from[])-1
size(this.changeTest_from1[]) == size(this.insertTest_to[])-1
size(this.deleteTest_to1[]) == size(this.insertTest_from1[])
size(this.deleteTest_to1[]) == size(this.insertTest_from[])
size(this.changeTest_from[]) == size(this.changeTest_to[])
size(this.changeTest_from[]) == size(this.deleteTest_from[])
size(this.changeTest_from[]) == size(this.insertTest_to[])
this has only one value
this.changeTest_from1 has only one value
this.changeTest_from1 != null
this.changeTest_from1[] contains no nulls and has only one value, of length 3
this.changeTest_from1[] elements != null
this.changeTest_from1[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.changeTest_from1[].getClass().getName() elements == java.lang.String.class
this.changeTest_from1.getClass().getName() == java.util.Arrays$ArrayList.class
this.changeTest_to1 has only one value
this.changeTest_to1 != null
this.changeTest_to1[] contains no nulls and has only one value, of length 3
this.changeTest_to1[] elements != null
this.deleteTest_from1 has only one value
this.deleteTest_from1 != null
this.deleteTest_from1[] contains no nulls and has only one value, of length 3
this.deleteTest_from1[] elements != null
this.deleteTest_to1 has only one value
this.deleteTest_to1 != null
this.deleteTest_to1[] contains no nulls and has only one value, of length 1
this.deleteTest_to1[] elements has only one value
this.deleteTest_to1[] elements != null
this.deleteTest_to1[].getClass().getName() == [java.lang.String]
this.deleteTest_to1[].getClass().getName() elements == java.lang.String.class
this.insertTest_from1 has only one value
this.insertTest_from1 != null
this.insertTest_from1[] contains no nulls and has only one value, of length 1
this.insertTest_from1[] elements has only one value
this.insertTest_from1[] elements != null
this.insertTest_to1 has only one value
this.insertTest_to1 != null
this.insertTest_to1[] contains no nulls and has only one value, of length 3
this.insertTest_to1[] elements != null
this.changeTest_from has only one value
this.changeTest_from != null
this.changeTest_from[] contains no nulls and has only one value, of length 4
this.changeTest_from[] elements != null
this.changeTest_from[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.changeTest_from[].getClass().getName() elements == java.lang.String.class
this.changeTest_to has only one value
this.changeTest_to != null
this.changeTest_to[] contains no nulls and has only one value, of length 4
this.changeTest_to[] elements != null
this.deleteTest_from has only one value
this.deleteTest_from != null
this.deleteTest_from[] contains no nulls and has only one value, of length 4
this.deleteTest_from[] elements != null
this.deleteTest_to has only one value
this.deleteTest_to != null
this.insertTest_from has only one value
this.insertTest_from != null
this.insertTest_to has only one value
this.insertTest_to != null
this.insertTest_to[] contains no nulls and has only one value, of length 4
this.insertTest_to[] elements != null
size(this.deleteTest_to1[]) == 1
size(this.changeTest_from[]) == 4
this.changeTest_from1.getClass().getName() == this.changeTest_to1.getClass().getName()
this.changeTest_from1.getClass().getName() == this.deleteTest_from1.getClass().getName()
this.changeTest_from1.getClass().getName() == this.deleteTest_to1.getClass().getName()
this.changeTest_from1.getClass().getName() == this.insertTest_from1.getClass().getName()
this.changeTest_from1.getClass().getName() == this.insertTest_to1.getClass().getName()
this.changeTest_from1.getClass().getName() == this.changeTest_from.getClass().getName()
this.changeTest_from1.getClass().getName() == this.changeTest_to.getClass().getName()
this.changeTest_from1.getClass().getName() == this.deleteTest_from.getClass().getName()
this.changeTest_from1.getClass().getName() == this.deleteTest_to.getClass().getName()
this.changeTest_from1.getClass().getName() == this.insertTest_from.getClass().getName()
this.changeTest_from1.getClass().getName() == this.insertTest_to.getClass().getName()
===========================================================================
diffutills.DaikonTestIssue10.DaikonTestIssue10():::EXIT
===========================================================================
diffutills.DaikonTestIssue10.fileToLines(java.lang.String):::ENTER
===========================================================================
diffutills.DaikonTestIssue10.fileToLines(java.lang.String):::EXIT
this.changeTest_from1 == orig(this.changeTest_from1)
this.changeTest_from1[] == orig(this.changeTest_from1[])
this.changeTest_to1 == orig(this.changeTest_to1)
this.changeTest_to1[] == orig(this.changeTest_to1[])
this.deleteTest_from1 == orig(this.deleteTest_from1)
this.deleteTest_from1[] == orig(this.deleteTest_from1[])
this.deleteTest_to1 == orig(this.deleteTest_to1)
this.deleteTest_to1[] == orig(this.deleteTest_to1[])
this.deleteTest_to1[] == orig(this.deleteTest_to[])
this.insertTest_from1 == orig(this.insertTest_from1)
this.insertTest_from1[] == orig(this.insertTest_from1[])
this.insertTest_from1[] == orig(this.insertTest_from[])
this.insertTest_to1 == orig(this.insertTest_to1)
this.insertTest_to1[] == orig(this.insertTest_to1[])
diffutills.DaikonTestIssue10.FS == orig(diffutills.DaikonTestIssue10.FS)
diffutills.DaikonTestIssue10.resourceFolder == orig(diffutills.DaikonTestIssue10.resourceFolder)
diffutills.DaikonTestIssue10.originalFilename == orig(diffutills.DaikonTestIssue10.originalFilename)
diffutills.DaikonTestIssue10.revisedFilename == orig(diffutills.DaikonTestIssue10.revisedFilename)
diffutills.DaikonTestIssue10.originalFilenameOneDelta == orig(diffutills.DaikonTestIssue10.originalFilenameOneDelta)
diffutills.DaikonTestIssue10.revisedFilenameOneDelta == orig(diffutills.DaikonTestIssue10.revisedFilenameOneDelta)
this.changeTest_from == orig(this.changeTest_from)
this.changeTest_from[] == orig(this.changeTest_from[])
this.changeTest_to == orig(this.changeTest_to)
this.changeTest_to[] == orig(this.changeTest_to[])
this.deleteTest_from == orig(this.deleteTest_from)
this.deleteTest_from[] == orig(this.deleteTest_from[])
this.deleteTest_to == orig(this.deleteTest_to)
this.insertTest_from == orig(this.insertTest_from)
this.insertTest_to == orig(this.insertTest_to)
this.insertTest_to[] == orig(this.insertTest_to[])
size(this.changeTest_from1[]) == orig(size(this.changeTest_to1[]))
size(this.changeTest_from1[]) == orig(size(this.deleteTest_from1[]))
size(this.changeTest_from1[]) == orig(size(this.insertTest_to1[]))
size(this.changeTest_from1[]) == orig(size(this.changeTest_from[]))-1
size(this.changeTest_from1[]) == orig(size(this.changeTest_to[]))-1
size(this.changeTest_from1[]) == orig(size(this.deleteTest_from[]))-1
size(this.changeTest_from1[]) == orig(size(this.insertTest_to[]))-1
size(this.deleteTest_to1[]) == orig(size(this.insertTest_from1[]))
size(this.deleteTest_to1[]) == orig(size(this.insertTest_from[]))
size(this.changeTest_from[]) == orig(size(this.changeTest_to[]))
size(this.changeTest_from[]) == orig(size(this.deleteTest_from[]))
size(this.changeTest_from[]) == orig(size(this.insertTest_to[]))
return[].getClass().getName() elements == java.lang.String.class
return.getClass().getName() == java.util.LinkedList.class
this.changeTest_from1.getClass().getName() == orig(this.changeTest_from1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.changeTest_to1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.deleteTest_from1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.deleteTest_to1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.insertTest_from1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.insertTest_to1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.changeTest_from.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.changeTest_to.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.deleteTest_from.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.deleteTest_to.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.insertTest_from.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.insertTest_to.getClass().getName())
diffutills.DaikonTestIssue10.FS.toString == orig(diffutills.DaikonTestIssue10.FS.toString)
diffutills.DaikonTestIssue10.resourceFolder.toString == orig(diffutills.DaikonTestIssue10.resourceFolder.toString)
diffutills.DaikonTestIssue10.originalFilename.toString == orig(diffutills.DaikonTestIssue10.originalFilename.toString)
diffutills.DaikonTestIssue10.revisedFilename.toString == orig(diffutills.DaikonTestIssue10.revisedFilename.toString)
diffutills.DaikonTestIssue10.originalFilenameOneDelta.toString == orig(diffutills.DaikonTestIssue10.originalFilenameOneDelta.toString)
diffutills.DaikonTestIssue10.revisedFilenameOneDelta.toString == orig(diffutills.DaikonTestIssue10.revisedFilenameOneDelta.toString)
filename.toString == orig(filename.toString)
===========================================================================
diffutills.DaikonTestIssue10.main(java.lang.String[]):::ENTER
args has only one value
args.getClass().getName() == java.lang.String[].class
args[] == []
args[].toString == []
===========================================================================
diffutills.DaikonTestIssue10.main(java.lang.String[]):::EXIT
diffutills.DaikonTestIssue10.FS == orig(diffutills.DaikonTestIssue10.FS)
diffutills.DaikonTestIssue10.resourceFolder == orig(diffutills.DaikonTestIssue10.resourceFolder)
diffutills.DaikonTestIssue10.originalFilename == orig(diffutills.DaikonTestIssue10.originalFilename)
diffutills.DaikonTestIssue10.revisedFilename == orig(diffutills.DaikonTestIssue10.revisedFilename)
diffutills.DaikonTestIssue10.originalFilenameOneDelta == orig(diffutills.DaikonTestIssue10.originalFilenameOneDelta)
diffutills.DaikonTestIssue10.revisedFilenameOneDelta == orig(diffutills.DaikonTestIssue10.revisedFilenameOneDelta)
args[] == orig(args[])
args[] == []
args[].toString == []
diffutills.DaikonTestIssue10.FS.toString == orig(diffutills.DaikonTestIssue10.FS.toString)
diffutills.DaikonTestIssue10.resourceFolder.toString == orig(diffutills.DaikonTestIssue10.resourceFolder.toString)
diffutills.DaikonTestIssue10.originalFilename.toString == orig(diffutills.DaikonTestIssue10.originalFilename.toString)
diffutills.DaikonTestIssue10.revisedFilename.toString == orig(diffutills.DaikonTestIssue10.revisedFilename.toString)
diffutills.DaikonTestIssue10.originalFilenameOneDelta.toString == orig(diffutills.DaikonTestIssue10.originalFilenameOneDelta.toString)
diffutills.DaikonTestIssue10.revisedFilenameOneDelta.toString == orig(diffutills.DaikonTestIssue10.revisedFilenameOneDelta.toString)
===========================================================================
diffutills.DaikonTestIssue10.testDiff_Change():::ENTER
===========================================================================
diffutills.DaikonTestIssue10.testDiff_Change():::EXIT
this.changeTest_from1 == orig(this.changeTest_from1)
this.changeTest_from1[] == orig(this.changeTest_from1[])
this.changeTest_to1 == orig(this.changeTest_to1)
this.changeTest_to1[] == orig(this.changeTest_to1[])
this.deleteTest_from1 == orig(this.deleteTest_from1)
this.deleteTest_from1[] == orig(this.deleteTest_from1[])
this.deleteTest_to1 == orig(this.deleteTest_to1)
this.deleteTest_to1[] == orig(this.deleteTest_to1[])
this.deleteTest_to1[] == orig(this.deleteTest_to[])
this.insertTest_from1 == orig(this.insertTest_from1)
this.insertTest_from1[] == orig(this.insertTest_from1[])
this.insertTest_from1[] == orig(this.insertTest_from[])
this.insertTest_to1 == orig(this.insertTest_to1)
this.insertTest_to1[] == orig(this.insertTest_to1[])
diffutills.DaikonTestIssue10.FS == orig(diffutills.DaikonTestIssue10.FS)
diffutills.DaikonTestIssue10.resourceFolder == orig(diffutills.DaikonTestIssue10.resourceFolder)
diffutills.DaikonTestIssue10.originalFilename == orig(diffutills.DaikonTestIssue10.originalFilename)
diffutills.DaikonTestIssue10.revisedFilename == orig(diffutills.DaikonTestIssue10.revisedFilename)
diffutills.DaikonTestIssue10.originalFilenameOneDelta == orig(diffutills.DaikonTestIssue10.originalFilenameOneDelta)
diffutills.DaikonTestIssue10.revisedFilenameOneDelta == orig(diffutills.DaikonTestIssue10.revisedFilenameOneDelta)
this.changeTest_from == orig(this.changeTest_from)
this.changeTest_from[] == orig(this.changeTest_from[])
this.changeTest_to == orig(this.changeTest_to)
this.changeTest_to[] == orig(this.changeTest_to[])
this.deleteTest_from == orig(this.deleteTest_from)
this.deleteTest_from[] == orig(this.deleteTest_from[])
this.deleteTest_to == orig(this.deleteTest_to)
this.insertTest_from == orig(this.insertTest_from)
this.insertTest_to == orig(this.insertTest_to)
this.insertTest_to[] == orig(this.insertTest_to[])
size(this.changeTest_from1[]) == orig(size(this.changeTest_to1[]))
size(this.changeTest_from1[]) == orig(size(this.deleteTest_from1[]))
size(this.changeTest_from1[]) == orig(size(this.insertTest_to1[]))
size(this.changeTest_from1[]) == orig(size(this.changeTest_from[]))-1
size(this.changeTest_from1[]) == orig(size(this.changeTest_to[]))-1
size(this.changeTest_from1[]) == orig(size(this.deleteTest_from[]))-1
size(this.changeTest_from1[]) == orig(size(this.insertTest_to[]))-1
size(this.deleteTest_to1[]) == orig(size(this.insertTest_from1[]))
size(this.deleteTest_to1[]) == orig(size(this.insertTest_from[]))
size(this.changeTest_from[]) == orig(size(this.changeTest_to[]))
size(this.changeTest_from[]) == orig(size(this.deleteTest_from[]))
size(this.changeTest_from[]) == orig(size(this.insertTest_to[]))
this.changeTest_from1.getClass().getName() == orig(this.changeTest_from1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.changeTest_to1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.deleteTest_from1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.deleteTest_to1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.insertTest_from1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.insertTest_to1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.changeTest_from.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.changeTest_to.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.deleteTest_from.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.deleteTest_to.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.insertTest_from.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.insertTest_to.getClass().getName())
diffutills.DaikonTestIssue10.FS.toString == orig(diffutills.DaikonTestIssue10.FS.toString)
diffutills.DaikonTestIssue10.resourceFolder.toString == orig(diffutills.DaikonTestIssue10.resourceFolder.toString)
diffutills.DaikonTestIssue10.originalFilename.toString == orig(diffutills.DaikonTestIssue10.originalFilename.toString)
diffutills.DaikonTestIssue10.revisedFilename.toString == orig(diffutills.DaikonTestIssue10.revisedFilename.toString)
diffutills.DaikonTestIssue10.originalFilenameOneDelta.toString == orig(diffutills.DaikonTestIssue10.originalFilenameOneDelta.toString)
diffutills.DaikonTestIssue10.revisedFilenameOneDelta.toString == orig(diffutills.DaikonTestIssue10.revisedFilenameOneDelta.toString)
===========================================================================
diffutills.DaikonTestIssue10.testDiff_Delete():::ENTER
===========================================================================
diffutills.DaikonTestIssue10.testDiff_Delete():::EXIT
this.changeTest_from1 == orig(this.changeTest_from1)
this.changeTest_from1[] == orig(this.changeTest_from1[])
this.changeTest_to1 == orig(this.changeTest_to1)
this.changeTest_to1[] == orig(this.changeTest_to1[])
this.deleteTest_from1 == orig(this.deleteTest_from1)
this.deleteTest_from1[] == orig(this.deleteTest_from1[])
this.deleteTest_to1 == orig(this.deleteTest_to1)
this.deleteTest_to1[] == orig(this.deleteTest_to1[])
this.deleteTest_to1[] == orig(this.deleteTest_to[])
this.insertTest_from1 == orig(this.insertTest_from1)
this.insertTest_from1[] == orig(this.insertTest_from1[])
this.insertTest_from1[] == orig(this.insertTest_from[])
this.insertTest_to1 == orig(this.insertTest_to1)
this.insertTest_to1[] == orig(this.insertTest_to1[])
diffutills.DaikonTestIssue10.FS == orig(diffutills.DaikonTestIssue10.FS)
diffutills.DaikonTestIssue10.resourceFolder == orig(diffutills.DaikonTestIssue10.resourceFolder)
diffutills.DaikonTestIssue10.originalFilename == orig(diffutills.DaikonTestIssue10.originalFilename)
diffutills.DaikonTestIssue10.revisedFilename == orig(diffutills.DaikonTestIssue10.revisedFilename)
diffutills.DaikonTestIssue10.originalFilenameOneDelta == orig(diffutills.DaikonTestIssue10.originalFilenameOneDelta)
diffutills.DaikonTestIssue10.revisedFilenameOneDelta == orig(diffutills.DaikonTestIssue10.revisedFilenameOneDelta)
this.changeTest_from == orig(this.changeTest_from)
this.changeTest_from[] == orig(this.changeTest_from[])
this.changeTest_to == orig(this.changeTest_to)
this.changeTest_to[] == orig(this.changeTest_to[])
this.deleteTest_from == orig(this.deleteTest_from)
this.deleteTest_from[] == orig(this.deleteTest_from[])
this.deleteTest_to == orig(this.deleteTest_to)
this.insertTest_from == orig(this.insertTest_from)
this.insertTest_to == orig(this.insertTest_to)
this.insertTest_to[] == orig(this.insertTest_to[])
size(this.changeTest_from1[]) == orig(size(this.changeTest_to1[]))
size(this.changeTest_from1[]) == orig(size(this.deleteTest_from1[]))
size(this.changeTest_from1[]) == orig(size(this.insertTest_to1[]))
size(this.changeTest_from1[]) == orig(size(this.changeTest_from[]))-1
size(this.changeTest_from1[]) == orig(size(this.changeTest_to[]))-1
size(this.changeTest_from1[]) == orig(size(this.deleteTest_from[]))-1
size(this.changeTest_from1[]) == orig(size(this.insertTest_to[]))-1
size(this.deleteTest_to1[]) == orig(size(this.insertTest_from1[]))
size(this.deleteTest_to1[]) == orig(size(this.insertTest_from[]))
size(this.changeTest_from[]) == orig(size(this.changeTest_to[]))
size(this.changeTest_from[]) == orig(size(this.deleteTest_from[]))
size(this.changeTest_from[]) == orig(size(this.insertTest_to[]))
this.changeTest_from1.getClass().getName() == orig(this.changeTest_from1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.changeTest_to1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.deleteTest_from1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.deleteTest_to1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.insertTest_from1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.insertTest_to1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.changeTest_from.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.changeTest_to.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.deleteTest_from.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.deleteTest_to.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.insertTest_from.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.insertTest_to.getClass().getName())
diffutills.DaikonTestIssue10.FS.toString == orig(diffutills.DaikonTestIssue10.FS.toString)
diffutills.DaikonTestIssue10.resourceFolder.toString == orig(diffutills.DaikonTestIssue10.resourceFolder.toString)
diffutills.DaikonTestIssue10.originalFilename.toString == orig(diffutills.DaikonTestIssue10.originalFilename.toString)
diffutills.DaikonTestIssue10.revisedFilename.toString == orig(diffutills.DaikonTestIssue10.revisedFilename.toString)
diffutills.DaikonTestIssue10.originalFilenameOneDelta.toString == orig(diffutills.DaikonTestIssue10.originalFilenameOneDelta.toString)
diffutills.DaikonTestIssue10.revisedFilenameOneDelta.toString == orig(diffutills.DaikonTestIssue10.revisedFilenameOneDelta.toString)
===========================================================================
diffutills.DaikonTestIssue10.testDiff_EmptyListWithNonEmpty():::ENTER
===========================================================================
diffutills.DaikonTestIssue10.testDiff_EmptyListWithNonEmpty():::EXIT
this.changeTest_from1 == orig(this.changeTest_from1)
this.changeTest_from1[] == orig(this.changeTest_from1[])
this.changeTest_to1 == orig(this.changeTest_to1)
this.changeTest_to1[] == orig(this.changeTest_to1[])
this.deleteTest_from1 == orig(this.deleteTest_from1)
this.deleteTest_from1[] == orig(this.deleteTest_from1[])
this.deleteTest_to1 == orig(this.deleteTest_to1)
this.deleteTest_to1[] == orig(this.deleteTest_to1[])
this.deleteTest_to1[] == orig(this.deleteTest_to[])
this.insertTest_from1 == orig(this.insertTest_from1)
this.insertTest_from1[] == orig(this.insertTest_from1[])
this.insertTest_from1[] == orig(this.insertTest_from[])
this.insertTest_to1 == orig(this.insertTest_to1)
this.insertTest_to1[] == orig(this.insertTest_to1[])
diffutills.DaikonTestIssue10.FS == orig(diffutills.DaikonTestIssue10.FS)
diffutills.DaikonTestIssue10.resourceFolder == orig(diffutills.DaikonTestIssue10.resourceFolder)
diffutills.DaikonTestIssue10.originalFilename == orig(diffutills.DaikonTestIssue10.originalFilename)
diffutills.DaikonTestIssue10.revisedFilename == orig(diffutills.DaikonTestIssue10.revisedFilename)
diffutills.DaikonTestIssue10.originalFilenameOneDelta == orig(diffutills.DaikonTestIssue10.originalFilenameOneDelta)
diffutills.DaikonTestIssue10.revisedFilenameOneDelta == orig(diffutills.DaikonTestIssue10.revisedFilenameOneDelta)
this.changeTest_from == orig(this.changeTest_from)
this.changeTest_from[] == orig(this.changeTest_from[])
this.changeTest_to == orig(this.changeTest_to)
this.changeTest_to[] == orig(this.changeTest_to[])
this.deleteTest_from == orig(this.deleteTest_from)
this.deleteTest_from[] == orig(this.deleteTest_from[])
this.deleteTest_to == orig(this.deleteTest_to)
this.insertTest_from == orig(this.insertTest_from)
this.insertTest_to == orig(this.insertTest_to)
this.insertTest_to[] == orig(this.insertTest_to[])
size(this.changeTest_from1[]) == orig(size(this.changeTest_to1[]))
size(this.changeTest_from1[]) == orig(size(this.deleteTest_from1[]))
size(this.changeTest_from1[]) == orig(size(this.insertTest_to1[]))
size(this.changeTest_from1[]) == orig(size(this.changeTest_from[]))-1
size(this.changeTest_from1[]) == orig(size(this.changeTest_to[]))-1
size(this.changeTest_from1[]) == orig(size(this.deleteTest_from[]))-1
size(this.changeTest_from1[]) == orig(size(this.insertTest_to[]))-1
size(this.deleteTest_to1[]) == orig(size(this.insertTest_from1[]))
size(this.deleteTest_to1[]) == orig(size(this.insertTest_from[]))
size(this.changeTest_from[]) == orig(size(this.changeTest_to[]))
size(this.changeTest_from[]) == orig(size(this.deleteTest_from[]))
size(this.changeTest_from[]) == orig(size(this.insertTest_to[]))
this.changeTest_from1.getClass().getName() == orig(this.changeTest_from1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.changeTest_to1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.deleteTest_from1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.deleteTest_to1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.insertTest_from1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.insertTest_to1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.changeTest_from.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.changeTest_to.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.deleteTest_from.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.deleteTest_to.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.insertTest_from.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.insertTest_to.getClass().getName())
diffutills.DaikonTestIssue10.FS.toString == orig(diffutills.DaikonTestIssue10.FS.toString)
diffutills.DaikonTestIssue10.resourceFolder.toString == orig(diffutills.DaikonTestIssue10.resourceFolder.toString)
diffutills.DaikonTestIssue10.originalFilename.toString == orig(diffutills.DaikonTestIssue10.originalFilename.toString)
diffutills.DaikonTestIssue10.revisedFilename.toString == orig(diffutills.DaikonTestIssue10.revisedFilename.toString)
diffutills.DaikonTestIssue10.originalFilenameOneDelta.toString == orig(diffutills.DaikonTestIssue10.originalFilenameOneDelta.toString)
diffutills.DaikonTestIssue10.revisedFilenameOneDelta.toString == orig(diffutills.DaikonTestIssue10.revisedFilenameOneDelta.toString)
===========================================================================
diffutills.DaikonTestIssue10.testDiff_Insert():::ENTER
===========================================================================
diffutills.DaikonTestIssue10.testDiff_Insert():::EXIT
this.changeTest_from1 == orig(this.changeTest_from1)
this.changeTest_from1[] == orig(this.changeTest_from1[])
this.changeTest_to1 == orig(this.changeTest_to1)
this.changeTest_to1[] == orig(this.changeTest_to1[])
this.deleteTest_from1 == orig(this.deleteTest_from1)
this.deleteTest_from1[] == orig(this.deleteTest_from1[])
this.deleteTest_to1 == orig(this.deleteTest_to1)
this.deleteTest_to1[] == orig(this.deleteTest_to1[])
this.deleteTest_to1[] == orig(this.deleteTest_to[])
this.insertTest_from1 == orig(this.insertTest_from1)
this.insertTest_from1[] == orig(this.insertTest_from1[])
this.insertTest_from1[] == orig(this.insertTest_from[])
this.insertTest_to1 == orig(this.insertTest_to1)
this.insertTest_to1[] == orig(this.insertTest_to1[])
diffutills.DaikonTestIssue10.FS == orig(diffutills.DaikonTestIssue10.FS)
diffutills.DaikonTestIssue10.resourceFolder == orig(diffutills.DaikonTestIssue10.resourceFolder)
diffutills.DaikonTestIssue10.originalFilename == orig(diffutills.DaikonTestIssue10.originalFilename)
diffutills.DaikonTestIssue10.revisedFilename == orig(diffutills.DaikonTestIssue10.revisedFilename)
diffutills.DaikonTestIssue10.originalFilenameOneDelta == orig(diffutills.DaikonTestIssue10.originalFilenameOneDelta)
diffutills.DaikonTestIssue10.revisedFilenameOneDelta == orig(diffutills.DaikonTestIssue10.revisedFilenameOneDelta)
this.changeTest_from == orig(this.changeTest_from)
this.changeTest_from[] == orig(this.changeTest_from[])
this.changeTest_to == orig(this.changeTest_to)
this.changeTest_to[] == orig(this.changeTest_to[])
this.deleteTest_from == orig(this.deleteTest_from)
this.deleteTest_from[] == orig(this.deleteTest_from[])
this.deleteTest_to == orig(this.deleteTest_to)
this.insertTest_from == orig(this.insertTest_from)
this.insertTest_to == orig(this.insertTest_to)
this.insertTest_to[] == orig(this.insertTest_to[])
size(this.changeTest_from1[]) == orig(size(this.changeTest_to1[]))
size(this.changeTest_from1[]) == orig(size(this.deleteTest_from1[]))
size(this.changeTest_from1[]) == orig(size(this.insertTest_to1[]))
size(this.changeTest_from1[]) == orig(size(this.changeTest_from[]))-1
size(this.changeTest_from1[]) == orig(size(this.changeTest_to[]))-1
size(this.changeTest_from1[]) == orig(size(this.deleteTest_from[]))-1
size(this.changeTest_from1[]) == orig(size(this.insertTest_to[]))-1
size(this.deleteTest_to1[]) == orig(size(this.insertTest_from1[]))
size(this.deleteTest_to1[]) == orig(size(this.insertTest_from[]))
size(this.changeTest_from[]) == orig(size(this.changeTest_to[]))
size(this.changeTest_from[]) == orig(size(this.deleteTest_from[]))
size(this.changeTest_from[]) == orig(size(this.insertTest_to[]))
this.changeTest_from1.getClass().getName() == orig(this.changeTest_from1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.changeTest_to1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.deleteTest_from1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.deleteTest_to1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.insertTest_from1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.insertTest_to1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.changeTest_from.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.changeTest_to.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.deleteTest_from.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.deleteTest_to.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.insertTest_from.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.insertTest_to.getClass().getName())
diffutills.DaikonTestIssue10.FS.toString == orig(diffutills.DaikonTestIssue10.FS.toString)
diffutills.DaikonTestIssue10.resourceFolder.toString == orig(diffutills.DaikonTestIssue10.resourceFolder.toString)
diffutills.DaikonTestIssue10.originalFilename.toString == orig(diffutills.DaikonTestIssue10.originalFilename.toString)
diffutills.DaikonTestIssue10.revisedFilename.toString == orig(diffutills.DaikonTestIssue10.revisedFilename.toString)
diffutills.DaikonTestIssue10.originalFilenameOneDelta.toString == orig(diffutills.DaikonTestIssue10.originalFilenameOneDelta.toString)
diffutills.DaikonTestIssue10.revisedFilenameOneDelta.toString == orig(diffutills.DaikonTestIssue10.revisedFilenameOneDelta.toString)
===========================================================================
diffutills.DaikonTestIssue10.testGenerateUnified():::ENTER
===========================================================================
diffutills.DaikonTestIssue10.testGenerateUnified():::EXIT
this.changeTest_from1 == orig(this.changeTest_from1)
this.changeTest_from1[] == orig(this.changeTest_from1[])
this.changeTest_to1 == orig(this.changeTest_to1)
this.changeTest_to1[] == orig(this.changeTest_to1[])
this.deleteTest_from1 == orig(this.deleteTest_from1)
this.deleteTest_from1[] == orig(this.deleteTest_from1[])
this.deleteTest_to1 == orig(this.deleteTest_to1)
this.deleteTest_to1[] == orig(this.deleteTest_to1[])
this.deleteTest_to1[] == orig(this.deleteTest_to[])
this.insertTest_from1 == orig(this.insertTest_from1)
this.insertTest_from1[] == orig(this.insertTest_from1[])
this.insertTest_from1[] == orig(this.insertTest_from[])
this.insertTest_to1 == orig(this.insertTest_to1)
this.insertTest_to1[] == orig(this.insertTest_to1[])
diffutills.DaikonTestIssue10.FS == orig(diffutills.DaikonTestIssue10.FS)
diffutills.DaikonTestIssue10.resourceFolder == orig(diffutills.DaikonTestIssue10.resourceFolder)
diffutills.DaikonTestIssue10.originalFilename == orig(diffutills.DaikonTestIssue10.originalFilename)
diffutills.DaikonTestIssue10.revisedFilename == orig(diffutills.DaikonTestIssue10.revisedFilename)
diffutills.DaikonTestIssue10.originalFilenameOneDelta == orig(diffutills.DaikonTestIssue10.originalFilenameOneDelta)
diffutills.DaikonTestIssue10.revisedFilenameOneDelta == orig(diffutills.DaikonTestIssue10.revisedFilenameOneDelta)
this.changeTest_from == orig(this.changeTest_from)
this.changeTest_from[] == orig(this.changeTest_from[])
this.changeTest_to == orig(this.changeTest_to)
this.changeTest_to[] == orig(this.changeTest_to[])
this.deleteTest_from == orig(this.deleteTest_from)
this.deleteTest_from[] == orig(this.deleteTest_from[])
this.deleteTest_to == orig(this.deleteTest_to)
this.insertTest_from == orig(this.insertTest_from)
this.insertTest_to == orig(this.insertTest_to)
this.insertTest_to[] == orig(this.insertTest_to[])
size(this.changeTest_from1[]) == orig(size(this.changeTest_to1[]))
size(this.changeTest_from1[]) == orig(size(this.deleteTest_from1[]))
size(this.changeTest_from1[]) == orig(size(this.insertTest_to1[]))
size(this.changeTest_from1[]) == orig(size(this.changeTest_from[]))-1
size(this.changeTest_from1[]) == orig(size(this.changeTest_to[]))-1
size(this.changeTest_from1[]) == orig(size(this.deleteTest_from[]))-1
size(this.changeTest_from1[]) == orig(size(this.insertTest_to[]))-1
size(this.deleteTest_to1[]) == orig(size(this.insertTest_from1[]))
size(this.deleteTest_to1[]) == orig(size(this.insertTest_from[]))
size(this.changeTest_from[]) == orig(size(this.changeTest_to[]))
size(this.changeTest_from[]) == orig(size(this.deleteTest_from[]))
size(this.changeTest_from[]) == orig(size(this.insertTest_to[]))
this.changeTest_from1.getClass().getName() == orig(this.changeTest_from1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.changeTest_to1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.deleteTest_from1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.deleteTest_to1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.insertTest_from1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.insertTest_to1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.changeTest_from.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.changeTest_to.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.deleteTest_from.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.deleteTest_to.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.insertTest_from.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.insertTest_to.getClass().getName())
diffutills.DaikonTestIssue10.FS.toString == orig(diffutills.DaikonTestIssue10.FS.toString)
diffutills.DaikonTestIssue10.resourceFolder.toString == orig(diffutills.DaikonTestIssue10.resourceFolder.toString)
diffutills.DaikonTestIssue10.originalFilename.toString == orig(diffutills.DaikonTestIssue10.originalFilename.toString)
diffutills.DaikonTestIssue10.revisedFilename.toString == orig(diffutills.DaikonTestIssue10.revisedFilename.toString)
diffutills.DaikonTestIssue10.originalFilenameOneDelta.toString == orig(diffutills.DaikonTestIssue10.originalFilenameOneDelta.toString)
diffutills.DaikonTestIssue10.revisedFilenameOneDelta.toString == orig(diffutills.DaikonTestIssue10.revisedFilenameOneDelta.toString)
===========================================================================
diffutills.DaikonTestIssue10.testGenerateUnified(java.util.List, java.util.List):::ENTER
origLines[].getClass().getName() elements == java.lang.String.class
origLines[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
origLines.getClass().getName() == java.util.LinkedList.class
revLines[].getClass().getName() elements == java.lang.String.class
revLines[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
size(origLines[]) one of { 54, 174 }
size(revLines[]) one of { 11, 308 }
origLines.getClass().getName() == revLines.getClass().getName()
===========================================================================
diffutills.DaikonTestIssue10.testGenerateUnified(java.util.List, java.util.List):::EXIT
this.changeTest_from1 == orig(this.changeTest_from1)
this.changeTest_from1[] == orig(this.changeTest_from1[])
this.changeTest_to1 == orig(this.changeTest_to1)
this.changeTest_to1[] == orig(this.changeTest_to1[])
this.deleteTest_from1 == orig(this.deleteTest_from1)
this.deleteTest_from1[] == orig(this.deleteTest_from1[])
this.deleteTest_to1 == orig(this.deleteTest_to1)
this.deleteTest_to1[] == orig(this.deleteTest_to1[])
this.deleteTest_to1[] == orig(this.deleteTest_to[])
this.insertTest_from1 == orig(this.insertTest_from1)
this.insertTest_from1[] == orig(this.insertTest_from1[])
this.insertTest_from1[] == orig(this.insertTest_from[])
this.insertTest_to1 == orig(this.insertTest_to1)
this.insertTest_to1[] == orig(this.insertTest_to1[])
diffutills.DaikonTestIssue10.FS == orig(diffutills.DaikonTestIssue10.FS)
diffutills.DaikonTestIssue10.resourceFolder == orig(diffutills.DaikonTestIssue10.resourceFolder)
diffutills.DaikonTestIssue10.originalFilename == orig(diffutills.DaikonTestIssue10.originalFilename)
diffutills.DaikonTestIssue10.revisedFilename == orig(diffutills.DaikonTestIssue10.revisedFilename)
diffutills.DaikonTestIssue10.originalFilenameOneDelta == orig(diffutills.DaikonTestIssue10.originalFilenameOneDelta)
diffutills.DaikonTestIssue10.revisedFilenameOneDelta == orig(diffutills.DaikonTestIssue10.revisedFilenameOneDelta)
this.changeTest_from == orig(this.changeTest_from)
this.changeTest_from[] == orig(this.changeTest_from[])
this.changeTest_to == orig(this.changeTest_to)
this.changeTest_to[] == orig(this.changeTest_to[])
this.deleteTest_from == orig(this.deleteTest_from)
this.deleteTest_from[] == orig(this.deleteTest_from[])
this.deleteTest_to == orig(this.deleteTest_to)
this.insertTest_from == orig(this.insertTest_from)
this.insertTest_to == orig(this.insertTest_to)
this.insertTest_to[] == orig(this.insertTest_to[])
origLines[] == orig(origLines[])
revLines[] == orig(revLines[])
size(this.changeTest_from1[]) == orig(size(this.changeTest_to1[]))
size(this.changeTest_from1[]) == orig(size(this.deleteTest_from1[]))
size(this.changeTest_from1[]) == orig(size(this.insertTest_to1[]))
size(this.changeTest_from1[]) == orig(size(this.changeTest_from[]))-1
size(this.changeTest_from1[]) == orig(size(this.changeTest_to[]))-1
size(this.changeTest_from1[]) == orig(size(this.deleteTest_from[]))-1
size(this.changeTest_from1[]) == orig(size(this.insertTest_to[]))-1
size(this.deleteTest_to1[]) == orig(size(this.insertTest_from1[]))
size(this.deleteTest_to1[]) == orig(size(this.insertTest_from[]))
size(this.changeTest_from[]) == orig(size(this.changeTest_to[]))
size(this.changeTest_from[]) == orig(size(this.deleteTest_from[]))
size(this.changeTest_from[]) == orig(size(this.insertTest_to[]))
origLines[].getClass().getName() elements == java.lang.String.class
origLines[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
revLines[].getClass().getName() elements == java.lang.String.class
revLines[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
this.changeTest_from1.getClass().getName() == orig(this.changeTest_from1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.changeTest_to1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.deleteTest_from1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.deleteTest_to1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.insertTest_from1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.insertTest_to1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.changeTest_from.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.changeTest_to.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.deleteTest_from.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.deleteTest_to.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.insertTest_from.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.insertTest_to.getClass().getName())
diffutills.DaikonTestIssue10.FS.toString == orig(diffutills.DaikonTestIssue10.FS.toString)
diffutills.DaikonTestIssue10.resourceFolder.toString == orig(diffutills.DaikonTestIssue10.resourceFolder.toString)
diffutills.DaikonTestIssue10.originalFilename.toString == orig(diffutills.DaikonTestIssue10.originalFilename.toString)
diffutills.DaikonTestIssue10.revisedFilename.toString == orig(diffutills.DaikonTestIssue10.revisedFilename.toString)
diffutills.DaikonTestIssue10.originalFilenameOneDelta.toString == orig(diffutills.DaikonTestIssue10.originalFilenameOneDelta.toString)
diffutills.DaikonTestIssue10.revisedFilenameOneDelta.toString == orig(diffutills.DaikonTestIssue10.revisedFilenameOneDelta.toString)
===========================================================================
diffutills.DaikonTestIssue10.testGenerateUnifiedWithOneDelta():::ENTER
===========================================================================
diffutills.DaikonTestIssue10.testGenerateUnifiedWithOneDelta():::EXIT
this.changeTest_from1 == orig(this.changeTest_from1)
this.changeTest_from1[] == orig(this.changeTest_from1[])
this.changeTest_to1 == orig(this.changeTest_to1)
this.changeTest_to1[] == orig(this.changeTest_to1[])
this.deleteTest_from1 == orig(this.deleteTest_from1)
this.deleteTest_from1[] == orig(this.deleteTest_from1[])
this.deleteTest_to1 == orig(this.deleteTest_to1)
this.deleteTest_to1[] == orig(this.deleteTest_to1[])
this.deleteTest_to1[] == orig(this.deleteTest_to[])
this.insertTest_from1 == orig(this.insertTest_from1)
this.insertTest_from1[] == orig(this.insertTest_from1[])
this.insertTest_from1[] == orig(this.insertTest_from[])
this.insertTest_to1 == orig(this.insertTest_to1)
this.insertTest_to1[] == orig(this.insertTest_to1[])
diffutills.DaikonTestIssue10.FS == orig(diffutills.DaikonTestIssue10.FS)
diffutills.DaikonTestIssue10.resourceFolder == orig(diffutills.DaikonTestIssue10.resourceFolder)
diffutills.DaikonTestIssue10.originalFilename == orig(diffutills.DaikonTestIssue10.originalFilename)
diffutills.DaikonTestIssue10.revisedFilename == orig(diffutills.DaikonTestIssue10.revisedFilename)
diffutills.DaikonTestIssue10.originalFilenameOneDelta == orig(diffutills.DaikonTestIssue10.originalFilenameOneDelta)
diffutills.DaikonTestIssue10.revisedFilenameOneDelta == orig(diffutills.DaikonTestIssue10.revisedFilenameOneDelta)
this.changeTest_from == orig(this.changeTest_from)
this.changeTest_from[] == orig(this.changeTest_from[])
this.changeTest_to == orig(this.changeTest_to)
this.changeTest_to[] == orig(this.changeTest_to[])
this.deleteTest_from == orig(this.deleteTest_from)
this.deleteTest_from[] == orig(this.deleteTest_from[])
this.deleteTest_to == orig(this.deleteTest_to)
this.insertTest_from == orig(this.insertTest_from)
this.insertTest_to == orig(this.insertTest_to)
this.insertTest_to[] == orig(this.insertTest_to[])
size(this.changeTest_from1[]) == orig(size(this.changeTest_to1[]))
size(this.changeTest_from1[]) == orig(size(this.deleteTest_from1[]))
size(this.changeTest_from1[]) == orig(size(this.insertTest_to1[]))
size(this.changeTest_from1[]) == orig(size(this.changeTest_from[]))-1
size(this.changeTest_from1[]) == orig(size(this.changeTest_to[]))-1
size(this.changeTest_from1[]) == orig(size(this.deleteTest_from[]))-1
size(this.changeTest_from1[]) == orig(size(this.insertTest_to[]))-1
size(this.deleteTest_to1[]) == orig(size(this.insertTest_from1[]))
size(this.deleteTest_to1[]) == orig(size(this.insertTest_from[]))
size(this.changeTest_from[]) == orig(size(this.changeTest_to[]))
size(this.changeTest_from[]) == orig(size(this.deleteTest_from[]))
size(this.changeTest_from[]) == orig(size(this.insertTest_to[]))
this.changeTest_from1.getClass().getName() == orig(this.changeTest_from1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.changeTest_to1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.deleteTest_from1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.deleteTest_to1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.insertTest_from1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.insertTest_to1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.changeTest_from.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.changeTest_to.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.deleteTest_from.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.deleteTest_to.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.insertTest_from.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.insertTest_to.getClass().getName())
diffutills.DaikonTestIssue10.FS.toString == orig(diffutills.DaikonTestIssue10.FS.toString)
diffutills.DaikonTestIssue10.resourceFolder.toString == orig(diffutills.DaikonTestIssue10.resourceFolder.toString)
diffutills.DaikonTestIssue10.originalFilename.toString == orig(diffutills.DaikonTestIssue10.originalFilename.toString)
diffutills.DaikonTestIssue10.revisedFilename.toString == orig(diffutills.DaikonTestIssue10.revisedFilename.toString)
diffutills.DaikonTestIssue10.originalFilenameOneDelta.toString == orig(diffutills.DaikonTestIssue10.originalFilenameOneDelta.toString)
diffutills.DaikonTestIssue10.revisedFilenameOneDelta.toString == orig(diffutills.DaikonTestIssue10.revisedFilenameOneDelta.toString)
===========================================================================
diffutills.DaikonTestIssue10.testPatch_Change():::ENTER
===========================================================================
diffutills.DaikonTestIssue10.testPatch_Change():::EXIT
this.changeTest_from1 == orig(this.changeTest_from1)
this.changeTest_from1[] == orig(this.changeTest_from1[])
this.changeTest_to1 == orig(this.changeTest_to1)
this.changeTest_to1[] == orig(this.changeTest_to1[])
this.deleteTest_from1 == orig(this.deleteTest_from1)
this.deleteTest_from1[] == orig(this.deleteTest_from1[])
this.deleteTest_to1 == orig(this.deleteTest_to1)
this.deleteTest_to1[] == orig(this.deleteTest_to1[])
this.deleteTest_to1[] == orig(this.deleteTest_to[])
this.insertTest_from1 == orig(this.insertTest_from1)
this.insertTest_from1[] == orig(this.insertTest_from1[])
this.insertTest_from1[] == orig(this.insertTest_from[])
this.insertTest_to1 == orig(this.insertTest_to1)
this.insertTest_to1[] == orig(this.insertTest_to1[])
diffutills.DaikonTestIssue10.FS == orig(diffutills.DaikonTestIssue10.FS)
diffutills.DaikonTestIssue10.resourceFolder == orig(diffutills.DaikonTestIssue10.resourceFolder)
diffutills.DaikonTestIssue10.originalFilename == orig(diffutills.DaikonTestIssue10.originalFilename)
diffutills.DaikonTestIssue10.revisedFilename == orig(diffutills.DaikonTestIssue10.revisedFilename)
diffutills.DaikonTestIssue10.originalFilenameOneDelta == orig(diffutills.DaikonTestIssue10.originalFilenameOneDelta)
diffutills.DaikonTestIssue10.revisedFilenameOneDelta == orig(diffutills.DaikonTestIssue10.revisedFilenameOneDelta)
this.changeTest_from == orig(this.changeTest_from)
this.changeTest_from[] == orig(this.changeTest_from[])
this.changeTest_to == orig(this.changeTest_to)
this.changeTest_to[] == orig(this.changeTest_to[])
this.deleteTest_from == orig(this.deleteTest_from)
this.deleteTest_from[] == orig(this.deleteTest_from[])
this.deleteTest_to == orig(this.deleteTest_to)
this.insertTest_from == orig(this.insertTest_from)
this.insertTest_to == orig(this.insertTest_to)
this.insertTest_to[] == orig(this.insertTest_to[])
size(this.changeTest_from1[]) == orig(size(this.changeTest_to1[]))
size(this.changeTest_from1[]) == orig(size(this.deleteTest_from1[]))
size(this.changeTest_from1[]) == orig(size(this.insertTest_to1[]))
size(this.changeTest_from1[]) == orig(size(this.changeTest_from[]))-1
size(this.changeTest_from1[]) == orig(size(this.changeTest_to[]))-1
size(this.changeTest_from1[]) == orig(size(this.deleteTest_from[]))-1
size(this.changeTest_from1[]) == orig(size(this.insertTest_to[]))-1
size(this.deleteTest_to1[]) == orig(size(this.insertTest_from1[]))
size(this.deleteTest_to1[]) == orig(size(this.insertTest_from[]))
size(this.changeTest_from[]) == orig(size(this.changeTest_to[]))
size(this.changeTest_from[]) == orig(size(this.deleteTest_from[]))
size(this.changeTest_from[]) == orig(size(this.insertTest_to[]))
this.changeTest_from1.getClass().getName() == orig(this.changeTest_from1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.changeTest_to1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.deleteTest_from1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.deleteTest_to1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.insertTest_from1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.insertTest_to1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.changeTest_from.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.changeTest_to.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.deleteTest_from.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.deleteTest_to.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.insertTest_from.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.insertTest_to.getClass().getName())
diffutills.DaikonTestIssue10.FS.toString == orig(diffutills.DaikonTestIssue10.FS.toString)
diffutills.DaikonTestIssue10.resourceFolder.toString == orig(diffutills.DaikonTestIssue10.resourceFolder.toString)
diffutills.DaikonTestIssue10.originalFilename.toString == orig(diffutills.DaikonTestIssue10.originalFilename.toString)
diffutills.DaikonTestIssue10.revisedFilename.toString == orig(diffutills.DaikonTestIssue10.revisedFilename.toString)
diffutills.DaikonTestIssue10.originalFilenameOneDelta.toString == orig(diffutills.DaikonTestIssue10.originalFilenameOneDelta.toString)
diffutills.DaikonTestIssue10.revisedFilenameOneDelta.toString == orig(diffutills.DaikonTestIssue10.revisedFilenameOneDelta.toString)
===========================================================================
diffutills.DaikonTestIssue10.testPatch_Insert():::ENTER
===========================================================================
diffutills.DaikonTestIssue10.testPatch_Insert():::EXIT
this.changeTest_from1 == orig(this.changeTest_from1)
this.changeTest_from1[] == orig(this.changeTest_from1[])
this.changeTest_to1 == orig(this.changeTest_to1)
this.changeTest_to1[] == orig(this.changeTest_to1[])
this.deleteTest_from1 == orig(this.deleteTest_from1)
this.deleteTest_from1[] == orig(this.deleteTest_from1[])
this.deleteTest_to1 == orig(this.deleteTest_to1)
this.deleteTest_to1[] == orig(this.deleteTest_to1[])
this.deleteTest_to1[] == orig(this.deleteTest_to[])
this.insertTest_from1 == orig(this.insertTest_from1)
this.insertTest_from1[] == orig(this.insertTest_from1[])
this.insertTest_from1[] == orig(this.insertTest_from[])
this.insertTest_to1 == orig(this.insertTest_to1)
this.insertTest_to1[] == orig(this.insertTest_to1[])
diffutills.DaikonTestIssue10.FS == orig(diffutills.DaikonTestIssue10.FS)
diffutills.DaikonTestIssue10.resourceFolder == orig(diffutills.DaikonTestIssue10.resourceFolder)
diffutills.DaikonTestIssue10.originalFilename == orig(diffutills.DaikonTestIssue10.originalFilename)
diffutills.DaikonTestIssue10.revisedFilename == orig(diffutills.DaikonTestIssue10.revisedFilename)
diffutills.DaikonTestIssue10.originalFilenameOneDelta == orig(diffutills.DaikonTestIssue10.originalFilenameOneDelta)
diffutills.DaikonTestIssue10.revisedFilenameOneDelta == orig(diffutills.DaikonTestIssue10.revisedFilenameOneDelta)
this.changeTest_from == orig(this.changeTest_from)
this.changeTest_from[] == orig(this.changeTest_from[])
this.changeTest_to == orig(this.changeTest_to)
this.changeTest_to[] == orig(this.changeTest_to[])
this.deleteTest_from == orig(this.deleteTest_from)
this.deleteTest_from[] == orig(this.deleteTest_from[])
this.deleteTest_to == orig(this.deleteTest_to)
this.insertTest_from == orig(this.insertTest_from)
this.insertTest_to == orig(this.insertTest_to)
this.insertTest_to[] == orig(this.insertTest_to[])
size(this.changeTest_from1[]) == orig(size(this.changeTest_to1[]))
size(this.changeTest_from1[]) == orig(size(this.deleteTest_from1[]))
size(this.changeTest_from1[]) == orig(size(this.insertTest_to1[]))
size(this.changeTest_from1[]) == orig(size(this.changeTest_from[]))-1
size(this.changeTest_from1[]) == orig(size(this.changeTest_to[]))-1
size(this.changeTest_from1[]) == orig(size(this.deleteTest_from[]))-1
size(this.changeTest_from1[]) == orig(size(this.insertTest_to[]))-1
size(this.deleteTest_to1[]) == orig(size(this.insertTest_from1[]))
size(this.deleteTest_to1[]) == orig(size(this.insertTest_from[]))
size(this.changeTest_from[]) == orig(size(this.changeTest_to[]))
size(this.changeTest_from[]) == orig(size(this.deleteTest_from[]))
size(this.changeTest_from[]) == orig(size(this.insertTest_to[]))
this.changeTest_from1.getClass().getName() == orig(this.changeTest_from1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.changeTest_to1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.deleteTest_from1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.deleteTest_to1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.insertTest_from1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.insertTest_to1.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.changeTest_from.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.changeTest_to.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.deleteTest_from.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.deleteTest_to.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.insertTest_from.getClass().getName())
this.changeTest_from1.getClass().getName() == orig(this.insertTest_to.getClass().getName())
diffutills.DaikonTestIssue10.FS.toString == orig(diffutills.DaikonTestIssue10.FS.toString)
diffutills.DaikonTestIssue10.resourceFolder.toString == orig(diffutills.DaikonTestIssue10.resourceFolder.toString)
diffutills.DaikonTestIssue10.originalFilename.toString == orig(diffutills.DaikonTestIssue10.originalFilename.toString)
diffutills.DaikonTestIssue10.revisedFilename.toString == orig(diffutills.DaikonTestIssue10.revisedFilename.toString)
diffutills.DaikonTestIssue10.originalFilenameOneDelta.toString == orig(diffutills.DaikonTestIssue10.originalFilenameOneDelta.toString)
diffutills.DaikonTestIssue10.revisedFilenameOneDelta.toString == orig(diffutills.DaikonTestIssue10.revisedFilenameOneDelta.toString)
===========================================================================
junit.framework.Assert:::OBJECT
this has only one value
===========================================================================
junit.framework.Assert.Assert():::EXIT
===========================================================================
junit.framework.Assert.assertEquals(int, int):::ENTER
expected == actual
expected == 1
===========================================================================
junit.framework.Assert.assertEquals(int, int):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.Object, java.lang.Object):::ENTER
expected != null
actual != null
===========================================================================
junit.framework.Assert.assertEquals(java.lang.Object, java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, int, int):::ENTER
expected == actual
message == null
expected == 1
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, int, int):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::ENTER
message == null
expected != null
actual != null
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT76
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.Object):::ENTER
object.getClass().getName() == difflib.Patch.class
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::ENTER
message == null
object.getClass().getName() == difflib.Patch.class
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertTrue(boolean):::ENTER
condition == true
===========================================================================
junit.framework.Assert.assertTrue(boolean):::EXIT
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::ENTER
message == null
condition == true
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::EXIT
===========================================================================
junit.framework.TestCase:::OBJECT
this has only one value
this.getClass().getName() == diffutills.DaikonTestIssue10.class
this.fName == null
===========================================================================
junit.framework.TestCase.TestCase():::EXIT
===========================================================================
junit.framework.TestCase.assertEquals(int, int):::ENTER
expected == actual
expected == 1
===========================================================================
junit.framework.TestCase.assertEquals(int, int):::EXIT
===========================================================================
junit.framework.TestCase.assertEquals(java.lang.Object, java.lang.Object):::ENTER
expected != null
actual != null
===========================================================================
junit.framework.TestCase.assertEquals(java.lang.Object, java.lang.Object):::EXIT
===========================================================================
junit.framework.TestCase.assertNotNull(java.lang.Object):::ENTER
object.getClass().getName() == difflib.Patch.class
===========================================================================
junit.framework.TestCase.assertNotNull(java.lang.Object):::EXIT
===========================================================================
junit.framework.TestCase.assertTrue(boolean):::ENTER
condition == true
===========================================================================
junit.framework.TestCase.assertTrue(boolean):::EXIT
Exiting Daikon.
